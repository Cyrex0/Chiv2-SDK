#pragma once

/**
 * Name: chiv2
 * Version: 123456
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class TBL.UtilityAI_Action
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UUtilityAI_Action : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnDone;                                                  // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsInProgress;                                           // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsReadyToComplete;                                      // 0x0039(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanInterrupt;                                           // 0x003A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EActionPriorityLevel                                   PriorityLevel;                                           // 0x003B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLatentAction;                                           // 0x003C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDoNotRestartIfRedecidedUpon;                            // 0x003D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_47QH[0x2];                                   // 0x003E(0x0002) MISSED OFFSET (PADDING)

	public:
		void TickAction(float DeltaTime, const struct FUtilityAI_Context& C);
		bool ShouldRestartIfRedecidedUpon();
		void SetCanInterrupt(bool bInCanInterrupt);
		void PerformAction(const struct FUtilityAI_Context& C);
		void MarkReadyToFinish();
		void MarkFinished();
		bool IsInProgress();
		bool IsDoneOrCanInterrupt();
		void CompleteAction(const struct FUtilityAI_Context& C);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.A_DismountSiegeEngine
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UA_DismountSiegeEngine : public UUtilityAI_Action
	{
	public:
		float                                                      DismountDelay;                                           // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           DismountDelayVariance;                                   // 0x0044(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_03ZP[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        DismountTimerHandle;                                     // 0x0050(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Dismount(const struct FAIDismountData& AIDismountData);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.A_EnterCombatWith
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UA_EnterCombatWith : public UUtilityAI_Action
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.A_MaintainDistanceFromActor
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UA_MaintainDistanceFromActor : public UUtilityAI_Action
	{
	public:
		float                                                      Distance;                                                // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintDistance;                                          // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSprinting;                                              // 0x0048(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BLCB[0x17];                                  // 0x0049(0x0017) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.A_SetBlackboardValueToContextTarget
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UA_SetBlackboardValueToContextTarget : public UUtilityAI_Action
	{
	public:
		class FName                                                KeyName;                                                 // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.A_UseBatteringRam
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UA_UseBatteringRam : public UUtilityAI_Action
	{
	public:
		class AAIController*                                       Controller;                                              // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ABatteringRam*                                       BatteringRam;                                            // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USiegeMountPoint*                                    SiegeMountPoint;                                         // 0x0050(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DesiredChargePercent;                                    // 0x0058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCharging;                                               // 0x005C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4HTV[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (PADDING)

	public:
		void StopCharging();
		void StartCharging();
		void OnDismount(class ATBLCharacter* Driver, TBL_EDismountType DismountType);
		void OnChargeUpdated(class ABatteringRam* InBatteringRam, float Charge);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.A_UseCharacterMountableActor
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UA_UseCharacterMountableActor : public UUtilityAI_Action
	{
	public:
		class AAIController*                                       Controller;                                              // 0x0040(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ACharacterMountableActor*                            CharacterMountableActor;                                 // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USiegeMountPoint*                                    SiegeMountPoint;                                         // 0x0050(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DesiredChargePercent;                                    // 0x0058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCharging;                                               // 0x005C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAXQ[0x3];                                   // 0x005D(0x0003) MISSED OFFSET (PADDING)

	public:
		void StopCharging();
		void StartCharging();
		void OnDismount(class ATBLCharacter* Driver, TBL_EDismountType DismountType);
		void OnChargeUpdated(class ACharacterMountableActor* InCharacterMountableActor, float Charge);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class UTBLComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilitiesComponent
	 * Size -> 0x00C8 (FullSize[0x01D0] - InheritedSize[0x0108])
	 */
	class UAbilitiesComponent : public UTBLComponent
	{
	public:
		unsigned char                                              UnknownData_J46W[0x18];                                  // 0x0108(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Version;                                                 // 0x0120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3YLQ[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAdded;                                                 // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemoved;                                               // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInitiated;                                             // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnError;                                                 // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOnCooldown;                                            // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTargetMethodFinished;                                  // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UAbilitySpec*>                                AbilityGrants;                                           // 0x0188(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAbilityArray                                       Abilities;                                               // 0x0198(0x0018) Transient, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UAbilitySpec*                                        InitiatingAbility;                                       // 0x01B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceReplicated;                                        // 0x01B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OJYF[0x7];                                   // 0x01B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAbilityErrorInfo>                           PreviousAbilityErrors;                                   // 0x01C0(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		struct FResult TerminateAbility(class UAbilitySpec* Spec);
		void SyncServerInitiateAbility(const struct FServerInitiateAbilityParams& Params);
		void ServerTerminateAbility(class UAbilitySpec* AbilitySpec);
		void ServerInitiateAbility(const struct FServerInitiateAbilityParams& Params);
		void ServerCombatStateStartAttack(class UAbilitySpec* AbilitySpec, const struct FCombatStateStartAttack& Params);
		void RemoveInvocationActor(class UAbilitySpec* AbilitySpec, TBL_EInvocationScope Scope, class AActor* Actor);
		void OnInvocationComplete(class AAbilityInvocation* Invocation, class UAbilitySpec* AbilitySpec);
		struct FResult InitiateAbility(class UAbilitySpec* Spec, const struct FAbilityInitiationParams& InitiationParams);
		struct FAbility GetAbility(class UAbilitySpec* Spec);
		void ClientStartTargetMethodCosmetic(class UAbilitySpec* AbilitySpec, int InvocationId, const struct FAbilityInitiationParams& InitiationParams, class UAbilityTargetMethod* TargetMethod);
		void ClientSpamTest(const class FString& Payload);
		void ClientAbilityInvocationComplete(int InvocationId);
		void ClientAbilityInitiated(const struct FClientAbilityInitiationParams& Params);
		struct FResult CanInitiate(class UAbilitySpec* Spec);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLObject
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UTBLObject : public UAssemblyObject
	{
	public:
		class UTBLObject*                                          Template;                                                // 0x0028(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_22MZ[0x10];                                  // 0x0030(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilityActivationMethod
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class UAbilityActivationMethod : public UTBLObject
	{
	public:
		unsigned char                                              UnknownData_NN4T[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCondition*>                                  InitiatorPrerequisites;                                  // 0x0050(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     InitiatorActions;                                        // 0x0060(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAllowSimultaneousInitiation : 1;                        // 0x0070(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9OQN[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilitySpec*                                        AbilitySpec;                                             // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               Initiator;                                               // 0x0080(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AAbilityInvocation>                   Invocation;                                              // 0x0088(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilityConfig
	 * Size -> 0x0540 (FullSize[0x05E8] - InheritedSize[0x00A8])
	 */
	class UAbilityConfig : public UAssemblyBlueprint
	{
	public:
		int                                                        GlobalXp;                                                // 0x00A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RPKX[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOnlineClassXp>                              ClassXps;                                                // 0x00B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        RewardTokens;                                            // 0x00C0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      AccessGroups;                                            // 0x00D0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IsLookingDownAngle;                                      // 0x00E0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FakeClientProjectileInterpolateTime;                     // 0x00E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FakeClientProjectileInterpolateExp;                      // 0x00E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryBoxAngle;                                           // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDeathRecapLimits                                   DeathRecapLimits[0x4];                                   // 0x00F0(0x0020) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class UClass*                                              DefaultAbilityClass;                                     // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class URewardTable*>                                CookedTreasureTables;                                    // 0x0118(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class URewardTable*                                        PlaytimeDropTable;                                       // 0x0128(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         PlaytimeAwardCurve;                                      // 0x0130(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlaytimeForItem;                                         // 0x0138(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxRecentlyAwardedPlaytime;                              // 0x013C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FProjectileHUDConfig                                ProjectileHUD;                                           // 0x0140(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bDebugSounds;                                            // 0x014C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMuteServerSounds;                                       // 0x014D(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1LH6[0x2];                                   // 0x014E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        ChanceToLogAbilityEvents;                                // 0x0150(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnLimitEndTime;                                        // 0x0154(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLocationBasedDamageModifiers                       LocationBasedDamageModifiers;                            // 0x0158(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FLocationBasedDamageModifiers                       RangedLocationBasedDamageModifiers;                      // 0x0164(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      BowAgainstArcherDamageModifier;                          // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SiegeAgainstCatapultDamageModifier;                      // 0x0174(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThwackTracerLengthPercent;                               // 0x0178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintAttackSpeed;                                       // 0x017C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFocusSettings                                      FocusSettings;                                           // 0x0180(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D47X[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DownedWeapon;                                            // 0x0190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              GoreHeadItem;                                            // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              HorseClass[0x28];                                        // 0x01A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              ArmoredHorseClass[0x28];                                 // 0x01C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              LTSHudMarkerComponentClass[0x28];                        // 0x01F0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TArray<class UClass*>                                      CombatStateSets;                                         // 0x0218(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAimPenaltySettings                                 AimPenalty;                                              // 0x0228(0x00E0) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      ParryBreakDamageModifier;                                // 0x0308(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ParryBreakNonFatal;                                      // 0x030C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldCooldownRefreshStatesResetCooldowns;              // 0x030D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q938[0x2];                                   // 0x030E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFeintTime                                          FeintTime;                                               // 0x0310(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FFeintMinTime                                       FeintMinTime;                                            // 0x0320(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		float                                                      FeintComboAnimPercentThreshold;                          // 0x0330(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FeintMaxTransitionTargetPercent;                         // 0x0334(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FeintEndWindow;                                          // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CounterFeintEndWindow;                                   // 0x033C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryComboTiming;                                        // 0x0340(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RiposteParryWindow;                                      // 0x0344(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CancelCooldown;                                          // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ComboCancelTriggerEndWindow;                             // 0x034C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ComboCancelInputWindow;                                  // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryForgivenessWindowTime;                              // 0x0354(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActiveRiposteWindowTime;                                 // 0x0358(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileCounterWindowTime;                             // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CounterWindowTime;                                       // 0x0360(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CounterSuccessExtendWindowTime;                          // 0x0364(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadCancelWindow;                                     // 0x0368(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingTime;                                             // 0x036C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CanSprintInAirTime;                                      // 0x0370(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RemainInSprintBelowMinSpeedTime;                         // 0x0374(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      KickLowAngle;                                            // 0x0378(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ComboFromBlockedTime;                                    // 0x037C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseClashCameraAngleCheck;                               // 0x0380(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4E2K[0x3];                                   // 0x0381(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxClashCameraAngle;                                     // 0x0384(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bScaleRecoveryAnimiation;                                // 0x0388(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CZP0[0x3];                                   // 0x0389(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PercentChanceToPlayRootMotionDeathAnimation;             // 0x038C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PercentChanceToPlayRagdollInsteadOfAnimation;            // 0x0390(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRiposteUsesParriedComboStateOnlyForSlash;               // 0x0394(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U2F2[0x3];                                   // 0x0395(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStaminaCosts                                       StaminaCosts;                                            // 0x0398(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FStaminaBonus                                       StaminaBonus;                                            // 0x03B8(0x0014) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ParryBreakStamina;                                       // 0x03CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryBreakStaminaDelay;                                  // 0x03D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RevivedStamina;                                          // 0x03D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GlobalStaminaModifier;                                   // 0x03D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ThrownStaminaModifier;                                   // 0x03DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryReduceStaminaTime;                                  // 0x03E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryReduceStaminaRate;                                  // 0x03E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ParryDisableStaminaDrainTime;                            // 0x03E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActiveRiposteBlockedStaminaModifier;                     // 0x03EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CounterBlockedStaminaModifier;                           // 0x03F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WEG4[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDownedSprintStamina                                DownedSprintStamina;                                     // 0x03F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FBlockingCategoryModifier                           BlockingCategoryStaminaModifier;                         // 0x0408(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FHorseStaminaCosts                                  HorseStaminaCosts;                                       // 0x0418(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FSpecialItemCharge                                  SpecialItemCharge;                                       // 0x0438(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SpecialAbilityHealingScoreModifier;                      // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZBSR[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        AttackNames;                                             // 0x0468(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, unsigned char>                           AttackNamesToIndex;                                      // 0x0478(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        CombatStateNames;                                        // 0x04C8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, unsigned char>                           CombatStateNamesToIndex;                                 // 0x04D8(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        InputActionNames;                                        // 0x0528(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, unsigned char>                           InputActionNameToIndex;                                  // 0x0538(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        CharacterMovementStates;                                 // 0x0588(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, unsigned char>                           CharacterMovementStateToIndex;                           // 0x0598(0x0050) Transient, Protected, NativeAccessSpecifierProtected

	public:
		class FName GetAnimationMontageSection(const class FName& AbilityName);
		class FName GetAnimationMontage(const class FName& AbilityName);
		class UAbilitySpec* GetAbilitySpec(const class FName& AbilityName);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Action
	 * Size -> 0x0130 (FullSize[0x0170] - InheritedSize[0x0040])
	 */
	class UAction : public UTBLObject
	{
	public:
		unsigned char                                              UnknownData_17BE[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Version;                                                 // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UObject>                              Initiator;                                               // 0x0054(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UObject>                              Target;                                                  // 0x005C(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             TargetLocation;                                          // 0x0064(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FActionContext                                      Context;                                                 // 0x0070(0x00E0) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BUJO[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLogEvents;                                              // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P1EX[0x3];                                   // 0x0159(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Flags;                                                   // 0x015C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RVXH[0x8];                                   // 0x0160(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsComplete;                                             // 0x0168(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NFM8[0x7];                                   // 0x0169(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilityCost
	 * Size -> 0x0010 (FullSize[0x0180] - InheritedSize[0x0170])
	 */
	class UAbilityCost : public UAction
	{
	public:
		TArray<class UCondition*>                                  Conditions;                                              // 0x0170(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilityInvocation
	 * Size -> 0x01F8 (FullSize[0x0450] - InheritedSize[0x0258])
	 */
	class AAbilityInvocation : public AActor
	{
	public:
		unsigned char                                              UnknownData_A3LF[0x18];                                  // 0x0258(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnComplete;                                              // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FAbilityInitiationParams                            InitiationParams;                                        // 0x0280(0x0038) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		class AActor*                                              Initiator;                                               // 0x02B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilitySpec*                                        InitiatedAbilitySpec;                                    // 0x02C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        ID;                                                      // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O4OM[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityInvocationRegistryComponent*                 InvocationRegistry;                                      // 0x02D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilityActivationMethod*                            ActivationMethod;                                        // 0x02D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilityTargetMethod*                                TargetMethod;                                            // 0x02E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		double                                                     CompletionTime;                                          // 0x02E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClientComplete;                                         // 0x02F0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bActive;                                                 // 0x02F1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bActivationMethodFinished;                               // 0x02F2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTargetMethodFinished;                                   // 0x02F3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClientInvocation;                                       // 0x02F4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GYGW[0x3];                                   // 0x02F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTimerHandle>                                AutonomousTimers;                                        // 0x02F8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCleanedUp;                                              // 0x0308(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JPDS[0x3];                                   // 0x0309(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Flags;                                                   // 0x030C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FInvocationComplete                                 InvocationEvent;                                         // 0x0310(0x00F8) NativeAccessSpecifierPublic
		class FName                                                AbilitiesTableRow;                                       // 0x0408(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      InventoryItem;                                           // 0x0410(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              InventoryItemClass;                                      // 0x0418(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        AttackID;                                                // 0x0420(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        RandomSeed;                                              // 0x0424(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FInvocationActor>                            InvocationActors;                                        // 0x0428(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPendingCleanup;                                         // 0x0438(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T0PI[0x7];                                   // 0x0439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              InitiatorWorld;                                          // 0x0440(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C53M[0x8];                                   // 0x0448(0x0008) MISSED OFFSET (PADDING)

	public:
		void Terminate();
		void RemoveInvocationActor(class AActor* Actor);
		void OnActorDestroyed(class AActor* Actor);
		void FindInvocationActors(const class FName& ActorName, TArray<class AActor*>* OutActors);
		int FindInvocationActor(class AActor* Actor);
		void AddInvocationActor(const class FName& ActorName, class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilityInvocationRegistryComponent
	 * Size -> 0x0058 (FullSize[0x0160] - InheritedSize[0x0108])
	 */
	class UAbilityInvocationRegistryComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_GSLY[0x58];                                  // 0x0108(0x0058) MISSED OFFSET (PADDING)

	public:
		void ClientTargetMethodEvent(int InvocationId, const class FName& TargetMethodName, TBL_ETargetMethodEvent Event, const struct FVector& Location, TArray<class AActor*> HitTargets);
		void ClientAbilityError(int InvocationId, const struct FResult& Error);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilitySpec
	 * Size -> 0x0060 (FullSize[0x0108] - InheritedSize[0x00A8])
	 */
	class UAbilitySpec : public UAssemblyBlueprint
	{
	public:
		float                                                      BlueprintCleanupDelayTime;                               // 0x00A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VLIA[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityActivationMethod*                            ActivationMethod;                                        // 0x00B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilityTargetMethod*                                TargetMethod;                                            // 0x00B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCharacterControlOverTime>                   CharacterControl;                                        // 0x00C0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EProjectileSpawnType                                   ProjectileSpawnType;                                     // 0x00D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAimAtCrosshair;                                         // 0x00D1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInterruptOnDeath;                                       // 0x00D2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_54DU[0x5];                                   // 0x00D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAction*>                                     AllActions;                                              // 0x00D8(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UCondition*>                                  AllConditions;                                           // 0x00E8(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAbilityTargetMethod*>                        AllTargetMethods;                                        // 0x00F8(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void GetAllChildActions(TArray<class UAction*>* outActions);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AbilityTargetMethod
	 * Size -> 0x0170 (FullSize[0x01B0] - InheritedSize[0x0040])
	 */
	class UAbilityTargetMethod : public UTBLObject
	{
	public:
		unsigned char                                              UnknownData_CKGV[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bFinished : 1;                                           // 0x0058(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUndoActionsOnCancel : 1;                                // 0x0058(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IPVL[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCondition*>                                  TargetPrerequisites;                                     // 0x0060(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     TargetActions;                                           // 0x0070(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     TargetBlockedActions;                                    // 0x0080(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                TargetMethodName;                                        // 0x0090(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUnblockable;                                            // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoParryBoxTrace;                                        // 0x0099(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AT10[0x2];                                   // 0x009A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Flags;                                                   // 0x009C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FActionContext                                      Context;                                                 // 0x00A0(0x00E0) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       bStarted;                                                // 0x0180(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0P2H[0x3];                                   // 0x0181(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               Initiator;                                               // 0x0184(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MultiTargetMethodIndex;                                  // 0x018C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilitySpec*                                        AbilitySpec;                                             // 0x0190(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AAbilityInvocation>                   Invocation;                                              // 0x0198(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class AActor>>                       AcquiredTargets;                                         // 0x01A0(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void StartCosmetic();
		void StartAutonomous();
		void Start();
		class AAbilityInvocation* GetInvocation();
		class FString GetContextString();
		void Finish();
		struct FVector ClampTargetLocationToGround(class AActor* InInitiator, const struct FVector& TargetLocation, float MaxRange, bool* bHitGround, bool bTraceComplex, float MaxGroundTraceZAllowance);
		struct FResult CanInitiate();
		void Cancel();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementInstance
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAchievementInstance : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameSparksAsset
	 * Size -> 0x00C8 (FullSize[0x00F8] - InheritedSize[0x0030])
	 */
	class UGameSparksAsset : public UPrimaryDataAsset
	{
	public:
		class FText                                                Title;                                                   // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x0048(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FString                                              EpicCatalogId;                                           // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              EpicFulfillmentId;                                       // 0x0070(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              XbCatalogId;                                             // 0x0080(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PSNCatalogId;                                            // 0x0090(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PSNLegacyCatalogId;                                      // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PSNLegacyEntitlementId;                                  // 0x00B0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PriceGold;                                               // 0x00C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PriceCrowns;                                             // 0x00C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PriceUSDCents;                                           // 0x00C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Listing;                                                 // 0x00CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSinglePurchase;                                         // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBePurchased;                                         // 0x00D1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBeListed;                                            // 0x00D2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0YM7[0x1];                                   // 0x00D3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        GrantGold;                                               // 0x00D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        GrantCrowns;                                             // 0x00D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnlineStat                                            LevelStat;                                               // 0x00DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YFQ5[0x3];                                   // 0x00DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Level;                                                   // 0x00E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETBLRarity                                             Rarity;                                                  // 0x00E4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WYC6[0x3];                                   // 0x00E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SpecialEvent;                                            // 0x00E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Achievement
	 * Size -> 0x0028 (FullSize[0x0120] - InheritedSize[0x00F8])
	 */
	class UAchievement : public UGameSparksAsset
	{
	public:
		bool                                                       bRepeatable;                                             // 0x00F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QSAQ[0x3];                                   // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MaxProgress;                                             // 0x00FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                Group;                                                   // 0x0100(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ERewardPolicy                                          RewardPolicy;                                            // 0x0108(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IZRR[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVirtualGoodReward>                          VirtualGoodRewards;                                      // 0x0110(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class FText GetTrackedObjectName(class APlayerState* InPlayerState, const struct FAchievementProgress& InAchievement);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementGameModeInstance
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAchievementGameModeInstance : public UAchievementInstance
	{
	public:
		TBL_EGameModeType                                          GamemodeType;                                            // 0x0028(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_USR2[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementGameModeWin
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UAchievementGameModeWin : public UAchievement
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementKill
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UAchievementKill : public UAchievement
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementLevelWinInstance
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UAchievementLevelWinInstance : public UAchievementInstance
	{
	public:
		class FName                                                LevelSetName;                                            // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementLevelWin
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UAchievementLevelWin : public UAchievement
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementsList
	 * Size -> 0x0090 (FullSize[0x0198] - InheritedSize[0x0108])
	 */
	class UAchievementsList : public UWidget
	{
	public:
		class FScriptDelegate                                      OnGenerateAchievementEvent;                              // 0x0108(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnFilterAchievementEvent;                                // 0x0118(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnSortAchievementEvent;                                  // 0x0128(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                TableRowStyleName;                                       // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLPlayerState*                                     PlayerState;                                             // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P2GN[0x20];                                  // 0x0148(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAchievementInstance*>                        TrackedObjects;                                          // 0x0168(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3LFX[0x20];                                  // 0x0178(0x0020) MISSED OFFSET (PADDING)

	public:
		void UpdateProcessedItems();
		bool OnSortAchievement__DelegateSignature(const struct FAchievementProgress& A, const struct FAchievementProgress& B);
		class UWidget* OnGenerateAchievement__DelegateSignature(const struct FAchievementProgress& Achievement);
		bool OnFilterAchievement__DelegateSignature(const struct FAchievementProgress& Achievement);
		void Initialize(class ATBLPlayerState* InPlayerState);
		int GetProcessedItemsCount();
		struct FAchievementProgress GetProcessedItemAt(int Index);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementWeaponKillInstance
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UAchievementWeaponKillInstance : public UAchievementInstance
	{
	public:
		class UClass*                                              WeaponClass;                                             // 0x0028(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInventoryType                                         ItemClassType;                                           // 0x0030(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H0E6[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AchievementWeaponKill
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UAchievementWeaponKill : public UAchievement
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AddMovementModifier
	 * Size -> 0x0010 (FullSize[0x0180] - InheritedSize[0x0170])
	 */
	class UAddMovementModifier : public UAction
	{
	public:
		class FName                                                Modifier;                                                // 0x0170(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRemove;                                                 // 0x0178(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EQM2[0x7];                                   // 0x0179(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ProgressionReward
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UProgressionReward : public UTBLObject
	{
	public:
		class FName                                                Name;                                                    // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AddRandomItemDrop
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UAddRandomItemDrop : public UProgressionReward
	{
	public:
		class URewardTable*                                        DropTable;                                               // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        AppId;                                                   // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnlineItemUnlockType                                  ItemUnlockType;                                          // 0x0054(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2DY6[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                RewardTokenName;                                         // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Quantity;                                                // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XSE3[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AIControlHandler
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UAIControlHandler : public UObject
	{
	public:
		TArray<struct FInputRequest>                               InputRequestList;                                        // 0x0028(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              SprintRequests[0x50];                                    // 0x0038(0x0050) UNKNOWN PROPERTY: SetProperty
		TBL_EWeaponAbilitySlotKey                                  CurrentAction;                                           // 0x0088(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N8Y9[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       Character;                                               // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInventory*                                          Inventory;                                               // 0x0098(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateSprint();
		void UpdateAction();
		bool StopAction(TBL_EWeaponAbilitySlotKey Action);
		bool StartAction(TBL_EWeaponAbilitySlotKey Action);
		bool RevokeSprint(class UObject* RequestedBy);
		void RevokeAllActionsFromObject(class UObject* RequestedBy);
		bool RevokeAction(TBL_EWeaponAbilitySlotKey Action, class UObject* RequestedBy, TBL_EInputPriority Priority);
		bool RequestSprint(class UObject* RequestedBy);
		bool RequestAction(TBL_EWeaponAbilitySlotKey Action, class UObject* RequestedBy, TBL_EInputPriority Priority);
		void OnPossess(class APawn* Pawn);
		void Initialize();
		TBL_EWeaponAbilitySlotKey GetWeaponAbilitySlotKey(const class FName& Name);
		void ClearSprint();
		void ClearActions();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AINavPoint
	 * Size -> 0x0038 (FullSize[0x02B8] - InheritedSize[0x0280])
	 */
	class AAINavPoint : public ANavigationObjectBase
	{
	public:
		TArray<class FName>                                        TagsToAddWhenActivated;                                  // 0x0280(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTagContainer                               AITagsToAddWhenActivated;                                // 0x0290(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TBL_EFaction                                               Faction;                                                 // 0x02B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsActive;                                               // 0x02B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CS02[0x6];                                   // 0x02B2(0x0006) MISSED OFFSET (PADDING)

	public:
		class UBillboardComponent* K2_GetGoodSprite();
		class UBillboardComponent* K2_GetBadSprite();
		void Deactivate();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerStart
	 * Size -> 0x0008 (FullSize[0x0290] - InheritedSize[0x0288])
	 */
	class ATBLPlayerStart : public APlayerStart
	{
	public:
		int                                                        PrioirtyLevel;                                           // 0x0288(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YV49[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool IsValidSpawnFor(class AController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AIPlayerStart
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class AAIPlayerStart : public ATBLPlayerStart
	{
	public:
		bool                                                       bCanSpawn;                                               // 0x0290(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FK8U[0x7];                                   // 0x0291(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AITagSystem
	 * Size -> 0x0250 (FullSize[0x0278] - InheritedSize[0x0028])
	 */
	class UAITagSystem : public UObject
	{
	public:
		TMap<class AActor*, struct FAITags>                        Tags;                                                    // 0x0028(0x0050) NativeAccessSpecifierPrivate
		TMap<struct FGameplayTag, struct FAIActorsByTag>           ActorsByTag;                                             // 0x0078(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              InventoryItemBehaviorSets[0x50];                         // 0x00C8(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              SiegeEngineBehaviorSets[0x50];                           // 0x0118(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              ActiveAgathaBehaviorSets[0x50];                          // 0x0168(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              ActiveMasonBehaviorSets[0x50];                           // 0x01B8(0x0050) UNKNOWN PROPERTY: SetProperty
		TMap<struct FGameplayTag, struct FTagBehaviorSetRow>       TagBehaviorSets;                                         // 0x0208(0x0050) NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     TagBehaviorTablePath;                                    // 0x0258(0x0018) Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable*                                          TagBehaviorTable;                                        // 0x0270(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnActorKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnActorDestroyed(class AActor* DestroyedActor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AltWeightsLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAltWeightsLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_UpdateSkinWeightsOverride(class USkinnedMeshComponent* InComp, const class FName& InBoneName, struct FAltWeightsState* InOutState);
		bool STATIC_SetSkinWeightsOverride(class USkinnedMeshComponent* InComp, const struct FAltWeightsState& InState);
		bool STATIC_InitSkinWeightsState(class USkinnedMeshComponent* InComp, struct FAltWeightsState* InState);
		void STATIC_InitPawnAltWeightsState(class ACharacter* Char);
		void STATIC_ClearAllSkinWeightsOverride(class USkinnedMeshComponent* InComp);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLActor
	 * Size -> 0x0098 (FullSize[0x02F0] - InheritedSize[0x0258])
	 */
	class ATBLActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_RH47[0x10];                                  // 0x0258(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicationPredictionState                         PredictionState;                                         // 0x0268(0x0070) NativeAccessSpecifierPublic
		float                                                      TimeToWakeUpNetDormancyWhenSubobjectChanges;             // 0x02D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X0VA[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        WakeUpTimerHandle;                                       // 0x02E0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_46UX[0x8];                                   // 0x02E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void WakeUpNetDormancyForSeconds(float Seconds);
		void FallBackToSleep();
		bool CanBeBaseForCharacterTBL(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AlwaysOnMusicManager
	 * Size -> 0x0078 (FullSize[0x0368] - InheritedSize[0x02F0])
	 */
	class AAlwaysOnMusicManager : public ATBLActor
	{
	public:
		class UAkComponent*                                        AkComponent;                                             // 0x02F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAlwaysOnMusicState                                    AlwaysOnMusicState;                                      // 0x02F8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WW5E[0x3];                                   // 0x02F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        SongIndex;                                               // 0x02FC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TBL_EAlwaysOnMusicState                                    PreviousAlwaysOnMusicState;                              // 0x0300(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsMusicPlaying;                                          // 0x0301(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8MQF[0x6];                                   // 0x0302(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       MasterMusicPlayEvent;                                    // 0x0308(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       MasterMusicStopEvent;                                    // 0x0310(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       Tier1Event;                                              // 0x0318(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       Tier2Event;                                              // 0x0320(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       Tier3Event;                                              // 0x0328(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       Tier4Event;                                              // 0x0330(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       EndStageTransitionEvent;                                 // 0x0338(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       ObjectiveCompleteEvent;                                  // 0x0340(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_442M[0x10];                                  // 0x0348(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int>                                                RecentSongs;                                             // 0x0358(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetCurrentMusicState(TBL_EAlwaysOnMusicState NewState);
		void OnRep_AlwaysOnMusicState();
		TBL_EAlwaysOnMusicState GetCurrentMusicState();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnalyticsUtilitiesLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAnalyticsUtilitiesLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_NotifySocialScreenOpened();
		void STATIC_AnalyticsEventOpenedMenuScreen(TBL_EAnalyticsMenuScreen Screen);
		void STATIC_AnalyticsEventDeveloperMessageClickedUrl(const class FString& AccountId, const class FString& URL);
		void STATIC_AnalyticsEventClosedMenuScreen(TBL_EAnalyticsMenuScreen Screen);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimatableImage
	 * Size -> 0x0180 (FullSize[0x0390] - InheritedSize[0x0210])
	 */
	class UAnimatableImage : public UImage
	{
	public:
		struct FSlateBrush                                         TransientBrush;                                          // 0x0210(0x0088) Transient, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnOverrideMaterialEvent;                                 // 0x0298(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                FloatAName;                                              // 0x02A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatA;                                                  // 0x02B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FloatBName;                                              // 0x02B4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatB;                                                  // 0x02BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FloatCName;                                              // 0x02C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatC;                                                  // 0x02C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FloatDName;                                              // 0x02CC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatD;                                                  // 0x02D4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FloatEName;                                              // 0x02D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatE;                                                  // 0x02E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FloatFName;                                              // 0x02E4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FloatF;                                                  // 0x02EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VectorAName;                                             // 0x02F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VectorA;                                                 // 0x02F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VectorBName;                                             // 0x0308(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VectorB;                                                 // 0x0310(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VectorCName;                                             // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VectorC;                                                 // 0x0328(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VectorDName;                                             // 0x0338(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VectorD;                                                 // 0x0340(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VectorEName;                                             // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VectorE;                                                 // 0x0358(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                VectorFName;                                             // 0x0368(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        VectorF;                                                 // 0x0370(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        TestStandaloneProperty;                                  // 0x0380(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetVectorF(const struct FLinearColor& InVectorF);
		void SetVectorE(const struct FLinearColor& InVectorE);
		void SetVectorD(const struct FLinearColor& InVectorD);
		void SetVectorC(const struct FLinearColor& InVectorC);
		void SetVectorB(const struct FLinearColor& InVectorA);
		void SetVectorA(const struct FLinearColor& InVectorA);
		void SetFloatF(float InFloatF);
		void SetFloatE(float InFloatE);
		void SetFloatD(float InFloatD);
		void SetFloatC(float InFloatC);
		void SetFloatB(float InFloatB);
		void SetFloatA(float InFloatA);
		class UMaterialInterface* OverrideMaterial__DelegateSignature();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimatingButton
	 * Size -> 0x06D8 (FullSize[0x07E0] - InheritedSize[0x0108])
	 */
	class UAnimatingButton : public UWidget
	{
	public:
		unsigned char                                              UnknownData_RNZU[0x98];                                  // 0x0108(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        ColorAndOpacity;                                         // 0x01A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                TextBlockText;                                           // 0x01B0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FTextBlockStyle                                     TextBlockStyle;                                          // 0x01C8(0x0270) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FMargin                                             TextBlockMargin;                                         // 0x0438(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		Slate_ETextJustify                                         TextBlockJustification;                                  // 0x0448(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZY0O[0x3];                                   // 0x0449(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      TextBlockTextDelegate;                                   // 0x044C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseEnterWidgetEvent;                                 // 0x045C(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseLeaveWidgetEvent;                                 // 0x046C(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseClickWidgetEvent;                                 // 0x047C(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseReleaseWidgetEvent;                               // 0x048C(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnMouseDoubleClickWidgetEvent;                           // 0x049C(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnOverrideMaterialEvent;                                 // 0x04AC(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IQ6F[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnClicked;                                               // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReleased;                                              // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHovered;                                               // 0x04E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnhovered;                                             // 0x04F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDoubleClick;                                           // 0x0500(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FTBLButtonAnimation>                         Animations;                                              // 0x0510(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoNotReverseHoveredStateUponMouseLeave;                 // 0x0520(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_07GL[0x7];                                   // 0x0521(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  Material;                                                // 0x0528(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic*                            MaterialMID;                                             // 0x0530(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2KT8[0x2A8];                                 // 0x0538(0x02A8) MISSED OFFSET (PADDING)

	public:
		void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
		void PlayNormalAnimation();
		class UMaterialInstanceDynamic* GetDynamicMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameState
	 * Size -> 0x0690 (FullSize[0x0958] - InheritedSize[0x02C8])
	 */
	class ATBLGameState : public AGameState
	{
	public:
		unsigned char                                              UnknownData_VLPB[0x10];                                  // 0x02C8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ATBLTeam*>                                    Teams;                                                   // 0x02D8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLTeam*                                            FFATeam;                                                 // 0x02E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              NeutralTeamClass;                                        // 0x02F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                MapName;                                                 // 0x02F8(0x0018) BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic
		TBL_EGameModeType                                          GamemodeType;                                            // 0x0310(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9S47[0x7];                                   // 0x0311(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                GameModeName;                                            // 0x0318(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                ServerName;                                              // 0x0330(0x0018) BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic
		class FString                                              Platform;                                                // 0x0348(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               Victor;                                                  // 0x0358(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NC73[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLPlayerState*                                     PlayerVictor;                                            // 0x0360(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FinalMatchDuration;                                      // 0x0368(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TA16[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              NextMapName;                                             // 0x0370(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchStarted;                                          // 0x0380(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchEnded;                                            // 0x0390(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchWonBy;                                            // 0x03A0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9QR1[0x18];                                  // 0x03B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerKilled;                                          // 0x03C8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateAdded;                                      // 0x03D8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateRemoved;                                    // 0x03E8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateUniqueIdReplicated;                         // 0x03F8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateKillsUpdated;                               // 0x0408(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCharacterSpawned;                                      // 0x0418(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEpicEndGameEvent;                                      // 0x0428(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		struct FEpicEndGameState                                   EpicEndGameState;                                        // 0x0438(0x0001) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G6SC[0x3];                                   // 0x0439(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StageEndTime;                                            // 0x043C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StageStartTime;                                          // 0x0440(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X3QN[0x4];                                   // 0x0444(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FStageActorProgress>                         StageProgressList;                                       // 0x0448(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ServerTimeDifference;                                    // 0x0458(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisablePlayerNamePlates;                                // 0x045C(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyShowNamesOnTeammates;                               // 0x045D(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsGameModeFFA;                                          // 0x045E(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableTeamSelect;                                      // 0x045F(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHideHudImportantMessages;                               // 0x0460(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7771[0x3];                                   // 0x0461(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinRespawnTime;                                          // 0x0464(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PlayersNeededToStartEarly;                               // 0x0468(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MinPlayersToStart;                                       // 0x046C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              GameplayEventMessageClass[0x28];                         // 0x0470(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              bClientSideWeaponTracers : 1;                            // 0x0498(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bBadNetworkPerformance : 1;                              // 0x0498(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bBadFrameTimePerformance : 1;                            // 0x0498(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bServerBadFrameTime;                                     // 0x0499(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VSDL[0x2];                                   // 0x049A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        ProgressBarPrimaryTeamIndex;                             // 0x049C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FClassLimitStruct>                           ClassLimits;                                             // 0x04A0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          GameScoringDataTable;                                    // 0x04B0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          TeamScoreFormatDataTable;                                // 0x04B8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          NoveltyScoreDataTable;                                   // 0x04C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRespawnStinger                                     FirstSpawnSound;                                         // 0x04C8(0x0010) Net, NoDestructor, NativeAccessSpecifierPublic
		struct FRespawnStinger                                     RespawnSound;                                            // 0x04D8(0x0010) Net, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FObjectivePointEntry>                        ObjectivePointArray;                                     // 0x04E8(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTeamScoreEvent                                     MostRecentTeamScoreEvent;                                // 0x04F8(0x0040) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       bUsingNewSpawnSystem;                                    // 0x0538(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECinematicGameState                                    CinematicState;                                          // 0x0539(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EIV8[0x6];                                   // 0x053A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCinematicGameStateChanged;                             // 0x0540(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class ALevelSequenceActor*                                 AgathaCinematicSequence;                                 // 0x0550(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ALevelSequenceActor*                                 MasonCinematicSequence;                                  // 0x0558(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FReplSequenceBinding>                        ReplicatedSequenceBindings;                              // 0x0560(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5U5E[0xA0];                                  // 0x0570(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ServerCinematicStartTime;                                // 0x0610(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PZVI[0x4];                                   // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMatchStateChanged;                                     // 0x0618(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<struct FGameModeMessage>                            StagePersistentGameModeMessages;                         // 0x0628(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAKAudioStartStopStruct                             StageEndingMusic;                                        // 0x0638(0x0010) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		struct FObjectiveContextMessage                            ContextObjectiveMessage;                                 // 0x0648(0x0050) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNewObjectiveContextMessage;                            // 0x0698(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UVotingManagerComponent*                             VotingManagerComponent;                                  // 0x06A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableSpawningBots;                                    // 0x06B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VMY8[0x7];                                   // 0x06B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LobbyId;                                                 // 0x06B8(0x0010) Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPostMatchEndTimeChanged;                               // 0x06C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FString                                              PS5MatchId;                                              // 0x06D8(0x0010) Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPS5MatchIdUpdated;                                     // 0x06E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FUniqueNetIdRepl                                    PS5MatchResponsiblePlayer;                               // 0x06F8(0x0028) Net, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TH3T[0x10];                                  // 0x0720(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WarmupEndTime;                                           // 0x0730(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PreparingMatchEndTime;                                   // 0x0734(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PostMatchEndTime;                                        // 0x0738(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PostMatchMatchmakingStartTimeServer;                     // 0x073C(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LJ0D[0xA4];                                  // 0x0740(0x00A4) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bWasNotifiedAboutWaitingToStart;                         // 0x07E4(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bDelayGarbageCollection;                                 // 0x07E5(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0DV9[0x22];                                  // 0x07E6(0x0022) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AOutOfCombatZoneAuthority*>                   ZoneAuthorities;                                         // 0x0808(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, class AInventoryItem*>                   TornOffItems;                                            // 0x0818(0x0050) NativeAccessSpecifierPrivate
		TMap<class FName, struct FServerTornOffItem>               ServerTornOffItems;                                      // 0x0868(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VTYO[0x50];                                  // 0x08B8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, struct FPlayerStateArray>              CurrentPlayersInParties;                                 // 0x0908(0x0050) Transient, NativeAccessSpecifierPrivate

	public:
		bool ShouldShowLoadoutOnPreparingMatch();
		bool ShouldShowLoadoutOnFirstDeath();
		void SetStageTimeRemaining(float TimeInSeconds);
		void SetStageEndingMusic(const struct FAKAudioStartStopStruct& Music);
		void SetObjectiveContextText(const struct FObjectiveContextMessage& ContextObjectiveMessage);
		void SetGameModeType(TBL_EGameModeType InGameModeType);
		void SetCinematicMode(TBL_ECinematicGameState State, class ALevelSequenceActor* AgathaSequence, class ALevelSequenceActor* MasonSequence);
		void ResetStagePersistentGameModeMessages();
		void RemoteStageEndingMusic();
		void PlayerKilled(class AController* Killer, class AController* Killed, class UDamageSource* DamageSource, const struct FDeathEvent& DeathEvent, const struct FDeathDamageTakenEvent& DamageEvent);
		void PlayCinematicsWithBinding(class ALevelSequenceActor* AgathaSequence, class ALevelSequenceActor* MasonSequence, TMap<class ASpawner*, class FString> InSpawnerPrefixes);
		void OnRep_Victor();
		void OnRep_StageEndingMusic();
		void OnRep_SequenceBindings();
		void OnRep_PS5MatchResponsiblePlayer();
		void OnRep_PS5MatchId();
		void OnRep_PostMatchEndTime();
		void OnRep_GameModeType();
		void OnRep_FactionContextObjectiveMessage();
		void OnRep_ClassLimits();
		void OnRep_CinematicState();
		void NotifyCinematicStartedPlayingTryBinding();
		bool IsWaitingForMinPlayersToStart();
		bool IsWaitingForAdminToStart();
		bool IsServerBadFrameTime();
		bool IsPostMatch();
		bool IsMatchWaitingToStart();
		bool IsCurrentStage(class AActor* Stage);
		float GetWarmupTimeRemaining();
		class ATBLTeam* GetTeamWithFaction(TBL_EFaction Faction);
		int GetSubClassMaxCount(class UObject* WorldContextObject, class UClass* CharacterClass, TBL_EFaction Faction);
		int GetSubClassCount(class UClass* CharacterClass);
		float GetStageTimeRemaining();
		TArray<TBL_EFaction> GetSpawnableTeams(class ATBLPlayerState* LocalPlayerState);
		TArray<class UClass*> GetSpawnableClasses(class ATBLPlayerState* LocalPlayer, TBL_EFaction Faction);
		float GetServerTimeDifference();
		float GetPreparingMatchTimeRemaining();
		float GetPostMatchTimeRemaining();
		int GetNumObjectivePointsByCategory(TBL_EFaction Faction, TBL_EObjectivePointCategory Category);
		float GetLocalPostMatchMatchmakingStartTime();
		void GetGameModeWidgetClass();
		float GetGameModeEpilogueDuration();
		void GetCurrentStage();
		float GetCinematicPlaybackTime();
		int GetArchetypeMaxCount(class UObject* WorldContextObject, class UClass* CharacterClass, TBL_EFaction Faction);
		int GetArchetypeCount(class UClass* CharacterClass);
		float ConvertServerTimeToLocalTime(float ServerTime);
		int CalculateEndOfMatchCommodity(class ATBLPlayerController* Player, const class FString& Key);
		void BroadcastSetEpicEndGameState(const struct FEpicEndGameState& InEpicEndGameState);
		void BroadcastPlayerKilled(const struct FDeathEvent& DeathEvent);
		void BroadcastLastTeamScoreEvent(const struct FTeamScoreEvent& TeamScoreEvent);
		void BroadcastDestroyTornOffItem(const class FName& TornOffName);
		void AddStagePersistentGameModeMessages(TArray<struct FGameModeMessage> NewMessages);
		void AddObjectivePointEvent(TBL_EFaction Faction, int PointValue, TBL_EObjectivePointCategory Category);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ArenaGameState
	 * Size -> 0x0118 (FullSize[0x0A70] - InheritedSize[0x0958])
	 */
	class AArenaGameState : public ATBLGameState
	{
	public:
		int                                                        RoundsSetting;                                           // 0x0958(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        TeamLivesSetting;                                        // 0x095C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        FinalLivesSetting;                                       // 0x0960(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeBetweenRoundsSetting;                                // 0x0964(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RoundTimeLimitSetting;                                   // 0x0968(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxPlayersSetting;                                       // 0x096C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplVictoryPodium                                  ReplicatedVictoryPodium;                                 // 0x0970(0x0010) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FReplSequenceBinding>                        ReplicatedVictoryPodiumBindings;                         // 0x0980(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FReplPodiumCharacterInfo>                    ReplicatedPodiumVictorInfos;                             // 0x0990(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoundVictoriesChanged;                                 // 0x09A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemainingLivesChanged;                                 // 0x09B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNumLivingPlayersChanged;                               // 0x09C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAgathaPlayersAtStartOfRoundChanged;                    // 0x09D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMasonPlayersAtStartOfRoundChanged;                     // 0x09E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRoundWon;                                              // 0x09F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      PreCountdownEndTime;                                     // 0x0A00(0x0004) Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HMYE[0x4];                                   // 0x0A04(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int>                                                RoundVictories;                                          // 0x0A08(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<int>                                                RemainingLives;                                          // 0x0A18(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<int>                                                LivingPlayers;                                           // 0x0A28(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AArenaPlayerState*>                           AgathaPlayersAtStartOfRound;                             // 0x0A38(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AArenaPlayerState*>                           MasonPlayersAtStartOfRound;                              // 0x0A48(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OVNY[0x8];                                   // 0x0A58(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ACineCameraActor*                                    PodiumCinematicCamera;                                   // 0x0A60(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_684X[0x8];                                   // 0x0A68(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetRemainingLives(TBL_EFaction Faction, int InRemainingLives);
		void OnRep_VictoryPodiumBindings();
		void OnRep_VictoryPodium();
		void OnRep_RoundVictories();
		void OnRep_RemainingLives();
		void OnRep_MasonPlayersAtStartOfRound();
		void OnRep_LivingPlayers();
		void OnRep_AgathaPlayersAtStartOfRound();
		bool IsMatchPointForFaction(TBL_EFaction Faction);
		int GetRoundVictories(TBL_EFaction Faction);
		int GetRemainingLives(TBL_EFaction Faction);
		float GetPreCountdownTimeRemaining();
		TArray<class AArenaPlayerState*> GetPlayersAtStartOfRound(TBL_EFaction Faction);
		int GetNumberOfLivingPlayers(TBL_EFaction Faction);
		TBL_EFaction GetMatchPointFaction();
		void ClientPlayPodiumSequence();
		void BroadcastRoundWonBy(TBL_EFaction Winners);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerController
	 * Size -> 0x0C88 (FullSize[0x1238] - InheritedSize[0x05B0])
	 */
	class ATBLPlayerController : public APlayerController
	{
	public:
		unsigned char                                              UnknownData_RJFG[0x10];                                  // 0x05B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGameplayTasksComponent*                             GameplayTasksComponent;                                  // 0x05C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateReplicated;                                 // 0x05C8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bPlayingPrologue;                                        // 0x05D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KLAX[0xF];                                   // 0x05D9(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPossessedPawn;                                         // 0x05E8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClientPossessedPawn;                                   // 0x05F8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             NextSpawnWaveReplicated;                                 // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FLoadout                                            NextSpawnLoadout;                                        // 0x0618(0x0038) NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bShuffleLoadout;                                         // 0x0650(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStartedForceRespawn;                                    // 0x0651(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_52BL[0x6];                                   // 0x0652(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCausedDamage;                                          // 0x0658(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTakenDamage;                                           // 0x0668(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlockedAttack;                                         // 0x0678(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCounteredAttack;                                       // 0x0688(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlockDamageTaken;                                      // 0x0698(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TeamDamage30SecThreshold;                                // 0x06A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TeamDamage2MinThreshold;                                 // 0x06AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BotTeamDamageScale;                                      // 0x06B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int8_t                                                     TeamDamageWarningLevel;                                  // 0x06B4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FI8S[0x13];                                  // 0x06B5(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnServerApprovedLoadout;                                 // 0x06C8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSavedClassUnavailable;                                 // 0x06D8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProcessPlayerInput;                                    // 0x06E8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnZoomEnabled;                                           // 0x06F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnZoomDisabled;                                          // 0x0708(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceivedLocalMessage;                                  // 0x0718(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPurchaseCompleted;                                     // 0x0728(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M5EL[0x18];                                  // 0x0738(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnAcknowledgedTeamRequest;                               // 0x0750(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              DefaultClassChoice[0x28];                                // 0x0760(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              SavedClassChoice[0x28];                                  // 0x0788(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TArray<struct FSavedSubclass>                              SavedSubclassChoice;                                     // 0x07B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSavedLoadout>                               LoadoutPerClass;                                         // 0x07C0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReceivedInitialLoadouts;                                // 0x07D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JTJF[0x7];                                   // 0x07D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPrimaryAssetId>                             UncheckedLevelUpItems;                                   // 0x07D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsShufflingLoadout;                                     // 0x07E8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoSprint;                                             // 0x07E9(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAltAttackWithMovement;                                  // 0x07EA(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAccessAllItems;                                         // 0x07EB(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowPlayerListOnStartupInOverview;                      // 0x07EC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasAcceptedNDA;                                   // 0x07ED(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasPlayedTutorial;                                // 0x07EE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasAcceptedPurchaseDisclaimer;                    // 0x07EF(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerOpenedTutorial;                                   // 0x07F0(0x0001) BlueprintVisible, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_04QP[0x7];                                   // 0x07F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LoginTime;                                               // 0x07F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastPingTime;                                            // 0x0800(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FQQL[0x4];                                   // 0x0804(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             GameModeMessageReceived;                                 // 0x0808(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             AutoBalanceNotificationReceived;                         // 0x0818(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleCamera;                                          // 0x0828(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleControlMap;                                      // 0x0838(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeathRecapReplicated;                                  // 0x0848(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TimeSinceRotationInputWasNonZero;                        // 0x0858(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YDZ0[0x4];                                   // 0x085C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerControllerPostProcessInput;                      // 0x0860(0x0010) ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLookInputUpdated;                                      // 0x0870(0x0010) ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLookRateInputUpdated;                                  // 0x0880(0x0010) ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic
		bool                                                       bShowMyParryBox;                                         // 0x0890(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowOtherParryBoxes;                                    // 0x0891(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DZR5[0x6];                                   // 0x0892(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCameraTargetParams                                 DeathCameraTargetParams;                                 // 0x0898(0x0010) NoDestructor, NativeAccessSpecifierPublic
		class AInventoryItem*                                      DecapHead;                                               // 0x08A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsSpeaking;                                             // 0x08B0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YHKN[0x7];                                   // 0x08B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     SelfCameraInputComponent;                                // 0x08B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerIsWaitingToEnterSpectatorMode;                    // 0x08C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerSelectedSpectatorMode;                            // 0x08C1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFirstTimeSpectating;                                    // 0x08C2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PZL9[0x5];                                   // 0x08C3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlayerSelectedSpectatorMode;                           // 0x08C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsLoadoutScreenOpen;                                    // 0x08D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHeadlessClient;                                       // 0x08D9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5HTB[0x6];                                   // 0x08DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputReplayComponent*                               InputReplayComponent;                                    // 0x08E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnteredLeftLoadoutVolume;                              // 0x08E8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      SavedFov;                                                // 0x08F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastVFov;                                                // 0x08FC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsTravelling;                                           // 0x0900(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIdleWarned;                                             // 0x0901(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTBSDevMode;                                             // 0x0902(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R48E[0x5];                                   // 0x0903(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnVotingStarted;                                         // 0x0908(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      DisplayDebugScrollY;                                     // 0x0918(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GQJV[0x4];                                   // 0x091C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             RequestedToJoinSpawnWave;                                // 0x0920(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceivedSpawnWaveJoinResponse;                         // 0x0930(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              bAutomaticallyChooseSpawnWave : 1;                       // 0x0940(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LAOY[0x7];                                   // 0x0941(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             AutomaticallyChooseSpawnWaveReplicated;                  // 0x0948(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       LastPossessedCharacter;                                  // 0x0958(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCheatsEnabled : 1;                                      // 0x0960(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9ZH8[0x7];                                   // 0x0961(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASpawner*                                            NextSpawner;                                             // 0x0968(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASpawner*                                            ClientSpawnerStartAllowingControl_PendingSpawner;        // 0x0970(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGoingToSpawnAtSpawner;                                 // 0x0978(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ASpawner*                                            CurrentPendingSpawner;                                   // 0x0988(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceivedPendingSpawn;                                  // 0x0990(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UCinematicsComponent*                                CinematicsComponent;                                     // 0x09A0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PS5BlockingHaptic[0x28];                                 // 0x09A8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PS5PlayerDamageTakenHaptic[0x28];                        // 0x09D0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PS5PlayerRangedWeaponHaptic[0x28];                       // 0x09F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PS5PlayerGeneralHaptic[0x28];                            // 0x0A20(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PS5PlayerSiegeEngineHaptic[0x28];                        // 0x0A48(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FScriptMulticastDelegate                             OnGameViewportLostFocus;                                 // 0x0A70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGameViewportReceivedFocus;                             // 0x0A80(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FSoundSwitchEntry>                           HighPriorityAKSwitches;                                  // 0x0A90(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoundSwitchEntry>                           PlayerExertionAKSwitches;                                // 0x0AA0(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoundSwitchEntry>                           LowPriorityAKSwitches;                                   // 0x0AB0(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FSoundSwitchEntry>                           WeaponAkSwitches;                                        // 0x0AC0(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      WeaponNameStrings;                                       // 0x0AD0(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      ArmourTypeStrings;                                       // 0x0AE0(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      WeaponActionNameStrings;                                 // 0x0AF0(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      CombatStateStrings;                                      // 0x0B00(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       CharacterSoundDummy;                                     // 0x0B10(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      WeaponSoundDummy;                                        // 0x0B18(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerEnteredOutOfCombatArea;                     // 0x0B20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerExitedOutOfCombatArea;                      // 0x0B30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveZonesVisiblityChanged;                        // 0x0B40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FPrimaryAssetType                                   VOBankAssetType;                                         // 0x0B50(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGotKeybindingKey;                                      // 0x0B58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJoinableSpawnWavesUpdated;                             // 0x0B68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ASpawnWave*                                          NextSpawnWave;                                           // 0x0B78(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinimumSpawnDelayOverride;                               // 0x0B80(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableHUDPostProcess;                                  // 0x0B84(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BJMS[0x3];                                   // 0x0B85(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPromptPlayerMessageRequest;                            // 0x0B88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClearPlayerMessageRequest;                             // 0x0B98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPromptPlayerMessageReply;                              // 0x0BA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FDebugReliableRPC>                           DebugReliableRPC;                                        // 0x0BB8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       WaitingForSpawnGoreHead;                                 // 0x0BC8(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerUsedItem;                                        // 0x0BD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerRevived;                                         // 0x0BE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerCausedFallDamage;                                // 0x0BF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRevivedOtherPlayer;                                    // 0x0C00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsPostMatchMatchmaking;                                 // 0x0C10(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsReadyToPostMatchMatchmakingTravel;                    // 0x0C11(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5XYF[0x6];                                   // 0x0C12(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PostMatchMatchmakingConnectString;                       // 0x0C18(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReceivedGlobalGameNotification;                        // 0x0C28(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealingAppliedToCharacter;                             // 0x0C38(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UItemPreVisualizationInterfaceHelper*                ItemPreVisualizationHelper;                              // 0x0C48(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            LastClientSetRotation;                                   // 0x0C50(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FDebugProjectileHit                                 DebugProjectileHit;                                      // 0x0C5C(0x0038) NoDestructor, NativeAccessSpecifierPublic
		struct FDebugProjectileHit                                 DebugFakeProjectileHit;                                  // 0x0C94(0x0038) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XYQZ[0x4];                                   // 0x0CCC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCustomizationsLoaded;                                  // 0x0CD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProfileDataLoaded;                                     // 0x0CE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2QBI[0x8];                                   // 0x0CF0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSpectatorPawnDestroyed;                                // 0x0CF8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PIJI[0x8];                                   // 0x0D08(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDisplaySwingThroughInfo;                                // 0x0D10(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugTracers;                                       // 0x0D11(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawClientDebugTracers;                                 // 0x0D12(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugTracerCache;                                   // 0x0D13(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugTracerDirection;                               // 0x0D14(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugWeaponTip;                                     // 0x0D15(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugParryHit;                                      // 0x0D16(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugTracersClear;                                  // 0x0D17(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugMeleeHit;                                      // 0x0D18(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugVisibilityCheck;                               // 0x0D19(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugFacingCheck;                                   // 0x0D1A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugBackSwingCheck;                                // 0x0D1B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugCamera;                                        // 0x0D1C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugProjectile;                                    // 0x0D1D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugShield;                                        // 0x0D1E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugHorseImpact;                                   // 0x0D1F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDrawDebugRangedInaccuracy;                              // 0x0D20(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J382[0x3];                                   // 0x0D21(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                DrawDebugSocketName;                                     // 0x0D24(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bDrawDebugSpectatorCamera : 1;                           // 0x0D2C(0x0001) BIT_FIELD Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5DRN[0x3];                                   // 0x0D2D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDebugSpectatorCamera>                       DebugSpectatorCamera;                                    // 0x0D30(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDebugIgnoreAI;                                          // 0x0D40(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZTLI[0x7];                                   // 0x0D41(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMatchSessionComplete                               MatchSessionComplete;                                    // 0x0D48(0x00A0) Transient, Protected, NativeAccessSpecifierProtected
		int                                                        NextSpawnTeam;                                           // 0x0DE8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSelfCameraProperties                               SelfCamera;                                              // 0x0DEC(0x0028) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GO5E[0x4];                                   // 0x0E14(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAkComponent*>                                DebugAkComponents;                                       // 0x0E18(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpamCheckPeriod;                                         // 0x0E28(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SpamCheckPeriodMaxMessages;                              // 0x0E2C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpamMuteDurationMin;                                     // 0x0E30(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpamMuteDurationIncreasePerMute;                         // 0x0E34(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpamMuteDurationMax;                                     // 0x0E38(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpamMutedTime;                                           // 0x0E3C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SpamMutedDuration;                                       // 0x0E40(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TNM7[0x4];                                   // 0x0E44(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              SpamCheckPreviousMessages;                               // 0x0E48(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SpamCheckIndex;                                          // 0x0E58(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GX1H[0x4];                                   // 0x0E5C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       CustomizationCharacter;                                  // 0x0E60(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ThirdPersonFOVCap;                                       // 0x0E68(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastInputTime;                                           // 0x0E6C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            LastControlRotation;                                     // 0x0E70(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V6R0[0x4];                                   // 0x0E7C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               LastReplicatedPawn;                                      // 0x0E80(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CinematicSpectatorCameraClass;                           // 0x0E88(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        DisplayDebugScrollDir;                                   // 0x0E90(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeOfLastDeath;                                         // 0x0E94(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FScriptMulticastDelegate                             AllowedCharactersChanged;                                // 0x0E98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      PreviousAllowedCharacterClasses;                         // 0x0EA8(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              PossesedActor;                                           // 0x0EB8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRotator                                            ControlRotationBeforePossession;                         // 0x0EC0(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       bPossessionInitialized;                                  // 0x0ECC(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5UUU[0x3];                                   // 0x0ECD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        AkComponent;                                             // 0x0ED0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z9EE[0x80];                                  // 0x0ED8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          DefaultWeaponIdsDataTable;                               // 0x0F58(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OFYE[0x58];                                  // 0x0F60(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAkComponent*>                                ThisWorldListeners;                                      // 0x0FB8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DisableAimedAtSoundEvent;                                // 0x0FC8(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxDistanceToHearSound;                                  // 0x0FCC(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         LongBowAimCurve;                                         // 0x0FD0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YLP6[0x80];                                  // 0x0FD8(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       TargetCharacter;                                         // 0x1058(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0XRD[0x8];                                   // 0x1060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCustomizationMap>                           PlayerSavedCustomization;                                // 0x1068(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FString>                                      ViewedGameUpdateVersions;                                // 0x1078(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDefaultWeaponCustomization*                         DefaultWeaponsCustomizationsAg;                          // 0x1088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDefaultWeaponCustomization*                         DefaultWeaponsCustomizationsMa;                          // 0x1090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CUGO[0x10];                                  // 0x1098(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              AimAssistTarget;                                         // 0x10A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AimAssistPreviousTargetBias;                             // 0x10B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LY1V[0xA5];                                  // 0x10B4(0x00A5) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPlayerCustomizationReceived;                            // 0x1159(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M70V[0x6];                                   // 0x115A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, int>                                   OnlineInventoryCommodities;                              // 0x1160(0x0050) NativeAccessSpecifierPrivate
		TMap<class FString, int>                                   CommoditiesEarnedInMatch;                                // 0x11B0(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8M10[0x10];                                  // 0x1200(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCloudViewedItems*                                   CloudViewedItems;                                        // 0x1210(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFlavorStats*                                        FlavorStatsPC;                                           // 0x1218(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCloudMutedPlayers*                                  CloudMutedPlayers;                                       // 0x1220(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_59R7[0x10];                                  // 0x1228(0x0010) MISSED OFFSET (PADDING)

	public:
		void VoteStarted(class UVotingInstance* VotingInstance);
		void VOIPSetRemoteVolumeExec(float Volume);
		void VOIPMuteLocalExec(bool Mute);
		TArray<class FString> VOIPGetTalkingNames();
		TArray<class FString> VOIPGetTalkingIds();
		void VOIPGetTalkingExec();
		void VerifyCustomizationOnlineOwnership(bool bOnOnlineStatsLoaded);
		void UpdateVoiceStateForAllPlayers();
		void UpdateUncheckedItems();
		void UpdateSelfCamera();
		void UnPrepareAllVOEVents();
		void UnloadBank(const class FString& BankName);
		void ToggleIgnoreAI();
		void ToggleHud();
		void ToggleGhostCameraMode();
		void ToggleGhost();
		void ToggleFriendlyMarkers();
		void ToggleCameraKeyReleased();
		void ToggleCameraKeyPressed();
		void ToggleCamera();
		void ToggleAutospawn(bool bEnabled, bool bLeaveCurrentWave);
		void TestBadTravel();
		void TeleportToMe();
		void TeamSay(class FString* Msg);
		void TeamAppliedToPlayer(class ATBLTeam* Team);
		void TBLClientSetControlRotation(const struct FRotator& ClientRotation);
		void SyntheticInput_Movement(bool bEnable);
		void SyntheticInput_AI(bool bEnable);
		void SyntheticInput_Actions(bool bEnable);
		void SwitchToSpectator();
		void SwitchToSelfCamera();
		void SwitchTeam(int RequestedTeamIndex);
		void SwitchClass(int RequestedClassIndex, int RequestedSubclassIndex);
		void Suicide();
		void StopSoundAllSounds(class UAkAudioEvent* Sound);
		void StopCameraShake(const class FName& CameraShakeName);
		void StopAnalytics();
		void StartTeamSayChat();
		void StartRangedWeaponWarning(float DrawStrength, class AInventoryItem* DrawnWeapon, const class FName& AttackName);
		void StartLastChannelChat();
		void StartAllSayChat();
		void SpawnWaveNoLongerJoinable(class ASpawnWave* Wave);
		class UMovementDebugger* SpawnMovementDebugger();
		void ShuffleLoadout(bool bShouldShuffle);
		void ShowOtherParryBoxes();
		void ShowMyParryBox();
		void ShowMessageDialog(const class FText& Message);
		void ShowIngameMenu();
		bool ShouldDrawVisibilityCheck();
		bool ShouldDrawFacingCheck();
		bool ShouldDrawDebugWeaponTip();
		bool ShouldDrawDebugTracers();
		bool ShouldDrawDebugTracerDirection();
		bool ShouldDrawDebugTracerCache();
		bool ShouldDrawDebugShield();
		bool ShouldDrawDebugRangedInaccuracy();
		bool ShouldDrawDebugProjectile();
		bool ShouldDrawDebugParryHit();
		bool ShouldDrawDebugMeleeHit();
		bool ShouldDrawDebugHorseImpact();
		bool ShouldDrawClientDebugTracers();
		bool ShouldDrawCamera();
		bool ShouldDrawBackSwingCheck();
		bool ShouldDisplaySwingThroughInfo();
		bool ShouldDisplayNDA();
		bool ShouldClearDebugTracers();
		void SetupCameraTargetOnDeath(class APawn* P, const class FName& AttachSocketName);
		void SetStatOriginal(const class FString& StatType, int StatValue);
		void SetStatFloat(const class FString& StatName, float StatValue);
		void SetStat(const class FString& StatName, int StatValue);
		void SetSpectatorCamera();
		void SetShowPlayerListOnStartupInOverview(bool bShow);
		void SetRegionPingExec(const class FString& Region, int Ping);
		void SetRandomLoadout(struct FLoadout* Loadout);
		void SetPlayingPrologue(bool bInPlayingPrologue);
		void SetPlayerHasPlayedTutorial();
		void SetPlayerHasAcceptedPurchaseDisclaimer();
		void SetPlayerHasAcceptedNDA();
		void SetNewCustomizationForPawn(TArray<struct FSwatchSelection> Swatches, class APawn* Char, TBL_EFaction Faction);
		void SetNewCustomizationForCurrentPawn(TArray<struct FSwatchSelection> Swatches);
		void SetMinimumSpawnDelayOverride(float InMinimumSpawnDelayOverride);
		void SetLoadout(class UClass* RequestedSubclass, const struct FLoadout& RequestedLoadout);
		void SetListenerEnabled(bool Enabled);
		void SetHudVisibility(bool bVisible);
		void SetCameraShakeProperty(const class FName& CameraShakeName, const class FName& PropertyName, const class FString& Value);
		void SetCameraRotation(float Pitch, float Yaw, float Roll);
		void SetCameraProperty(const class FName& PropertyName, const class FString& Value);
		void SetCameraOffset(float X, float Y, float Z);
		void SetAutoSprint(bool bEnable);
		void SetAltAttackWithMovement(bool bEnable);
		void SetAllRegionPingExec(int Ping);
		void SetAimedAtSoundEnabled(bool Enable);
		void SetAimedAtMaxDistance(float Distance);
		void ServerUpdateAimedAtCharacters(TArray<TWeakObjectPtr<class ATBLCharacter>> Characters);
		void ServerToggleAutospawn(bool bEnabled, bool bLeaveCurrentWave);
		void ServerTeleportPawnsToMe(class ATBLCharacter* pTargetCharacter);
		void ServerTBSActivateDevMode(bool bActivate);
		void ServerSwitchToSpectator();
		void ServerSuicide();
		void ServerSubmitVote(class UVotingInstance* VotingInstance, const class FName& Vote);
		void ServerSubmitPlayerPostGameFeedback(int StarRating);
		void ServerStopAnalytics();
		void ServerSpawnGoreHead(class ATBLPlayerState* InPlayerState, unsigned char DeadCharacterId, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& Rotation, const struct FVector_NetQuantize& Impulse);
		void ServerShowDebugCapture(bool bActive, const class FName& Category);
		void ServerSetSyntheticInputMovement(bool bEnable);
		void ServerSetSyntheticInputAI(bool bEnable);
		void ServerSetSyntheticInputActions(bool bEnable);
		void ServerSetSpectatorCamera();
		void ServerSetPS5MatchId(const class FString& NewPS5MatchId);
		void ServerSetPlayerCustomization(TArray<struct FCustomizationMap> PlayerCustomization, class ATBLPlayerState* PS);
		void ServerSetPlatformUniqueId(const struct FUniqueNetIdRepl& UniqueIdRepl);
		void ServerSetPartyId(const class FString& PartyId);
		void ServerSetLoadout(class UClass* RequestedSubclass, const struct FLoadout& RequestedLoadout);
		void ServerSetInitialLoadouts(TArray<struct FSavedLoadout> Loadouts);
		void ServerSetHardwarePlatform(TBL_EHardwarePlatform Platform);
		void ServerSetForFFAPlayer();
		void ServerSetAimAssistTarget(class AActor* NewAimAssistTarget, int NewAimAssistTargetBoneIndex);
		void ServerSetAimAssistCorrectionParams(int NewAimAssistCorrectionMaxPredictionOffset, int NewAimAssistCorrectionMaxAngle, int NewAimAssistCorrectionMaxOffset);
		void ServerSendPostMatchInfo(const struct FClientPostMatchInfo& PostMatchInfo, TArray<struct FPerMinuteBucket> PerMinuteBuckets);
		void ServerSendOfflineAnalyticsEvent(const struct FOfflineAnalyticsEvent& LocalAnalyticsEvent);
		void ServerSendMatchProfile(const class FString& Nickname, const class FString& MachineId, const class FString& MachineName, const class FString& OperatingSystemId, const class FString& CommandLine, const struct FTBLQualityLevels& ScalabilitySettings);
		void ServerSendEquippedPersonality(TBL_EAudioPersonalityType PersonalityType);
		void ServerSay(class FString* Msg);
		void ServerResetPartyId();
		void ServerResetIdleTime();
		void ServerRequestNextSpawnTeam(TBL_EFaction RequestedFaction, bool bImmediatelySwitch);
		void ServerRequestExit();
		void ServerRequestAnalyticsStop();
		void ServerRequestAnalyticsStart(const class FString& DataName);
		void ServerReportPlayer(class APlayerState* ReportedPlayer, TBL_EPlayerReportCategory ReportCategory, const class FString& ReportDescription);
		void ServerReliableSetPlayingPrologue(bool bInPlayingPrologue);
		void ServerRegisterAsHeadlessClient();
		void ServerPropertyDebugger();
		void ServerPromptPlayerMessageReply(int MessageId, bool Response);
		void ServerOverrideSwatchIndex(TBL_EInventorySlot Slot, int SwatchOverrideIndex);
		void ServerOnLoadoutScreenState(bool DidOpen);
		void ServerNotifyDoneTravelling();
		void ServerMovementDebuggerLoadFile(const class FName& Filename);
		void ServerMovementDebugger();
		void ServerLeaveSpawnWave(class ASpawnWave* Wave);
		void ServerJoinSpawnWave(class ASpawnWave* Wave, bool bFromAutoSpawn);
		void ServerForgivePlayer(class ATBLPlayerState* Killer);
		void ServerForceSelfAutobalance();
		void ServerForceImmediateSpawn();
		void ServerDrawWeaponTip(bool bEnable);
		void ServerDrawVisibilityCheck(bool bEnable);
		void ServerDrawTracers(bool bEnable);
		void ServerDrawTracerDirection(bool bEnable);
		void ServerDrawSpectatorCamera(bool bEnable);
		void ServerDrawShield(bool bEnable);
		void ServerDrawProjectile(bool bEnable);
		void ServerDrawParryHit(bool bEnable);
		void ServerDrawHorseImpact(bool bEnable);
		void ServerDrawFacingCheck(bool bEnable);
		void ServerDrawBackSwingCheck(bool bEnable);
		void ServerDrawAllTracers(bool bEnable);
		void ServerDisplaySwingThroughInfo(bool bEnable);
		void ServerCommendPlayer(class ATBLPlayerState* Killer);
		void ServerClosePropertyDebugger();
		void ServerCloseMovementDebugger();
		void ServerClearPS5MatchId();
		void ServerCheatObj(const class FName& CheatCommand, class UObject* Param);
		void ServerCheat(const class FName& CheatCommand, const class FName& Param);
		void ServerBroadcastDebugMessage(const class FString& Message, const struct FColor& TextColor, float Duration, bool bToAll, bool bTeamOnly);
		void ServerBroadcast(const class FString& Msg, TBL_EChatType ChatType, const struct FColor& OverrideColor);
		void ServerBPCheat(const class FString& CheatAndParams);
		void ServerAdminCmd(const class FString& Cmd);
		void SendPromptPlayerMessageRequest(const struct FGameplayTag& MessageTag, int* SentMessageId);
		void SendPromptPlayerMessageReply(int MessageId, bool Response);
		void SendCancelPlayerMessageRequest(int MessageId);
		void SelfSyntheticInput(bool bEnable);
		void SayChatType(const class FString& Msg, TBL_EChatType ChatType, const struct FColor& OverrideColor);
		void Say(class FString* Msg);
		void SaveLoadout(class UClass* RequestedSubclass, class UClass* LoadoutSelection, const struct FLoadout& RequestedLoadout);
		void SaveCloudFilesIfDirty();
		void SaveAutoInputRecord();
		void ResetSelfCamera();
		void RequestSwitchTeam(TBL_EFaction RequestedFaction);
		void RequestLeaveSpawnWave(class ASpawnWave* Wave);
		void RequestJoinSpawnWave(class ASpawnWave* Wave, bool bFromAutoSpawn);
		void ReportPlayer(class APlayerState* ReportedPlayer, TBL_EPlayerReportCategory ReportCategory, const class FString& ReportDescription);
		void RemoveViewedItem(const struct FPrimaryAssetId& ItemId);
		void RemoveLoadingScreenPanel();
		void RemoveFriendById(const class FString& UniqueId);
		void RemoveCurrencyExec(const class FString& Currency, int Amount);
		void RemoveAllViewedItems();
		void ReleasedMenuButton();
		void RefreshRegionPingExec();
		void ReadFriendList();
		void PurchaseItemExec(const class FString& ItemId, const class FString& Currency);
		void PurchaseItemByString(const class FString& ItemId, const class FString& Currency);
		void PurchaseItem(const struct FPrimaryAssetId& ItemId, const class FString& Currency);
		void PS4TouchpadPressed();
		void PropertyDebuggerAdd(const class FString& PropertyName);
		void PropertyDebugger();
		void PromoteToLeader(const class FString& PlayerName);
		void PrintWeaponActionEvents();
		void PrintDebugMessage(const class FString& Message, const struct FColor& TextColor, float Duration);
		void PrintCameraShakeProperties(const class FName& CameraShakeName);
		void PrintCameraProperties();
		void PressedMenuButton();
		void PrepareEvent(const class FString& EventName);
		void PrepareBank(const class FString& BankName);
		void PlaySound(class UAkAudioEvent* Sound);
		int PlayGlobalVOEmote(class UCTBase* CTPersonality, const class FName& EmoteName, TBL_EFaction Faction, TBL_EAudioClassType Class, TBL_EVOType VoType);
		bool PlayerViewUnlockedLoadoutItem(class UClass* CharacterSubclass, class UClass* Item);
		bool PlayerViewedUnlockedSubclass(class UClass* CharacterSubclass);
		void PlayerSubmitVote(class UVotingInstance* VotingInstance, const class FName& Vote);
		void PlayerStateUniqueIdReplicated(class ATBLPlayerState* PS);
		void PlayerStateMissingOnClientStart(class APlayerState* NewPlayerState);
		void PlayerPostGameFeedback(int StarRating);
		void PlayerKilled(const struct FDeathEvent& DeathEvent);
		void PlayerIsBeingKicked();
		void PlayerCallKickVote(class APlayerState* KickTarget);
		void PlayDelayedCrossbowHapticsForPS5();
		void PlayCameraShake(const class FName& CameraShakeName, bool bLoop);
		void PendingSpawnExpired(class ASpawner* PendingSpawner);
		void PartySay(class FString* Msg);
		void OwningTeamChanged(class ATBLTeam* NewOwningTeam);
		void OpenBlueprintDebugMenu();
		void OnRep_NextSpawnWave(class ASpawnWave* PreviousSpawnWave);
		void OnRep_CheatsEnabled();
		void OnRep_bAutomaticallyChooseSpawnWave();
		void OnReceivedFocus();
		void OnReadUserFileComplete(const struct FPlatformInterfaceDelegateResult& Result);
		void OnPostGameMatchFound(const class FName& MatchmadeSessionName, bool bSuccess);
		void OnPostGameMatchCancelled(const class FName& MatchmadeSessionName, bool bSuccess);
		void OnMatchMakingChanged(bool bIsMatchmaking);
		void OnLostFocus();
		void OnLoadoutScreenState(bool DidOpen);
		void OnlineStatsReplicated(const struct FTBLOnlineStats& OnlineStats);
		void OnInputExitDeathCam();
		void OnEnumerateCloudFilesComplete(const struct FPlatformInterfaceDelegateResult& Result);
		void OnAbilityInitiated(class AAbilityInvocation* Invocation);
		void NotifyEnteredLeftLoadoutVolume(class UObject* LoadoutVolume, bool bInLoadoutVolume);
		void NotifyCausedDamage(const struct FDamageTakenEvent& Event);
		void MuteClient(bool Enabled);
		void MovementDebuggerLoadFile(const class FName& Filename);
		void MovementDebugger();
		void LoadVOASync(TBL_EAudioPersonalityType PersonalityType);
		void LoadBank(const class FString& BankName);
		void ListViewedItems();
		void ListPlayers();
		void JoinFriendGameExec(const class FString& PlayerName);
		bool IsVOBankLoaded(TBL_EAudioPersonalityType PersonalityType);
		bool IsViewportFocused();
		bool IsViewedItem(const struct FPrimaryAssetId& ItemId);
		bool IsUsingGamepad();
		bool IsStatsLoaded();
		bool IsSelfCamera();
		bool IsPlayingCinematics();
		void IsPlayerStateMuted(class ATBLPlayerState* InPlayerState, bool* OutIsMuted);
		bool IsPlayerChatMuted(class APlayerState* MutedPlayer);
		struct FPrimaryAssetId IsLoadoutItemRecentlyUnlocked(class UClass* CharacterSubclass, class UClass* Item);
		bool IsLoadoutEqualToSavedLoadout(class UClass* RequestedSubclass, const struct FLoadout& Loadout);
		bool IsHeadlessClient();
		bool IsGhostCameraMode();
		struct FPrimaryAssetId IsCharacterRecentlyUnlocked(class UClass* CharacterSubclass);
		bool IsActionKeyDown(const class FName& ActionName);
		void InputStop();
		void InputRec(const class FName& ReplayName);
		void InputPlay(const class FName& ReplayName);
		void InpStop();
		void InpRec(const class FString& RecName);
		void InpPlay(const class FString& RecName);
		void GrantFlavorEntitlementExec(const class FString& Entitlement);
		void GrantCurrencyExec(const class FString& Currency, int Amount);
		void GiveWeapon(const class FName& WeaponName);
		TMap<struct FPrimaryAssetId, bool> GetUnlocksAtLevel(int Level, TBL_EOnlineStat Stat);
		TArray<struct FPrimaryAssetId> GetUnlockedItemsBySubclass(class UClass* CharacterSubclass);
		int GetTotalTimesKilled();
		float GetToggleCameraGamepadInputHoldTimeThreshold();
		float GetTimeUntilRespawn();
		void GetTimesKilledKilledByPlayer(class ATBLPlayerState* OtherPlayer, int* OutTimesKilled, int* OutTimesKilledBy);
		float GetTeamDamage();
		class UTBLPlayerInput* GetTBLPlayerInput();
		float GetStatFloatExec(const class FString& StatName);
		float GetStatFloat(const class FString& StatName);
		int GetStatExec(const class FString& StatName);
		int GetStat(TBL_EOnlineStat Stat);
		struct FTransform GetSpectatorPawnSpawnTransform();
		void GetSavedLoadout(class UClass* RequestedSubclass, struct FLoadout* Loadout);
		class UClass* GetSavedCharacterSubclass(class UClass* ParentClass);
		bool GetRespawnTime(float* TimeRemaining);
		class UClass* GetRandomUnlockedLoadoutItemForSlot(class ULoadoutSelection* LoadoutSelection, TBL_EInventoryItemSlot Slot);
		struct FOwnershipResponse GetOwnership(const struct FPrimaryAssetId& AssetIdToCheck, bool BaseOnly);
		TArray<struct FCustomizationEntry> GetOwnerCustomizationWeaponItems(TBL_EWeaponTag WeaponTag, TBL_EFaction Faction);
		TArray<struct FCustomizationEntry> GetOwnerCustomizationItems(TBL_EAudioClassType CharacterType, TBL_EFaction Faction, const class FName& AssetsTypeName, bool bPresetCompatible, bool bSort);
		int GetOnlineCommodity(const class FString& Key);
		class ASpawnWave* GetNextSpawnWave();
		int GetLevelExec(const class FString& Stat);
		int GetLevel(TBL_EOnlineStat Stat);
		bool GetIsProfileDataLoaded();
		void GetInputAnalogStickStateRaw(Engine_EControllerAnalogStick WhichStick, float* StickX, float* StickY);
		struct FPrimaryAssetId GetEquippedCustomizationWeaponAsset(TBL_EWeaponTag WeaponTag, TBL_EFaction Faction, TBL_EAudioClassType CharacterType);
		TArray<struct FOnlineStoreOffer> GetCatalogInLevelRange(bool LevelAccessible, int MinLevel, int MaxLevel, TBL_EOnlineStat Stat);
		void GetCatalogExec(bool LevelAccessible, int LevelsAbove);
		TArray<struct FOnlineStoreOffer> GetCatalog(bool LevelAccessible, int LevelsAbove, TBL_EOnlineStat Stat);
		class UAkComponent* GetAudioComponent();
		class UClass* GetAllowedLoadoutSelection(class UClass* RequestedSubclass);
		TArray<class UClass*> GetAllowedCharacterClasses();
		class UTBLScreenManager* GetActiveScreenManager();
		void GenerateStoreJSON(bool bGenerateAllItem);
		void ForceSelfAutobalance();
		void ForceImmediateRespawn();
		void DumpStatsExec(int Threshold);
		void DumpPartyInfo();
		void DumpOwnership();
		void DumpMovementMetrics();
		void DumpFriendList();
		void DtlsOpen(const class FString& URL);
		void DrawWeaponTip(bool bEnable);
		void DrawVisibilityCheck(bool bEnable);
		void DrawTracersClear(bool bEnable);
		void DrawTracers(bool bEnable);
		void DrawTracerDirection(bool bEnable);
		void DrawTracerCache(bool bEnable);
		void DrawSpectatorCamera(bool bEnable);
		void DrawSocket(const class FName& SocketName);
		void DrawShield(bool bEnable);
		void DrawRangedInaccuracy(bool bEnable);
		void DrawProjectile(bool bEnable);
		void DrawParryHit(bool bEnable);
		void DrawMeleeHit(bool bEnable);
		void DrawHorseImpact(bool bEnable);
		void DrawFacingCheck(bool bEnable);
		void DrawClientTracers(bool bEnable);
		void DrawCamera(bool bEnable);
		void DrawBackSwingCheck(bool bEnable);
		void DrawAllTracers(bool bEnable);
		void DisplaySwingThroughInfo(bool bEnable);
		void DisplayDebugScrollUp();
		void DisplayDebugScrollReleased();
		void DisplayDebugScrollDown();
		void DisableCameraOffset();
		void DevMode(bool bActivate);
		void DestroyInputReplayComponent();
		void DebugSetPartySetting(const class FString& Key, const class FString& Value);
		void CreateInputReplayComponent();
		void ClosePropertyDebugger();
		void CloseMovementDebugger();
		void ClientUpdateVoiceStateForPlayer(class ATBLPlayerState* NewPlayer);
		void ClientSwitchToSpectator();
		void ClientStartOnlineGame();
		void ClientSpawnerStartAllowingControl(class ASpawner* InSpawner, class ATBLCharacter* Char);
		void ClientShowTeamSelectScreen();
		void ClientShowLoadoutScreen();
		void ClientShowHudMarkerPointEvent(const class FName& HudMarkerTag, float TicketsModified, int TeamIndex);
		void ClientSetVisibilityOfAllObjectiveZones(bool IsVisible);
		void ClientSetSyntheticInputMovement(bool bEnable);
		void ClientSetSyntheticInputAI(bool bEnable);
		void ClientSetSyntheticInputActions(bool bEnable);
		void ClientSetSpectatorLocation(const struct FVector& InLocation, const struct FRotator& InRotation);
		void ClientRequestPostMatchInfo();
		void ClientReceiveLocalizedObjectiveMessage(const struct FObjectiveMessage& ObjectiveMessage);
		void ClientReceiveLocalizedChat(const class FText& FormatText, TBL_EChatType Type);
		void ClientReceiveGameModeMessages(TArray<struct FGameModeMessage> GameModeMessages);
		void ClientReceiveGameModeMessage(const struct FGameModeMessage& GameModeMessage);
		void ClientReceiveDecapHead(class AInventoryItem* InDecapHead);
		void ClientReceiveDeathRecap(const struct FDeathRecap& DeathRecap);
		void ClientReceivedAutoBalanceNotification(TBL_EFaction NewFaction);
		void ClientReceiveChat(class ATBLPlayerState* SenderPlayerState, const class FString& S, TBL_EChatType Type, bool IsSenderDev, const struct FColor& OverrideColor);
		void ClientPushCmd(const class FString& Cmd);
		void ClientPromptPlayerMessageRequest(const struct FGameplayTag& MessageTag, int MessageId);
		void ClientPostGameStartMatchmaking(bool bAlways);
		void ClientPostGameMigrateToNewMatchmakingServer(const class FString& ConnectString);
		void ClientPostAKSoundsOnActor(class AActor* SoundActor, TArray<class UAkAudioEvent*> Sounds);
		void ClientPostAKSoundOnActor(class AActor* SoundActor, class UAkAudioEvent* Sound);
		void ClientPostAkSound(class UAkAudioEvent* Sound);
		void ClientPlayEmote(const class FName& EmoteName);
		void ClientPlayAimedAtSound();
		void ClientOnRevivedOtherPlayer(class APawn* RevivedPawn);
		void ClientOnPlayerRevived(class APawn* RevivingPawn);
		void ClientOnCounteredAttack(TBL_EDefenderBlockedPolicy BlockPolicy, class ATBLCharacter* AttackingCharacter);
		void ClientOnBlockedAttack(TBL_EDefenderBlockedPolicy BlockPolicy, class ATBLCharacter* AttackingCharacter, bool bWasProjectile);
		void ClientNotifyWaveJoinResponse(class ASpawnWave* Wave, bool bJoinedWaveSuccess);
		void ClientNotifyPendingSpawn(class ASpawner* PendingSpawner, float ServerSpawnTimeSeconds);
		void ClientNotifyForwardSpawnAwaitingCombatTimer(class AForwardSpawnWave* ForwardWave);
		void ClientNotifyCausedDamage(const struct FDamageTakenEvent& Event);
		void ClientKicked(const class FText& KickReason);
		void ClientHandleGlobalGameNotification(TBL_EGlobalGameNotificationCategory Category, const class FText& Title, const class FText& Body, const class FName& Subcategory, class UObject* Data);
		void ClientGoingToSpawnAtSpawner(class ASpawner* InSpawner);
		void ClientFadeOut(float PlaybackSpeed);
		void ClientFadeIn(float PlaybackSpeed);
		void ClientEndOnlineGame();
		void ClientDrawDebugTracerSphere(const struct FVector& Center, float Radius, int Segments, const struct FColor& Color);
		void ClientDrawDebugTracerBox(const struct FVector& Center, const struct FVector& Extent, const struct FQuat& Rotation, const struct FColor& Color);
		void ClientConfirmExit();
		void ClientClearPostMatchInfo();
		void ClientCausedFallDeath(const struct FDeathDamageTakenEvent& FallDamage);
		void ClientCancelPlayerMessageRequest(int MessageId);
		void ClientBroadcastDebugMessage(const class FString& Message, const struct FColor& TextColor, float Duration, bool bToAll, bool bTeamOnly);
		void ClientApprovedLoadout(bool IsLoadoutApproved, class UClass* RequestedSubclass, const struct FLoadout& RequestedLoadout);
		void ClientAcknowledgeTeamRequest(bool bSuccess, TBL_EFaction Faction);
		void ClientAckDoneTravelling();
		void ClearServerHistoryList();
		void ClearSeenGameUpdates();
		void ClearPlayerHasAcceptedNDA();
		void ClearMovementMetrics();
		void ClearLoadedSoundBanks();
		void ClearFlavorStats();
		void CinematicSpectatorCamera();
		bool CheckPersonalityOwnership(TBL_EAudioPersonalityType InPersonality, TBL_EAudioClassType CharacterType, TBL_EFaction InFaction);
		void ChatUnmutePlayer(class APlayerState* Unmuted);
		void ChatMutePlayer(class APlayerState* Muted);
		struct FOwnershipResponse CanUseLoadoutItem(class UClass* LoadoutSelection, class UClass* Item);
		struct FOwnershipResponse CanUseLoadout(class UClass* LoadoutSelection);
		struct FOwnershipResponse CanUseCharacter(class UClass* CharacterSubclass);
		bool CanSwitchCamera();
		bool CanPlayerCallKickVote(class APlayerState* KickTarget);
		void BugAnimation();
		void BroadcastDebugMessage(const class FString& Message, const struct FColor& TextColor, float Duration, bool bToAll, bool bTeamOnly);
		void Benchmark(int Workscale);
		void AutoInputRecord();
		void AttachCameraToWeapon(const class FName& WeaponName, bool bUseWeaponRotation);
		void AttachCameraToProjectile(bool bUseProjectileRotation);
		void AttachCameraToHorse(const class FName& BoneName, bool bUseBoneRotation);
		void AttachCameraToBone(const class FName& BoneName, bool bUseBoneRotation);
		void AnalyticsQuery();
		void AdminSay(class FString* Msg);
		void Admin(const class FString& Cmd);
		void AddViewedItem(const struct FPrimaryAssetId& ItemId);
		void AddUncheckedLevelUpResult(const struct FPrimaryAssetId& NewLevelUpItem);
		void AddFriendByName(const class FString& PlayerId);
		void AddFriendById(const class FString& UniqueId);
		void AddAllViewedItems(TBL_EAudioClassType CharacterType, TBL_EFaction Faction, const class FName& AssetsTypeName);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerControllerCinematic
	 * Size -> 0x0000 (FullSize[0x1238] - InheritedSize[0x1238])
	 */
	class ATBLPlayerControllerCinematic : public ATBLPlayerController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ArenaPlayerController
	 * Size -> 0x0008 (FullSize[0x1240] - InheritedSize[0x1238])
	 */
	class AArenaPlayerController : public ATBLPlayerControllerCinematic
	{
	public:
		unsigned char                                              UnknownData_RJ6T[0x8];                                   // 0x1238(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerState
	 * Size -> 0x06F8 (FullSize[0x0A50] - InheritedSize[0x0358])
	 */
	class ATBLPlayerState : public APlayerState
	{
	public:
		unsigned char                                              UnknownData_KUBK[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTBLOnlineStats                                     OnlineStats;                                             // 0x0360(0x00C8) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineStatsUpdated;                                      // 0x0428(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineStatsLogin;                                        // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineStatsLevelUp;                                      // 0x0448(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineStatsStatValueChanged;                             // 0x0458(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineStatsOriginalValueChanged;                         // 0x0468(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineStoreOnCurrencyChanged;                            // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnlineInventoryRefreshed;                                // 0x0488(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FLevelUpResult>                              CurrentMatchLevelUpResults;                              // 0x0498(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTBLOnlineAccount                                   OnlineAccount;                                           // 0x04A8(0x00B0) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic
		float                                                      DeathTime;                                               // 0x0558(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HMZO[0x4];                                   // 0x055C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FStatEntry>                                  RespawnStats;                                            // 0x0560(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRespawnSpecialItem                                 RespawnSpecialItem;                                      // 0x0570(0x0004) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DRKV[0x4];                                   // 0x0574(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      RespawnConstructableActors;                              // 0x0578(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLTeam*                                            TeamBeforeBecameInactive;                                // 0x0588(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnNextSpawnTeamChanged;                                  // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AInventoryItem*                                      AttachToProjectile;                                      // 0x05A0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       WaitForAttachToProjectile;                               // 0x05A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FUniqueNetIdRepl                                    PlatformOSSUniqueId;                                     // 0x05B0(0x0028) Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Kills;                                                   // 0x05D8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        Deaths;                                                  // 0x05DC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        Assists;                                                 // 0x05E0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        Takedowns;                                               // 0x05E4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        GlobalRank;                                              // 0x05E8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        PlayerScore;                                             // 0x05EC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        ProjectilesFired;                                        // 0x05F0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_39PN[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGlobalRankChanged;                                     // 0x05F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnTakedownsChanged;                                      // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UClass*                                              NextSpawnPawnSubclass;                                   // 0x0618(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PartyId;                                                 // 0x0620(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        NumInParty;                                              // 0x0630(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V8Q8[0x4];                                   // 0x0634(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnKillsChanged;                                          // 0x0638(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeathsChanged;                                         // 0x0648(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SYUJ[0x18];                                  // 0x0658(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class ATBLPlayerState>>              DownCausingPlayers;                                      // 0x0670(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ScoreChanged;                                            // 0x0680(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XJRJ[0x70];                                  // 0x0690(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnScoreEvent;                                            // 0x0700(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              CachedMeshClass;                                         // 0x0710(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               CachedMeshFaction;                                       // 0x0718(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_70DE[0x7];                                   // 0x0719(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh*                                       CachedMesh;                                              // 0x0720(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, float>                                   CachedMeshMorphTargets;                                  // 0x0728(0x0050) NativeAccessSpecifierPublic
		TArray<class USkeletalMesh*>                               CachedGoreHeadMeshes;                                    // 0x0778(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantsOnlineLoad;                                        // 0x0788(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReplicateOnlineAccount;                                 // 0x0789(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAudioClassType                                        BotSelectedAssetsType;                                   // 0x078A(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HUX5[0x5];                                   // 0x078B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              GameSparksUserId;                                        // 0x0790(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTeamChanged;                                           // 0x07A0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       HasBeenAutoBalanced;                                     // 0x07B0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9AJ4[0x7];                                   // 0x07B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDeathRecap                                         DeathRecap;                                              // 0x07B8(0x0078) BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic
		bool                                                       bCustomizationUploaded;                                  // 0x0830(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V6F0[0x7];                                   // 0x0831(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<unsigned char, struct FDeadCharacter>                 DeadCharacters;                                          // 0x0838(0x0050) Transient, NativeAccessSpecifierPublic
		unsigned char                                              DeadCharacterId;                                         // 0x0888(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KGPB[0x7];                                   // 0x0889(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPlatformChanged;                                       // 0x0890(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsFriend;                                               // 0x08A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanBeAutoBalanced;                                      // 0x08A1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsVIP;                                                  // 0x08A2(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EAudioPersonalityType                                  EquippedPersonalityType;                                 // 0x08A3(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NPZS[0x4];                                   // 0x08A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FScoreEventByName>                           PlayerScoreEventsByText;                                 // 0x08A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bQuitter;                                                // 0x08B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C12M[0x7];                                   // 0x08B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTimeStampedDamageTakenEvent>                DamageTakenEvents;                                       // 0x08C0(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATBLCharacter>                        LastDeathRecapCharacter;                                 // 0x08D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GQBR[0x18];                                  // 0x08D8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        ActualStartTime;                                         // 0x08F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        InactiveTime;                                            // 0x08F4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                CustomizationNickName;                                   // 0x08F8(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		float                                                      ShowLoadoutDelayTime;                                    // 0x0910(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_06UT[0xC];                                   // 0x0914(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeSinceLastOutOfCombat;                                // 0x0920(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OutOfCombatTimeRemaining;                                // 0x0924(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLTeam*                                            NextSpawnTeam;                                           // 0x0928(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLTeam*                                            Team;                                                    // 0x0930(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EFaction                                               Faction;                                                 // 0x0938(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsNPC;                                                  // 0x0939(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlayerCustomizedBot;                                  // 0x093A(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N83Q[0x5];                                   // 0x093B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CharacterClass;                                          // 0x0940(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLCharacter*                                       Character;                                               // 0x0948(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                LocalizablePlayerName;                                   // 0x0950(0x0018) BlueprintVisible, BlueprintReadOnly, Net, Protected, NativeAccessSpecifierProtected
		struct FReplCustomizationPresetMapping                     Presets;                                                 // 0x0968(0x0038) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       bMustSetLoadout;                                         // 0x09A0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4L0Y[0x3];                                   // 0x09A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        AgathaDisplayColor;                                      // 0x09A4(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        MasonDisplayColor;                                       // 0x09B4(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        SpectatorDisplayColor;                                   // 0x09C4(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N0IG[0x4];                                   // 0x09D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLoadout                                            NextSpawnLoadout;                                        // 0x09D8(0x0038) BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsNextSpawnLoadoutOverridden;                           // 0x0A10(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HR3C[0x3];                                   // 0x0A11(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TotalTeamDamage;                                         // 0x0A14(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TotalIdleTime;                                           // 0x0A18(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UWCS[0x4];                                   // 0x0A1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInstigatedVote>                             InstigatedVotes;                                         // 0x0A20(0x0010) Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastVotedOnTime;                                         // 0x0A30(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EHardwarePlatform                                      ClientPlatform;                                          // 0x0A34(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DA0U[0xB];                                   // 0x0A35(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ATBLPlayerState*>                             FriendsList;                                             // 0x0A40(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UploadPing();
		void UpdatePlayerAutoBalanceEligibility(bool CanBeAutoBalanced);
		void UpdateDeadCharacters();
		void SyncScoreEvents(TArray<struct FScoreEventByName> ScoreEvents);
		TArray<struct FScoreEventStruct> StatsGetPlayerScoreEvents();
		void SetPlayerVIPStatus(bool IsVIP);
		void SetPartyId(const class FString& InPartyId);
		void SetNumInParty(int inNumInParty);
		void SetIsFriend(bool IsFriend);
		void ServerUploadPing(unsigned char NewPing);
		void ServerUpdateFriendStatus(class ATBLPlayerState* MyFriend, bool IsFriend);
		TArray<class ATBLPlayerState*> ReturnListOfFriends(TArray<class ATBLPlayerState*> PlayerStates);
		void ResetPartyId();
		void OnRep_Team();
		void OnRep_Takedowns();
		void OnRep_Presets();
		void OnRep_PlayerScore();
		void OnRep_PlatformUniqueId();
		void OnRep_PersonalityType();
		void OnRep_OnlineStats();
		void OnRep_OnlineAccount();
		void OnRep_NextSpawnTeam();
		void OnRep_NextSpawnPawnSubclass();
		void OnRep_Kills();
		void OnRep_GlobalRank();
		void OnRep_Deaths();
		void OnRep_ClientPlatform();
		void OnRep_CharacterClass();
		void OnRep_bMustSetLoadout();
		void OnRep_AttachToProjectile();
		void OnPawnDamaged(const struct FDamageTakenEvent& Event);
		void LocalPlayerPartyLeft(bool Result);
		void LocalPlayerPartyInviteAccepted(const class FString& NewPartyId);
		void LocalPlayerPartyDisbanded();
		void LocalPlayerPartyCreated(bool Result, const class FString& NewPartyId);
		bool IsInParty();
		bool GetPlayerVIPStatus();
		TBL_EAudioPersonalityType GetPersonalityType();
		class FString GetPartyId();
		int GetNumInParty();
		bool GetIsFriend();
		struct FLinearColor GetDisplayColor();
		void GetDeathRecapEntryForTakeDowner(struct FDeathRecapEntry* Entry);
		void GetDeathRecapEntryForKiller(struct FDeathRecapEntry* Entry);
		TArray<struct FDeathRecapEntry> GetDeathRecapEntries();
		class ATBLCharacter* GetDeadCharacter(unsigned char ID);
		TBL_EHardwarePlatform GetClientHardwarePlatform();
		class UClass* GetCharacterClass(bool* IsDead, bool* IsSpectating);
		void GetAllPresetsAsArray(TArray<struct FCustomizationPreset>* OutPresets);
		void ClientSetPlayerVIPStatus(bool IsVIP);
		void ClientScoreOverrideEvent(const class FName& RowName, int ScoreAmount, class ATBLPlayerState* Killed, int16_t NoveltyScoreRowIndex);
		void ClientScoreEvent(const class FName& RowName, int ScoreAmount, class ATBLPlayerState* Killed, int Bonuses, int16_t NoveltyScoreRowIndex);
		void ClientScoreCurveEvent(const class FName& RowName, int ScoreCurveAmount, int ScoreAmount, class ATBLPlayerState* Killed, int16_t NoveltyScoreRowIndex);
		void ClientForceReplicate();
		void ClientBlockInput(bool BlockInput);
		bool CanBeAutoBalanced();
		void BroadcastStatsLevelUp(TArray<struct FLevelUpResult> NewLevelUpResults);
		void BroadcastPauseRagdolls(bool bPaused);
		void AddDeadCharacter(unsigned char ID, class ATBLCharacter* InCharacter, bool bSpawnedHead);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ArenaPlayerState
	 * Size -> 0x0038 (FullSize[0x0A88] - InheritedSize[0x0A50])
	 */
	class AArenaPlayerState : public ATBLPlayerState
	{
	public:
		class FScriptMulticastDelegate                             OnLivesLeftChanged;                                      // 0x0A50(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnbIsDeadAndOutOfLivesChanged;                           // 0x0A60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsPartOfRoundChanged;                                  // 0x0A70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int                                                        LivesLeft;                                               // 0x0A80(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              bIsPartOfRound : 1;                                      // 0x0A84(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              bIsDeadAndOutOfLives : 1;                                // 0x0A84(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IG3U[0x3];                                   // 0x0A85(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnRep_LivesLeft();
		void OnRep_IsPartOfRound();
		void OnRep_IsDeadAndOutOfLives();
		int GetLivesLeft();
		bool GetIsPartOfRound();
		bool GetIsDeadAndOutOfLives();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AsnycLoadingHelpers
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAsnycLoadingHelpers : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AttachRagdollInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAttachRagdollInterface : public UInterface
	{
	public:
		void OnRagdollDetach(class ATBLCharacter* Character);
		void OnRagdollAttach(class ATBLCharacter* Character);
		void GetAttachRagdollParams(struct FAttachRagdollParams* AttachRagdollParams, class ATBLCharacter* Character, const struct FDeathDamageTakenEvent& DamageEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TracerType
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class UTracerType : public UTBLObject
	{
	public:
		TArray<class UTracerShape*>                                TracerShapes;                                            // 0x0040(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoWorldHit;                                             // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoWorldHitAngleCheck;                                   // 0x0051(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9NBS[0x2];                                   // 0x0052(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FacingEnemyMaxAngle;                                     // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingEnemyMaxAngleVertical;                             // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingTeammateMaxAngle;                                  // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingOtherMaxAngle;                                     // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AngleCheckLocationOffset;                                // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoWeaponTipAngleCheck;                                  // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VEXL[0x3];                                   // 0x0069(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                WeaponTipComponentName;                                  // 0x006C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FWeaponTipMaxAngle                                  WeaponTipMaxAngle;                                       // 0x0074(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FWeaponTipMaxAngle                                  WeaponTipDelayAngle;                                     // 0x007C(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      WeaponTipDelayTime;                                      // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WeaponTipActiveTime;                                     // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InvalidStabTime;                                         // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FColor                                              WeaponTipDebugColor;                                     // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FColor                                              BackSwingDebugColor;                                     // 0x0094(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FColor                                              StabWindupDebugColor;                                    // 0x0098(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Version;                                                 // 0x009C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AttackTracers
	 * Size -> 0x0008 (FullSize[0x00A8] - InheritedSize[0x00A0])
	 */
	class UAttackTracers : public UTracerType
	{
	public:
		bool                                                       bIgnoreTeammates;                                        // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bParryImmediately;                                       // 0x00A1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z6ET[0x2];                                   // 0x00A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              DebugColor;                                              // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AttackType
	 * Size -> 0x01C8 (FullSize[0x0270] - InheritedSize[0x00A8])
	 */
	class UAttackType : public UAssemblyBlueprint
	{
	public:
		class FText                                                Description;                                             // 0x00A8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic
		bool                                                       bCanComboInto;                                           // 0x00C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanComboOutOf;                                          // 0x00C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanComboIntoSelf;                                       // 0x00C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanRiposte;                                             // 0x00C3(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EComboTimingPolicy                                     ComboFromRecoveryPolicy;                                 // 0x00C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EComboTimingPolicy                                     ComboFromThwackPolicy;                                   // 0x00C5(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EComboTimingPolicy                                     ComboFromReleasePolicy;                                  // 0x00C6(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EComboTimingPolicy                                     ComboFromParryReleasePolicy;                             // 0x00C7(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EComboTimingPolicy                                     ComboFromJabPolicy;                                      // 0x00C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanQueueAttack;                                         // 0x00C9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBeCancelled;                                         // 0x00CA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCancelUsesStamina;                                      // 0x00CB(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanFeint;                                               // 0x00CC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanFeintInto;                                           // 0x00CD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanCrouch;                                              // 0x00CE(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAttackTypeCategory                                    AttackTypeCategory;                                      // 0x00CF(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAnimationType                                         AnimationType;                                           // 0x00D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CJ54[0x3];                                   // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumHoldingTime;                                      // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECombatStateBehavior                                   CombatStateBehavior;                                     // 0x00D8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EHeldBehavior                                          HeldBehavior;                                            // 0x00D9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EWindupInputReleasedPolicy                             WindupInputReleasedPolicy;                               // 0x00DA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EReleaseCancelPolicy                                   ReleaseCancelPolicy;                                     // 0x00DB(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAttackerBlockedPolicy                                 AttackerBlockedPolicy;                                   // 0x00DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAttackerBlockedPolicy                                 AttackerCounteredPolicy;                                 // 0x00DD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EDefenderBlockedPolicy                                 DefenderBlockedPolicy;                                   // 0x00DE(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EDefenderBlockedPolicy                                 ParrySuccessShieldBreakPolicy;                           // 0x00DF(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EPassiveShieldPolicy                                   PassiveShieldPolicy;                                     // 0x00E0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DCAN[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EBlockingCategory, TBL_EAttackerBlockedPolicy>    BlockedPolicyPerCategory;                                // 0x00E8(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic
		TBL_EWorldHitPolicy                                        WorldHitPolicy;                                          // 0x0138(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EWorldHitPolicy                                        BreakableHitPolicy;                                      // 0x0139(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnHitPolicy                                           OnHitPolicy;                                             // 0x013A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETeamHitPolicy                                         TeamHitPolicy;                                           // 0x013B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanClash;                                               // 0x013C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EClashPolicy                                           ClashPolicy;                                             // 0x013D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoEarlyHits;                                            // 0x013E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_55FQ[0x1];                                   // 0x013F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EarlyHitDelay;                                           // 0x0140(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EEarlyHitPolicy                                        EarlyHitPolicy;                                          // 0x0144(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FEarlyHitParams                                     EarlyHitParams;                                          // 0x0145(0x0003) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPublic
		TBL_ETeamHitDamagePolicy                                   TeamHitDamagePolicy;                                     // 0x0148(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnStaminaDrainedPolicy                                OnStaminaDrainedPolicy;                                  // 0x0149(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnHitEffect                                           TargetHitEffect;                                         // 0x014A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnHitEffect                                           TargetHitEffectHorse;                                    // 0x014B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseStaminaDrain;                                        // 0x014C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7KSK[0x3];                                   // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FStaminaDrain                                       StaminaDrain;                                            // 0x0150(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic
		bool                                                       bUseTurnLock;                                            // 0x0170(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0F3I[0x3];                                   // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTurnLockParams                                     TurnLockParams;                                          // 0x0174(0x0024) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPublic
		TBL_ECombatStateEvent                                      StartTurnLock;                                           // 0x0198(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseMomentumBasedDamage;                                 // 0x0199(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_506E[0x6];                                   // 0x019A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         MomentumBasedDamage;                                     // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseHorseDamageModifier;                                 // 0x01A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VLN2[0x3];                                   // 0x01A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HorseDamageModifier;                                     // 0x01AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseLocationBasedDamage;                                 // 0x01B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseProjectileDamageModifiers;                           // 0x01B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseDownedDamageModifier;                                // 0x01B2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TTFE[0x1];                                   // 0x01B3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DownedDamageModifier;                                    // 0x01B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseChargeStabDamageModifier;                            // 0x01B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BMX3[0x7];                                   // 0x01B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         ChargeStabDamageModifier;                                // 0x01C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsUninterruptibleInRelease;                             // 0x01C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHorseLeftSideAltAttack;                                 // 0x01C9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldLoopRelease;                                      // 0x01CA(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseParryBreakDamageModifier;                            // 0x01CB(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSlowdownOnFire;                                         // 0x01CC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QIAY[0x3];                                   // 0x01CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        CanBeBlockedByParryBox;                                  // 0x01D0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, struct FCombatStateSlowdown>             CombatStateSlowdown;                                     // 0x01E0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       bUseAttackTypeModifier;                                  // 0x0230(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAddComboFromBlockedTime;                                // 0x0231(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableArmCollision;                                    // 0x0232(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseTracerHitDirection;                                  // 0x0233(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCancelOnAttackInput;                                    // 0x0234(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EActivateAbility                                       ActivateAbility;                                         // 0x0235(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1L7G[0x2];                                   // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ActivateCombatState;                                     // 0x0238(0x0008) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Version;                                                 // 0x0240(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AttackCategory;                                          // 0x0244(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FullBodyStartOfReleaseTime;                              // 0x024C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FFullBodyAnimationModifier>                  FullBodyAnimationModifiers;                              // 0x0250(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanComboOutOfIfMissed;                                  // 0x0260(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanHoldCombo;                                           // 0x0261(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanComboInInterrupt;                                    // 0x0262(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanCancelOtherAttack;                                   // 0x0263(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanAlwaysQueueCombo;                                    // 0x0264(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanBendUpperBody;                                       // 0x0265(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseLockTurnAngle;                                       // 0x0266(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6B9W[0x1];                                   // 0x0267(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LockTurnAngle;                                           // 0x0268(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZYTM[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (PADDING)

	public:
		TBL_EOnHitEffect GetHitEffect(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AudioBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAudioBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_StopMusic(class UObject* WorldContextObject, int TransitionDurationMs);
		void STATIC_ResumeMusic(class UObject* WorldContextObject);
		void STATIC_PostMusicEvent(class UObject* WorldContextObject, class UAkAudioEvent* Event, int TransitionDurationMs);
		void STATIC_PauseMusic(class UObject* WorldContextObject);
		bool STATIC_IsPlayingMusic(class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TracerShape
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UTracerShape : public UTBLObject
	{
	public:
		unsigned char                                              UnknownData_SP1L[0x20];                                  // 0x0040(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AuraTracers
	 * Size -> 0x0120 (FullSize[0x0180] - InheritedSize[0x0060])
	 */
	class UAuraTracers : public UTracerShape
	{
	public:
		class UBlueprint*                                          ShapeBlueprint;                                          // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ShapeComponentName;                                      // 0x0068(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUsePrecisionCameraCheck;                                // 0x0070(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCameraAim;                                           // 0x0071(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_43MV[0xE];                                   // 0x0072(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          RelativeTransform;                                       // 0x0080(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          CurrentTransform;                                        // 0x00B0(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          AimTransform;                                            // 0x00E0(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          LeftTransform;                                           // 0x0110(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          RightTransform;                                          // 0x0140(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             BoxExtents;                                              // 0x0170(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E4UA[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AutoInvalidationBox
	 * Size -> 0x0018 (FullSize[0x0150] - InheritedSize[0x0138])
	 */
	class UAutoInvalidationBox : public UInvalidationBox
	{
	public:
		unsigned char                                              UnknownData_0OYH[0x10];                                  // 0x0138(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        UpdateWeight;                                            // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		StaggeredUpdater_EStaggeredUpdateCategory                  UpdateCategory;                                          // 0x014C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ADN1[0x3];                                   // 0x014D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AutomationApiBase
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UAutomationApiBase : public UObject
	{
	public:
		void MakeTeamSelection(class ATBLPlayerController* PlayerController);
		void MakeSpawnSelection(class ATBLPlayerController* PlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AutomationLevelSequenceActor
	 * Size -> 0x0018 (FullSize[0x0300] - InheritedSize[0x02E8])
	 */
	class AAutomationLevelSequenceActor : public ALevelSequenceActor
	{
	public:
		unsigned char                                              UnknownData_279C[0x18];                                  // 0x02E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnStop();
		void OnSequenceEvent(const struct FAutomationSequenceEvent& SequenceEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AutomationSettings
	 * Size -> 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
	 */
	class UAutomationSettings : public UObject
	{
	public:
		float                                                      MaxAiPlayerTestDuration;                                 // 0x0028(0x0004) Edit, ZeroConstructor, Config, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxAiPlayerTestCharacterCount;                           // 0x002C(0x0004) Edit, ZeroConstructor, Config, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      ServerPreProfileCommands;                                // 0x0030(0x0010) Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      ServerPostProfileCommands;                               // 0x0040(0x0010) Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      ClientPreProfileCommands;                                // 0x0050(0x0010) Edit, ZeroConstructor, Config, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AutomationClass[0x28];                                   // 0x0060(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TArray<class FString>                                      EnvironmentTestCsvColumn;                                // 0x0088(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EnvironmentPauseTime;                                    // 0x0098(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S16I[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SplunkURL;                                               // 0x00A0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SplunkToken;                                             // 0x00B0(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseSplunk;                                              // 0x00C0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1X6L[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterBase
	 * Size -> 0x0080 (FullSize[0x0670] - InheritedSize[0x05F0])
	 */
	class ATBLCharacterBase : public ACharacter
	{
	public:
		struct FCharacterSignificanceState                         SignificanceState;                                       // 0x05F0(0x0028) BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UTBLCharacterMovementBaseComponent*                  MovementBase;                                            // 0x0618(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewDistance;                                            // 0x0620(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YYGL[0x4];                                   // 0x0624(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRecentlyRendered;                                      // 0x0628(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		bool                                                       bWasRecentlyRendered;                                    // 0x0638(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F6VJ[0x3];                                   // 0x0639(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        LastAnimUpdateRate;                                      // 0x063C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WLVL[0x8];                                   // 0x0640(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bRootMotionActive;                                       // 0x0648(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMontageActive;                                          // 0x0649(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWeaponTracersActive;                                    // 0x064A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWaitingForAnimNotify;                                   // 0x064B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreFaceRotation;                                     // 0x064C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsIdleAnimation;                                        // 0x064D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCarryableNPC;                                         // 0x064E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EMeshVisibilityFlag                                    MeshVisibilityFlag;                                      // 0x064F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HiddenAnimUpdateMaxDistance;                             // 0x0650(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SkipClientOptimizations;                                 // 0x0654(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlacedInWorld;                                          // 0x0655(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VFSQ[0x2];                                   // 0x0656(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRootTransformUpdated;                                  // 0x0658(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MGXM[0x8];                                   // 0x0668(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowThirdPersonMesh();
		void STATIC_SetCinematicSpawnInEnabled(class UObject* WorldContextObject, bool bEnabled);
		void PreRecalcRequiredBones_Mesh1P();
		void PostRecalcRequiredBones_Mesh1P();
		bool IsTargetable();
		bool IsFirstPerson();
		bool IsCustomizationCharacter();
		bool IsAlive();
		TBL_EMeshVisibilityFlag GetMeshVisibilityFlag();
		float GetCreationTime();
		void EnableMeshCollision();
		void DisableMeshCollision();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SiegeEngine
	 * Size -> 0x0280 (FullSize[0x08F0] - InheritedSize[0x0670])
	 */
	class ASiegeEngine : public ATBLCharacterBase
	{
	public:
		unsigned char                                              UnknownData_KITR[0x10];                                  // 0x0670(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicationPredictionState                         PredictionState;                                         // 0x0680(0x0070) NativeAccessSpecifierPublic
		class UClass*                                              AnimationSet;                                            // 0x06F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CharacterAnimationSet;                                   // 0x06F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CharacterAnimationSet1P;                                 // 0x0700(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       Driver;                                                  // 0x0708(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AController*                                         DriverController;                                        // 0x0710(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AAIController*                                       AIController;                                            // 0x0718(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DriverCameraStyle;                                       // 0x0720(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent*                                        AudioComponent;                                          // 0x0728(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDriverMount;                                           // 0x0730(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDriverDismount;                                        // 0x0740(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponAbilitySlotKey>                          DisableAbilitySlot;                                      // 0x0750(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FireAbilityName;                                         // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CharacterAttachSocketName;                               // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CameraAttachSocketName;                                  // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      YawRotationLimit;                                        // 0x0778(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchRotationLimit;                                      // 0x077C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTurnLimitSound                                     TurnLimitSound;                                          // 0x0780(0x0020) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class UClass*                                              SiegeInventoryItemClass;                                 // 0x07A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      SiegeInventoryItem;                                      // 0x07A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFireHeld;                                               // 0x07B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YIWC[0x3];                                   // 0x07B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RotationYaw;                                             // 0x07B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseRotationYaw;                                         // 0x07B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8LZK[0x3];                                   // 0x07B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SiegeEngineName;                                         // 0x07BC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ESiegeEngineType                                       SiegeEngineType;                                         // 0x07C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6X8M[0x3];                                   // 0x07C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnReadyToFire;                                           // 0x07C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLoadedAmmo;                                            // 0x07D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       AllowEmoteAnimations;                                    // 0x07E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OMW2[0x7];                                   // 0x07E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       ReplicatedDriver;                                        // 0x07F0(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseMountCombatState;                                    // 0x07F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseDismountCombatState;                                 // 0x07F9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OWG6[0x6];                                   // 0x07FA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMountBlendParams                                   MountBlendParams;                                        // 0x0800(0x00D0) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        ValidCombatStates;                                       // 0x08D0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedToInitializeTBLCharacter;                           // 0x08E0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G5CH[0x3];                                   // 0x08E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GamepadUsePressedTime;                                   // 0x08E4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q959[0x8];                                   // 0x08E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UseKeyRepeat();
		void UseKeyReleased();
		void UseKeyPressed();
		void ServerDismountPressed();
		void OnTurnLockLimit(float DeltaTime, float DeltaYaw);
		void OnRiderCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnRep_Driver();
		void OnDriverSetRagdollPhysics();
		void OnDriverKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnAbilityError(class AActor* Initiator, TBL_EResultCode Code, class AAbilityInvocation* Invocation, const class FName& AttackName, class UClass* ItemClass);
		void MountPressed(class ATBLCharacter* Character);
		class UCombatStateComponent* GetSiegeEngineCombatStateComponent();
		float GetMinChargingToFire();
		class AActor* GetLoadedItem();
		float GetChargingPercent();
		void ForceDismount(TBL_EDismountType DismountType);
		void FocusReleased();
		void FocusPressed();
		void FireReleased();
		void Fire();
		void DismountReleased();
		void DismountPressed();
		bool CanMount(class APawn* Pawn);
		void BroadcastSetRotationYaw(float NewRotationYaw);
		void BroadcastMount(class ATBLCharacter* Character);
		void BroadcastInterpToMountLocation(class ATBLCharacter* Character);
		void BroadcastDismount(TBL_EDismountType DismountType);
		void ArrowCamReleased();
		void ArrowCamPressed();
		void ArrowCamGamePadReleased();
		void ArrowCamGamePadPressed();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Ballista
	 * Size -> 0x00F0 (FullSize[0x09E0] - InheritedSize[0x08F0])
	 */
	class ABallista : public ASiegeEngine
	{
	public:
		class UInteractableComponent*                              Interactable;                                            // 0x08E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilitiesComponent*                                 Abilities;                                               // 0x08F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class URepairableComponent*                                Repairable;                                              // 0x08F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStatsComponent*                                     Stats;                                                   // 0x0900(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnLimitStrength;                                       // 0x0908(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              RemoteViewYaw;                                           // 0x090C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MAQN[0x3];                                   // 0x090D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RotationSpeed;                                           // 0x0910(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bLoaded : 1;                                             // 0x0914(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bRepaired : 1;                                           // 0x0914(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9U33[0x3];                                   // 0x0915(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AmmoAttachSocketName;                                    // 0x0918(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       TurningSoundAKEvent;                                     // 0x0920(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAkAudioEvent*>                               FiringSounds;                                            // 0x0928(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ReloadSound;                                             // 0x0938(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       HealthyMesh;                                             // 0x0940(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       BrokenMesh;                                              // 0x0948(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     BrokenParticle;                                          // 0x0950(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationAsset*                                     BrokenAnimation;                                         // 0x0958(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationBlueprint;                                      // 0x0960(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRepaired;                                              // 0x0968(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FSiegeEngineDamageSounds                            DamageSounds;                                            // 0x0978(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bIsBroken;                                               // 0x0998(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReplicatedIsBroken;                                     // 0x0999(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CHES[0x2];                                   // 0x099A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            LastControlRotation;                                     // 0x099C(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            LastAimRotation;                                         // 0x09A8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int                                                        HorizLockId;                                             // 0x09B4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VertLockId;                                              // 0x09B8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        TurnRateId;                                              // 0x09BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationWeight;                                          // 0x09C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RotationWeightInterpSpeed;                               // 0x09C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QVGD[0x18];                                  // 0x09C8(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetBroken(bool bInBroken);
		void OnRep_RotationSpeed();
		void OnRep_Broken();
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		void OnHealthChanged(float Amount, class AActor* Initiator);
		void OnDamageTaken(const struct FDamageTakenEvent& Event);
		void EventUsePressed(class APawn* InPawn, class UInteractableComponent* InInteractable);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAchievementWorker
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UTBLAchievementWorker : public UObject
	{
	public:
		unsigned char                                              UnknownData_UT0V[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BandageXTimesWorker
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UBandageXTimesWorker : public UTBLAchievementWorker
	{
	public:
		int                                                        NumBandagesRequired;                                     // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInOneLife;                                              // 0x0044(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DM5Y[0x3];                                   // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AchievementID;                                           // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              BandageClass;                                            // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T5CO[0x8];                                   // 0x0060(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayerUsedItem(class AInventoryItem* Item);
		void OnPlayerPossess(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatState
	 * Size -> 0x0130 (FullSize[0x0158] - InheritedSize[0x0028])
	 */
	class UCombatState : public UAssemblyInstance
	{
	public:
		int                                                        Version;                                                 // 0x0028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StateName;                                               // 0x002C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P9GD[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TBL_EMod>                                           Modifiers;                                               // 0x0038(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCombatStateModifiers                               ModifierList;                                            // 0x0048(0x0008) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bIsAttackState : 1;                                      // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsSprintState : 1;                                      // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bRemainInSprint : 1;                                     // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bSprintDecelerate : 1;                                   // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bEndSpawnSpeedBonus : 1;                                 // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsClimbingState : 1;                                    // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanBeRestarted : 1;                                     // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseTurnLock : 1;                                        // 0x0050(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseScaleDirectionalMovement : 1;                        // 0x0051(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanSwitchInventoryItems : 1;                            // 0x0051(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanMountActors : 1;                                     // 0x0051(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bKnockRiderOffHorse : 1;                                 // 0x0051(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bEndWeaponTracers : 1;                                   // 0x0051(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAnimationEnded : 1;                                     // 0x0051(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bSameAttackClash : 1;                                    // 0x0051(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsActive : 1;                                           // 0x0051(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bBeginFire : 1;                                          // 0x0052(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bDidStartAttack : 1;                                     // 0x0052(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bCanInitiateCrouch : 1;                                  // 0x0052(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UBFI[0x1];                                   // 0x0053(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultTime;                                             // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        CrowdControlPriority;                                    // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrowdControlThreshold;                                   // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTurnLimitParams                                    TurnLimit;                                               // 0x0060(0x0018) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FTurnLockParams                                     TurnLock;                                                // 0x0078(0x0024) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_45JY[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FScaleDirectionParams                               ScaleDirectionalMovement;                                // 0x00A0(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		int                                                        PushingPriority;                                         // 0x00C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EKillReason                                            KillReason;                                              // 0x00C4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JPC2[0x3];                                   // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            KnockRiderOffHorseRotation;                              // 0x00C8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MinimumHoldingTime;                                      // 0x00D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAbilityTermination                                    EndAttackReason;                                         // 0x00D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2ODN[0x7];                                   // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        AttackTags;                                              // 0x00E0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartTime;                                               // 0x00F0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSoftRecovery;                                           // 0x00F4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UQO4[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentAnimationLength;                                  // 0x00F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAttackTransition                                      AttackTransition;                                        // 0x00FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_87EF[0x3];                                   // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int>                                                TimerHandles;                                            // 0x0100(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FNextStateTimer>                             NextStateTimers;                                         // 0x0110(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTurnLockState                                      TurnLockState;                                           // 0x0120(0x0018) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FCombatStateSlowdown                                SlowdownState;                                           // 0x0138(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int                                                        ScaleDirectionId;                                        // 0x0148(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SlowdownId;                                              // 0x014C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        PushingId;                                               // 0x0150(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NN43[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (PADDING)

	public:
		void UseItem();
		void SyncDrawStrength();
		void StopFocus();
		void StartRevive(class ATBLCharacter* DownedCharacter);
		void StartReleaseStab();
		void StartHoldAttack();
		void StartHeavyAttack(bool bIsHeavy);
		void StartFocus();
		void StartFire();
		void StartFeint();
		void StartChargeStab();
		void StartAttack();
		bool ShouldUseDrawStrengthModifier();
		bool ShouldSprintDecelerate();
		bool ShouldRemainInSprint();
		void SetWeaponLoaded(bool bLoaded);
		void SetCombatStateTimer(int* OutHandle, const class FScriptDelegate& Delegate, float Time, bool bLooping);
		void Revive();
		void RestOfCurrentState(bool InCanSwitchInventoryItems, bool InCanMountActors);
		void ResetMinimumHoldingTime();
		void ResetAmmoAttachment();
		void ProjectileInterrupted();
		void PlayEquipAnimation(class AInventoryItem* Item);
		bool OverrideCrowdControlEvent(TBL_ECrowdControlCombatState CombatState, TBL_ECrowdControlVariant Variant);
		void OnTurnLockTimeout(float OverTime);
		void OnStartEquip(class AInventoryItem* Item);
		void OnReloadPressed();
		void OnMovementInput(const class FName& Direction);
		void OnJumpPressed();
		void OnItemStackChanged(class AInventoryItem* Item, int Delta);
		void OnFocusReleased();
		void OnFocusPressed();
		void OnFireProjectile();
		void OnEndTurnLock();
		void OnActivateAbility();
		bool NeedsReload();
		void KnockRiderOffHorse();
		bool IsWithinWindow(float WindowTime, bool bFromEndOfState);
		bool IsRiposte();
		bool IsOutOfAmmo();
		bool IsInitialized();
		bool IsHoldingReloadableThrowable();
		bool IsHoldingInput();
		bool IsHoldAttackPressed();
		bool IsHeavy();
		bool IsFocusQueued();
		bool IsFeint();
		bool IsCounter();
		bool IsCombo();
		bool IsCombatStateTimerActive(int Handle);
		bool IsAttackQueued();
		void HoldState(TBL_EHeldBehavior HeldBehavior);
		void HandleDelayedStartAttack();
		void Getup(const class FName& Direction);
		float GetTimeSinceLastQueuedAttack();
		float GetTimeInStatePercent();
		float GetTimeInState();
		float GetSoftRecoveryPercent();
		float GetRemainingTime();
		TBL_EAttackTypeCategory GetQueuedAttackTypeCategory();
		class UAttackType* GetQueuedAttackType();
		class FName GetQueuedAttackName();
		class FName GetQueuedAttackCategory();
		bool GetQueuedAttackCanComboInInterrupt();
		class AActor* GetOwner();
		float GetMinimumHoldingTime();
		float GetMaxDrawStrengthTime();
		float GetDrawStrengthModifier();
		TBL_EAttackTypeCategory GetCurrentAttackTypeCategory();
		class UAttackType* GetCurrentAttackType();
		class FName GetCurrentAttackName();
		class FName GetCurrentAttackCategory();
		class FName GetCombatStateFromQueuedAttack();
		class AInventoryItem* GetCharactersEquippedWeapon();
		void GetCharactersCurrentEmote(bool* IsRootAnimation, struct FPersonalityEmoteTableRow* Emote, int* EmoteId);
		class UTBLCharacterMovement* GetCharacterMovement();
		class ATBLCharacter* GetCharacter();
		class FName GetCancelledCombatState();
		TBL_EAttackTransition GetAttackTransition();
		float GetAbilityPropertyValue(const class FName& PropertyName);
		void EventWasParried(class ATBLCharacter* ParryingCharacter);
		void EventTick(float DeltaSeconds);
		void EventRagdolled();
		void EventParrySuccess(class ATBLCharacter* ParriedCharacter);
		void EventMeleeSuccess(class ATBLCharacter* DamagedCharacter);
		void EventLanded(class ACharacter* InTarget);
		void EventEndState(const class FName& NextState, bool bStartAttack);
		void EventEndAnimation();
		void EventDamageCaused(const struct FDamageTakenEvent& DamageEvent);
		void EventDamage(const struct FDamageTakenEvent& DamageEvent);
		bool EventCannotQueueAttack(class UAttackType* AttackType);
		void EventCancelAttack();
		void EventBeginState(const class FName& PreviousState, float PreviousStateTime, float AnimationLength);
		void EventBeginFire(const class FName& AttackName, bool bHeldQueue);
		bool DisableSprintTurn();
		void CombatStateEvent(const class FName& EventName);
		bool CanUseWeaponsAndSiegeActors();
		bool CanSwitchInventoryItems();
		bool CanSprint();
		bool CannotUseInteractables();
		bool CannotMove();
		bool CanMountActors();
		bool CanJump();
		bool CanInitiateQueuedAttack();
		bool CanInitiateCrouch();
		bool CanFeint();
		bool CanDash();
		bool CanCrouch();
		bool CanComboFromState();
		void CancelAttack();
		bool CanBeCancelled(bool bIsCancelIntoParry);
		bool AutomaticReload();
		void AddTimerHandle(int Handle, const class FName& CombatStateName);
		void ActionQueueAttack();
		void ActionGotoState(const class FName& NextState, float OverrideStateTime, bool bResetStateTime);
		void ActionClearToggleAltAttack();
		void ActionClearHeldAttackQueue();
		void ActionClearAttackQueue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BaseCombatState
	 * Size -> 0x0010 (FullSize[0x0168] - InheritedSize[0x0158])
	 */
	class UBaseCombatState : public UCombatState
	{
	public:
		unsigned char                                              CanReloadInState : 1;                                    // 0x0158(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5L4D[0x3];                                   // 0x0159(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UUserWidget>                          InputHintsWidget;                                        // 0x015C(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NIWC[0x4];                                   // 0x0164(0x0004) MISSED OFFSET (PADDING)

	public:
		void ToggleReloadHint(bool Enable);
		void RemoveReloadHint();
		void Reload();
		bool NeedToReload();
		void ManualReload();
		float GetStaminaPercent();
		void DropHeavyObject();
		bool DidHitInRelease();
		void AddReloadHint();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BaseKillWorker
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UBaseKillWorker : public UTBLAchievementWorker
	{
	public:
		void OnCausedDamage(const struct FDamageTakenEvent& DamageEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BatteringRam
	 * Size -> 0x0080 (FullSize[0x0970] - InheritedSize[0x08F0])
	 */
	class ABatteringRam : public ASiegeEngine
	{
	public:
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x08E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateSynchronization*                         CombatStateSynchronization;                              // 0x08F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateQueue*                                   CombatStateQueue;                                        // 0x08F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CombatStateSet;                                          // 0x0900(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              LeftInteractable;                                        // 0x0908(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              RightInteractable;                                       // 0x0910(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USiegeMountPoint*                                    LeftMountPoint;                                          // 0x0918(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USiegeMountPoint*                                    RightMountPoint;                                         // 0x0920(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         DamageScale;                                             // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargePercent;                                           // 0x0930(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargeTime;                                              // 0x0934(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TwoPlayerChargeBonus;                                    // 0x0938(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AHLQ[0x4];                                   // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicsAsset*                                       StationaryPhysAsset;                                     // 0x0940(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhysicsAsset*                                       PushablePhysAsset;                                       // 0x0948(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPushableComponent*                                  PushableComponent;                                       // 0x0950(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChargeChanged;                                         // 0x0958(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A4M5[0x8];                                   // 0x0968(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_ChargePercent();
		void OnPushableActivated(bool bIsActive);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnCharacterMount(class ATBLCharacter* Character);
		int GetNumCharacters();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BlockedDamage
	 * Size -> 0x0010 (FullSize[0x0180] - InheritedSize[0x0170])
	 */
	class UBlockedDamage : public UAction
	{
	public:
		float                                                      BaseDamage;                                              // 0x0170(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1TI2[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageSource*                                       DamageType;                                              // 0x0178(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BlockProjectileWorker
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UBlockProjectileWorker : public UTBLAchievementWorker
	{
	public:
		class FString                                              AchievementID;                                           // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        RequiredHits;                                            // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QQLH[0xC];                                   // 0x0054(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnBlockedAttack(TBL_EDefenderBlockedPolicy BlockPolicy, class ATBLCharacter* AttackingCharacter, bool bProjectileAttack);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BlueprintDebugMenuComponent
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class UBlueprintDebugMenuComponent : public UTBLComponent
	{
	public:
		class UClass*                                              WidgetClass;                                             // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BoneList
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UBoneList : public UDataAsset
	{
	public:
		TArray<class FName>                                        Bones;                                                   // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BotSpawnOverrides
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UBotSpawnOverrides : public UObject
	{
	public:
		class UDataTable*                                          Table;                                                   // 0x0028(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ShapeTargetMethod
	 * Size -> 0x0018 (FullSize[0x01C8] - InheritedSize[0x01B0])
	 */
	class UShapeTargetMethod : public UAbilityTargetMethod
	{
	public:
		int                                                        Version;                                                 // 0x01B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_829Y[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<Engine_ECollisionChannel>                           TargetObjectTypes;                                       // 0x01B8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BoxTargetMethod
	 * Size -> 0x0038 (FullSize[0x0200] - InheritedSize[0x01C8])
	 */
	class UBoxTargetMethod : public UShapeTargetMethod
	{
	public:
		bool                                                       bTargetSelf;                                             // 0x01C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseControllerRotation;                                  // 0x01C9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseMountRotation;                                       // 0x01CA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZGL7[0x1];                                   // 0x01CB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            RotationOffset;                                          // 0x01CC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FVector                                             BoxExtend;                                               // 0x01D8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BoxOffset;                                               // 0x01E4(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DelayFinishTime;                                         // 0x01F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		Engine_ECollisionChannel                                   TargetChannel;                                           // 0x01F4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETargetVisibilityCheck                                 CheckVisibility;                                         // 0x01F5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U4CS[0xA];                                   // 0x01F6(0x000A) MISSED OFFSET (PADDING)

	public:
		void DelayFinish();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BoxTracers
	 * Size -> 0x01B0 (FullSize[0x0210] - InheritedSize[0x0060])
	 */
	class UBoxTracers : public UTracerShape
	{
	public:
		class FName                                                BoxComponentName;                                        // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        IgnoreParryDepth;                                        // 0x0068(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCustomSocket;                                        // 0x006C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GMMW[0x3];                                   // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CustomSocketName;                                        // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CustomSocketExtents;                                     // 0x0078(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DZBI[0xC];                                   // 0x0084(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          LocalBoxTransform;                                       // 0x0090(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int                                                        CurrentIndex;                                            // 0x00C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3KTV[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTransform>                                  TracerTransforms;                                        // 0x00C8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     TracerDirection;                                         // 0x00D8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             BoxExtents;                                              // 0x00E8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AYHM[0x4];                                   // 0x00F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       BoxComponent;                                            // 0x00F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsValid;                                                // 0x0100(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanClash;                                               // 0x0101(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_63IE[0x2];                                   // 0x0102(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHitResult                                          DelayHit;                                                // 0x0104(0x0088) IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      DelayHitTime;                                            // 0x018C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDelayedHit;                                             // 0x0190(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHorizontalBackSwingDone;                              // 0x0191(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsVerticalBackSwingDone;                                // 0x0192(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStabWindupDone;                                       // 0x0193(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LCMX[0x7C];                                  // 0x0194(0x007C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BrawlAlwaysOnMusicManager
	 * Size -> 0x0050 (FullSize[0x0340] - InheritedSize[0x02F0])
	 */
	class ABrawlAlwaysOnMusicManager : public ATBLActor
	{
	public:
		class UAkComponent*                                        AkComponent;                                             // 0x02F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EBrawlAlwaysOnMusicState                               BrawlAlwaysOnMusicState;                                 // 0x02F8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TBL_EBrawlAlwaysOnMusicState                               PreviousBrawlAlwaysOnMusicState;                         // 0x02F9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       IsMusicPlaying;                                          // 0x02FA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7C9M[0x5];                                   // 0x02FB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       PlayJukeBoxEvent;                                        // 0x0300(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       StopJukeBoxEvent;                                        // 0x0308(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       RecordScartch;                                           // 0x0310(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       WaitingToStart;                                          // 0x0318(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X0AM[0x10];                                  // 0x0320(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int>                                                RecentSongs;                                             // 0x0330(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetCurrentMusicState(TBL_EBrawlAlwaysOnMusicState NewState);
		void OnRep_BrawlAlwaysOnMusicState();
		TBL_EBrawlAlwaysOnMusicState GetCurrentMusicState();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BreakableActor
	 * Size -> 0x0018 (FullSize[0x0308] - InheritedSize[0x02F0])
	 */
	class ABreakableActor : public ATBLActor
	{
	public:
		class USceneComponent*                                     SceneComponent;                                          // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBreakableComponent*                                 BreakableComponent;                                      // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStatsComponent*                                     StatsComponent;                                          // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BreakableComponent
	 * Size -> 0x00A8 (FullSize[0x01B0] - InheritedSize[0x0108])
	 */
	class UBreakableComponent : public UActorComponent
	{
	public:
		float                                                      StartingHealth;                                          // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxHealth;                                               // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageTaken;                                           // 0x0110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKilled;                                                // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBreakableThresholdReached;                             // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UStatsComponent>                      StatsComponent;                                          // 0x0140(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UTeamOwnershipComponent>              TeamOwnershipComponent;                                  // 0x0148(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UTBLGameScoringComponent>             GameScoringComponent;                                    // 0x0150(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               FriendlyTeam;                                            // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4CUW[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBreakableThreshold>                         ThresholdsWithObjects;                                   // 0x0160(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStageActorAction                                   StageActorAction;                                        // 0x0170(0x0030) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FVector                                             FocalPointOffset;                                        // 0x01A0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ERSW[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetHealth(float InHealth);
		void SetFriendlyTeam(TBL_EFaction InFriendlyTeam);
		void Killed(const struct FDeathDamageTakenEvent& Event);
		void HealthStatChanged(float Amount, class AActor* Initiator);
		void Damaged(const struct FDamageTakenEvent& Event);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BurnableComponent
	 * Size -> 0x0040 (FullSize[0x0148] - InheritedSize[0x0108])
	 */
	class UBurnableComponent : public UActorComponent
	{
	public:
		TWeakObjectPtr<class UStatsComponent>                      Stats;                                                   // 0x0108(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class UConditionsComponent>                 ConditionsComponent;                                     // 0x0110(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       DamageSource;                                            // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              FlammableStaticMeshComponentClass;                       // 0x0120(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SphereCollisionRadius;                                   // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XGDF[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDamageAppliedToFlammableComponent;                     // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      PercentHealth;                                           // 0x0140(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActorBoundingBoxTweak;                                   // 0x0144(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void HandleOwnerDamageTaken(const struct FDamageTakenEvent& Event);
		float GetTimeUntilBurnedDown();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_ArrowCam
	 * Size -> 0x0078 (FullSize[0x00C0] - InheritedSize[0x0048])
	 */
	class UCameraModifier_ArrowCam : public UCameraModifier
	{
	public:
		class AInventoryItem*                                      Projectile;                                              // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bArrowCamPressed;                                        // 0x0050(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G2S6[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     InputComponent;                                          // 0x0058(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SmoothOffset;                                            // 0x0060(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            SmoothRotation;                                          // 0x006C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AJEK[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          TransformOnCollision;                                    // 0x0080(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      TimeAfterCollision;                                      // 0x00B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SQKH[0xC];                                   // 0x00B4(0x000C) MISSED OFFSET (PADDING)

	public:
		void UpdateCharacterMesh();
		void ArrowCamReleased();
		void ArrowCamPressed();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_BlendInRotation
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UCameraModifier_BlendInRotation : public UCameraModifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_CancelRotation
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UCameraModifier_CancelRotation : public UCameraModifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_DeathCam
	 * Size -> 0x00F0 (FullSize[0x0138] - InheritedSize[0x0048])
	 */
	class UCameraModifier_DeathCam : public UCameraModifier
	{
	public:
		struct FDeathCamSettings                                   DeathCamSettings_Immediate;                              // 0x0048(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FDeathCamSettings                                   DeathCamSettings_FromDeathAnimation;                     // 0x0088(0x0040) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       KilledCharacter;                                         // 0x00C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentDurationTime;                                     // 0x00D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      PanOutDurationTime;                                      // 0x00D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             SavedCameraDir;                                          // 0x00D8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             DeadActorPosition;                                       // 0x00E4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             PrevCameraLocation;                                      // 0x00F0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRotator                                            PrevCameraRotation;                                      // 0x00FC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      CurrentDistance;                                         // 0x0108(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bWasBlocked;                                             // 0x010C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SUGS[0x3];                                   // 0x010D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            PrevAccumInputRotation;                                  // 0x0110(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FRotator                                            AccumInputRotation;                                      // 0x011C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FVector                                             KilledFocusLocation;                                     // 0x0128(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseImmediateSettings;                                   // 0x0134(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MIHG[0x3];                                   // 0x0135(0x0003) MISSED OFFSET (PADDING)

	public:
		void UpdateOnCinematicStateChanged(const struct FGameplayTag& PreviousStateTag, class UCinematicState* PreviousState, const struct FGameplayTag& NewStateTag, class UCinematicState* NewState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_DeathCam1P
	 * Size -> 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
	 */
	class UCameraModifier_DeathCam1P : public UCameraModifier
	{
	public:
		float                                                      YawRotationLimit;                                        // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchRotationLimit;                                      // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnLimitStrength;                                       // 0x0050(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DR98[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDeathCamContext_1P                                 Context;                                                 // 0x0058(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            CameraOffset;                                            // 0x0060(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		int                                                        TurnRateId;                                              // 0x006C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        HorizLockId;                                             // 0x0070(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        VertLockId;                                              // 0x0074(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VAB8[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_FollowAnimation
	 * Size -> 0x00E0 (FullSize[0x0128] - InheritedSize[0x0048])
	 */
	class UCameraModifier_FollowAnimation : public UCameraModifier
	{
	public:
		struct FFollowAnimationBlend                               BlendInParams;                                           // 0x0048(0x003C) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FFollowAnimationBlend                               BlendOutParams;                                          // 0x0084(0x003C) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FFollowAnimationBlend                               CancelBlendOutParams;                                    // 0x00C0(0x003C) Edit, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bFollowPitch;                                            // 0x00FC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFollowYaw;                                              // 0x00FD(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N11E[0x2];                                   // 0x00FE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       TargetCharacter;                                         // 0x0100(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrevSocketPitch;                                         // 0x0108(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PrevSocketYaw;                                           // 0x010C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            PrevBlendRot;                                            // 0x0110(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      AnimationPitch;                                          // 0x011C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimationYaw;                                            // 0x0120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SMHU[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (PADDING)

	public:
		bool ShouldBlend(const struct FRotator& ControlRot, const struct FRotator& SocketRot);
		void Cancel();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_TurnLock
	 * Size -> 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
	 */
	class UCameraModifier_TurnLock : public UCameraModifier
	{
	public:
		class FScriptMulticastDelegate                             OnTurnLockLimit;                                         // 0x0048(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       Character;                                               // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              UseActorRotation;                                        // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     UseComponentRotation;                                    // 0x0068(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            StartingRotation;                                        // 0x0070(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MaxAngle;                                                // 0x007C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_HorizontalLock
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class UCameraModifier_HorizontalLock : public UCameraModifier_TurnLock
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_LockCamera
	 * Size -> 0x05D8 (FullSize[0x0620] - InheritedSize[0x0048])
	 */
	class UCameraModifier_LockCamera : public UCameraModifier
	{
	public:
		unsigned char                                              UnknownData_5AMF[0x8];                                   // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMinimalViewInfo                                    CameraPOV;                                               // 0x0050(0x05D0) Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_Offset
	 * Size -> 0x0048 (FullSize[0x0090] - InheritedSize[0x0048])
	 */
	class UCameraModifier_Offset : public UCameraModifier
	{
	public:
		struct FVector                                             LocationOffset;                                          // 0x0048(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationOffset;                                          // 0x0054(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class AActor*                                              AttachToActor;                                           // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              AttachToMesh;                                            // 0x0068(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAttachToProjectile;                                     // 0x0070(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MAQX[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AInventoryItem*                                      LastProjectile;                                          // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AttachToBone;                                            // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideRotation;                                       // 0x0088(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseAttachRotation;                                      // 0x0089(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F8XP[0x6];                                   // 0x008A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_SpawnFadeOut
	 * Size -> 0x05F8 (FullSize[0x0640] - InheritedSize[0x0048])
	 */
	class UCameraModifier_SpawnFadeOut : public UCameraModifier
	{
	public:
		float                                                      StartTime;                                               // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Duration;                                                // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMinimalViewInfo                                    CameraPOV;                                               // 0x0050(0x05D0) Protected, NativeAccessSpecifierProtected
		class UInputComponent*                                     InputComponent;                                          // 0x0620(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveForwardInput;                                        // 0x0628(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveRightInput;                                          // 0x062C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MoveUpInput;                                             // 0x0630(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxSpeed;                                                // 0x0634(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATBLCharacter>                        CachedFollowTarget;                                      // 0x0638(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateCharacterMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_TurnLimit
	 * Size -> 0x0050 (FullSize[0x0098] - InheritedSize[0x0048])
	 */
	class UCameraModifier_TurnLimit : public UCameraModifier
	{
	public:
		float                                                      LeftTurnRatePercent;                                     // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RightTurnRatePercent;                                    // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpTurnRatePercent;                                       // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DownTurnRatePercent;                                     // 0x0054(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LeftTurnLimit;                                           // 0x0058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RightTurnLimit;                                          // 0x005C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UpTurnLimit;                                             // 0x0060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DownTurnLimit;                                           // 0x0064(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorizontalDirection;                                     // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HorizontalInitialDirection;                              // 0x006C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        HorizontalChangedDirectionCount;                         // 0x0070(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalDirection;                                       // 0x0074(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VerticalInitialDirection;                                // 0x0078(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VerticalChangedDirectionCount;                           // 0x007C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SkippedFrameTime;                                        // 0x0080(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LeftTurnRateEndSpeed;                                    // 0x0084(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RightTurnRateEndSpeed;                                   // 0x0088(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      UpTurnRateEndSpeed;                                      // 0x008C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DownTurnRateEndSpeed;                                    // 0x0090(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CBVR[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (PADDING)

	public:
		void SmoothTurnLimitEnding(float* CurrentTurnLimit, float* EndSpeed, float TargetTurnLimit, float DeltaTime);
		float CalcTurnLimit(float InPercent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_VerticalLock
	 * Size -> 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
	 */
	class UCameraModifier_VerticalLock : public UCameraModifier_TurnLock
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CameraModifier_Zoom
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UCameraModifier_Zoom : public UCameraModifier
	{
	public:
		float                                                      ZoomedFOV;                                               // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BZYS[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Condition
	 * Size -> 0x0108 (FullSize[0x0148] - InheritedSize[0x0040])
	 */
	class UCondition : public UTBLObject
	{
	public:
		bool                                                       bLogEvents;                                              // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTreatInitiatorAsTarget;                                 // 0x0041(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JQPQ[0x6];                                   // 0x0042(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FActionContext                                      Context;                                                 // 0x0048(0x00E0) BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UObject>                              Initiator;                                               // 0x0128(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UObject>                              Target;                                                  // 0x0130(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             TargetLocation;                                          // 0x0138(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SHXR[0x4];                                   // 0x0144(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CanDash
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UCanDash : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CanDropItem
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UCanDropItem : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CanJump
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UCanJump : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CanSwitchInventoryItem
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UCanSwitchInventoryItem : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CanUseItem
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UCanUseItem : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CaptureVolume
	 * Size -> 0x0040 (FullSize[0x0330] - InheritedSize[0x02F0])
	 */
	class ACaptureVolume : public ATBLActor
	{
	public:
		unsigned char                                              UnknownData_5252[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       CaptureBox;                                              // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   CaptureCapsule;                                          // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PlayersInCaptureVolumeChanged;                           // 0x0308(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<class ATBLCharacter*>                               PlayersInCaptureVolume;                                  // 0x0318(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCaptureBoxComponent;                                 // 0x0328(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCaptureCapsuleComponent;                             // 0x0329(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECaptureVolumeControlType                              CapturePointRule;                                        // 0x032A(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECapturePointState                                     CurrentCaptureState;                                     // 0x032B(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECapturePointState                                     PreviousCaptureState;                                    // 0x032C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0N5S[0x3];                                   // 0x032D(0x0003) MISSED OFFSET (PADDING)

	public:
		void RemovePlayerFromCapturePoint(class ATBLCharacter* Player);
		void RefreshActorsInCaptureZone();
		bool PlayerSatisfiesCaptureRequirments(class ATBLCharacter* Player);
		void OnTrackedCharacterKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnTrackedCharacterDestroyed(class AActor* DestroyedActor);
		void OnRep_CaptureState();
		void OnCaptureStateNeutralizing();
		void OnCaptureStateIdle();
		void OnCaptureStateContested();
		void OnCaptureStateCapturing();
		void OnCaptureStateCaptured();
		class ATBLTeam* GetControllingTeam(bool* IsTie);
		void EndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void ClientEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void ClientBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void BeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void AddPlayerToCapturePoint(class ATBLCharacter* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CarryablePlayerComponent
	 * Size -> 0x0078 (FullSize[0x0180] - InheritedSize[0x0108])
	 */
	class UCarryablePlayerComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_PXZC[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              CarryableItemClass;                                      // 0x0118(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RelativeCarryRotation;                                   // 0x0120(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            RelativeThrownRotation;                                  // 0x012C(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      YawRotationLimit;                                        // 0x0138(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanPickupFromDowned;                                    // 0x013C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanKillOnThrow;                                         // 0x013D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanRevive;                                              // 0x013E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UUX7[0x1];                                   // 0x013F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_AInventoryItem                          CarryableItem;                                           // 0x0140(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLCharacterBase*                                   OwnerCharacter;                                          // 0x0158(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLCharacter*                                       ParentCharacter;                                         // 0x0160(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInteractableComponent*                              InteractableComponent;                                   // 0x0168(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        HorizLockId;                                             // 0x0170(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBeingHeld;                                            // 0x0174(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHeldByEnemy;                                            // 0x0175(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWasThrown;                                              // 0x0176(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnRootTransformUpdate;                                  // 0x0177(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VZ76[0x8];                                   // 0x0178(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartPickup();
		void OnUseReleased(class APawn* Pawn, float UseTime);
		void OnUseHeld(class APawn* Pawn, float UseTime, class UInteractableComponent* Interactable);
		void OnUse(class APawn* Pawn, class UInteractableComponent* Interactable);
		void OnThrown(class AInventoryItem* Item, class ATBLCharacter* Character, const struct FTransform& Transform);
		void OnSpawnFakeClient(class AInventoryItem* FakeClient);
		void OnSetAttached(bool bAttached);
		void OnRootTransformUpdated();
		void OnRep_CarryableItem();
		void OnInteractableEnabled(bool bEnabled);
		void OnDropped(class AInventoryItem* Item, class ATBLCharacter* Character, const struct FTransform& Transform);
		void OnCharacterKilled(const struct FDeathDamageTakenEvent& Event);
		void OnCharacterDestroyed(class AActor* Actor);
		void OnCarryableAnimationEvent(const class FName& EventName);
		bool CanPickup(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Catapult
	 * Size -> 0x0240 (FullSize[0x0B30] - InheritedSize[0x08F0])
	 */
	class ACatapult : public ASiegeEngine
	{
	public:
		class FScriptMulticastDelegate                             OnCatapultStateChanged;                                  // 0x08F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCatapultFireNoDriver;                                  // 0x0900(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UInteractableComponent*                              MountInteractable;                                       // 0x0910(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilitiesComponent*                                 Abilities;                                               // 0x0918(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPushingComponent*                                   PushingComponent;                                        // 0x0920(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStatsComponent*                                     Stats;                                                   // 0x0928(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class URepairableComponent*                                Repairable;                                              // 0x0930(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PushingPriority;                                         // 0x0938(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BaseTurnRate;                                            // 0x093C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargePercent;                                           // 0x0940(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PKF7[0x4];                                   // 0x0944(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChargePercentChanged;                                  // 0x0948(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      MinChargeTime;                                           // 0x0958(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RemainingChargeTime;                                     // 0x095C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        ChargeIncrements;                                        // 0x0960(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinChargeToFire;                                         // 0x0964(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideDrawStrength;                                   // 0x0968(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A363[0x3];                                   // 0x0969(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDrawStrength;                                         // 0x096C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDrawStrength;                                         // 0x0970(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LoadedAmmoSocketName;                                    // 0x0974(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoLoadFacingAngle;                                     // 0x097C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReloadHeld;                                             // 0x0980(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFocusHeld;                                              // 0x0981(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFiring;                                               // 0x0982(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCharging;                                             // 0x0983(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsUnwinding;                                            // 0x0984(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2KY8[0x3];                                   // 0x0985(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreviousChargeIncrement;                                 // 0x0988(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      NextChargeIncrement;                                     // 0x098C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      LoadedAmmo;                                              // 0x0990(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      LastLoadedAmmo;                                          // 0x0998(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ATBLPlayerState>                      LoadedAmmoInstigator;                                    // 0x09A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      WhitelistAmmoItemTypes;                                  // 0x09A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AInventoryItem*>                              AttachedItems;                                           // 0x09B8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ItemLoadedSound;                                         // 0x09C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       PlayReloadLoopSound;                                     // 0x09D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       StopReloadLoopSound;                                     // 0x09D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       PlayTurnLoopSound;                                       // 0x09E0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       StopTurnLoopSound;                                       // 0x09E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       MountSound;                                              // 0x09F0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ReadyToFireSound;                                        // 0x09F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAkAudioEvent*>                               FiringSounds;                                            // 0x0A00(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FProjectileSounds                                   CatapultProjectileSoundOverride;                         // 0x0A10(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FSiegeEngineDamageSounds                            DamageSounds;                                            // 0x0A38(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       HealthyMesh;                                             // 0x0A58(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       BrokenMesh;                                              // 0x0A60(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     BrokenParticle;                                          // 0x0A68(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationAsset*                                     BrokenAnimation;                                         // 0x0A70(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationBlueprint;                                      // 0x0A78(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhysicsAsset*                                       StationaryPhysAsset;                                     // 0x0A80(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhysicsAsset*                                       PushablePhysAsset;                                       // 0x0A88(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPhysicsAsset*                                       DestroyedPhysAsset;                                      // 0x0A90(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              IsBeingRotated;                                          // 0x0A98(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SIMT[0x7];                                   // 0x0A99(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRepaired;                                              // 0x0AA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RIBU[0x8];                                   // 0x0AB0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            LastAimRotation;                                         // 0x0AB8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int                                                        HorizLockId;                                             // 0x0AC4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VertLockId;                                              // 0x0AC8(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PYTU[0x4];                                   // 0x0ACC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FProjectileSounds                                   LoadedAmmoProjectileBackupSounds;                        // 0x0AD0(0x0028) NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class ATBLCharacter*>                               OverlappingCharacters;                                   // 0x0AF8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_ECatapultState                                         CatapultState;                                           // 0x0B08(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsBroken;                                               // 0x0B09(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReplicatedIsBroken;                                     // 0x0B0A(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CXOJ[0x5];                                   // 0x0B0B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class ATBLCharacter>                        BlockedAutoLoadCharacter;                                // 0x0B10(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5PQW[0x18];                                  // 0x0B18(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetCatapultState(TBL_ECatapultState State);
		void SetBroken(bool bInBroken);
		void ServerReloadReleased();
		void ServerReloadPressed();
		void ServerFireReleased();
		void ServerFirePressed();
		void RemoveAttachedItem(class AInventoryItem* Item);
		void ReloadReleased();
		void ReloadPressed();
		void ReadyToFire();
		void OnRep_RotationSpeed();
		void OnRep_LoadedAmmo();
		void OnRep_ChargePercent();
		void OnRep_CatapultState(TBL_ECatapultState PreviousState);
		void OnRep_Broken();
		void OnReloadCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		void OnPushableActivated(bool IsActive);
		void OnLoadVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
		void OnLoadVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		void OnItemPickup(class AInventoryItem* Item, bool IsAddedToInventory);
		void OnHealthChanged(float Amount, class AActor* Initiator);
		void OnFire();
		void OnDamageTaken(const struct FDamageTakenEvent& Event);
		void K2_OnCatapultStateChanged(TBL_ECatapultState State, TBL_ECatapultState PreviousState);
		bool IsPushable();
		bool IsPackaged();
		bool IsInteractable();
		bool IsCatapultRock(class AInventoryItem* Item);
		class UPrimitiveComponent* GetSpoonCollision();
		class UPrimitiveComponent* GetReloadCollision();
		class UPrimitiveComponent* GetLoadVolume();
		void EventUsePressed(class APawn* InPawn, class UInteractableComponent* InInteractable);
		void ClientOnFire();
		void CatapultLoadItem(class AInventoryItem* Item, class ATBLCharacter* Initiator);
		bool CanLoad(class AInventoryItem* Item);
		void BroadcastFireNoDriver();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateActivationMethod
	 * Size -> 0x0040 (FullSize[0x00D0] - InheritedSize[0x0090])
	 */
	class UCombatStateActivationMethod : public UAbilityActivationMethod
	{
	public:
		class FName                                                CostExceededGotoState;                                   // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        CostExceededInterruptableStates;                         // 0x0098(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AbilitiesTableRow;                                       // 0x00A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      InventoryItem;                                           // 0x00B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                KeyBind;                                                 // 0x00B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        EmoteId;                                                 // 0x00C0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCombatStateAttackStarted;                               // 0x00C4(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAnimationDataTableNotFound;                             // 0x00C5(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LW65[0xA];                                   // 0x00C6(0x000A) MISSED OFFSET (PADDING)

	public:
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ChargingActivationMethod
	 * Size -> 0x0018 (FullSize[0x00E8] - InheritedSize[0x00D0])
	 */
	class UChargingActivationMethod : public UCombatStateActivationMethod
	{
	public:
		TArray<class UAction*>                                     ActivationActions;                                       // 0x00D0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		double                                                     LastInitiatorActionsTime;                                // 0x00E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CatapultActivationMethod
	 * Size -> 0x0000 (FullSize[0x00E8] - InheritedSize[0x00E8])
	 */
	class UCatapultActivationMethod : public UChargingActivationMethod
	{
	public:
		void OnAnimNotifyCatapultFire(class UTBLCatapultAnimInstance* AnimInstance);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CompositeTargetMethod
	 * Size -> 0x0050 (FullSize[0x0200] - InheritedSize[0x01B0])
	 */
	class UCompositeTargetMethod : public UAbilityTargetMethod
	{
	public:
		TArray<class UAbilityTargetMethod*>                        StaticChildren;                                          // 0x01B0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAbilityTargetMethod*>                        Children;                                                // 0x01C0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreChildrenInitiateRequirements;                     // 0x01D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0FP0[0x7];                                   // 0x01D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAbilityTargetMethod*>                        DynamicChildren;                                         // 0x01D8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAbilityTargetMethod*>                        RunningChildren;                                         // 0x01E8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPendingFinish;                                          // 0x01F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJ4N[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (PADDING)

	public:
		void TargetUsingMethod(class UAbilityTargetMethod* TargetMethod, const struct FAbilityInitiationParams& InInitiationParams, bool bLocal, int InMultiTargetMethodIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ProjectileTargetMethod
	 * Size -> 0x0130 (FullSize[0x0330] - InheritedSize[0x0200])
	 */
	class UProjectileTargetMethod : public UCompositeTargetMethod
	{
	public:
		TArray<class UAction*>                                     ProjectileSpawnedActions;                                // 0x0200(0x0010) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ProjectileName;                                          // 0x0210(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilityTargetMethod*                                HitTargetMethod;                                         // 0x0218(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHitDeactivatesInvocation;                               // 0x0220(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AI5V[0x3];                                   // 0x0221(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AInventoryItem>                       Projectile;                                              // 0x0224(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTBLProjectileMovementComponent>      ProjectileMovement;                                      // 0x022C(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AllowedClientSpawnLocationErrorSq;                       // 0x0234(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWantsToFinish;                                          // 0x0238(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KRFX[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHitResult>                                  DelayedCharacterHits;                                    // 0x0240(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FHitResult>                                  DelayedNonCharacterHits;                                 // 0x0250(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FHitResult>                                  DelayedCharacterHitsCosmetic;                            // 0x0260(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FHitResult>                                  DelayedNonCharacterHitsCosmetic;                         // 0x0270(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UProjectileCollision*>                        CollisionHandlers;                                       // 0x0280(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H7K0[0x18];                                  // 0x0290(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AInventoryItem>                       CosmeticProjectile;                                      // 0x02A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTBLProjectileMovementComponent>      CosmeticProjectileMovement;                              // 0x02B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTBLProjectileMovementComponent>      FakeClientProjectile;                                    // 0x02B8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class UTBLProjectileMovementComponent>, TWeakObjectPtr<class UTBLProjectileMovementComponent>> FakeClientTargetMap;                                     // 0x02C0(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TWeakObjectPtr<class USceneComponent>                      FakeClientUpdatedComponent;                              // 0x0310(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastFakeClientTime;                                      // 0x0318(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FakeClientTotalTime;                                     // 0x031C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpawnFakeProjectileOnServerRep;                         // 0x0320(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U2T1[0x3];                                   // 0x0321(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             FakeClientInterpOffset;                                  // 0x0324(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateFakeClientProjectile();
		class AInventoryItem* SpawnProjectile(const struct FTransform& SpawnTransform, bool bFakeClient, class AActor* TargetProj, int InvocationId);
		void OnStop(const struct FHitResult& Hit);
		void OnProjectileMovementFinished();
		void OnProjectileDisabled();
		void OnProjectileDestroyedCosmetic(class AActor* DestroyedActor);
		void OnProjectileDestroyed(class AActor* DestroyedActor);
		void OnProjectileBeginPlay(class AInventoryItem* Item);
		void OnHitCosmetic(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnBeginOverlapCosmetic(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& HitResult);
		void OnBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		void HandlePassiveShieldHit(class AInventoryItem* Shield, class ATBLCharacter* HitCharacter, const struct FHitResult& Hit);
		bool HandleParries(const struct FHitResult& Hit, class ATBLCharacter* HitCharacter);
		void HandleDelayedHitsCosmetic();
		void HandleDelayedHits();
		void AddDelayedHit(const struct FHitResult& Hit);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CatapultTargetMethod
	 * Size -> 0x0000 (FullSize[0x0330] - InheritedSize[0x0330])
	 */
	class UCatapultTargetMethod : public UProjectileTargetMethod
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ChannelingActivationMethod
	 * Size -> 0x0010 (FullSize[0x00A0] - InheritedSize[0x0090])
	 */
	class UChannelingActivationMethod : public UAbilityActivationMethod
	{
	public:
		bool                                                       bHasClientMovement;                                      // 0x0090(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E92V[0xF];                                   // 0x0091(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CharacterMountableActor
	 * Size -> 0x00A0 (FullSize[0x0990] - InheritedSize[0x08F0])
	 */
	class ACharacterMountableActor : public ASiegeEngine
	{
	public:
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x08E8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateSynchronization*                         CombatStateSynchronization;                              // 0x08F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateQueue*                                   CombatStateQueue;                                        // 0x08F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CombatStateSet;                                          // 0x0900(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              LeftInteractable;                                        // 0x0908(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              RightInteractable;                                       // 0x0910(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USiegeMountPoint*                                    LeftMountPoint;                                          // 0x0918(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USiegeMountPoint*                                    RightMountPoint;                                         // 0x0920(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ChargeToDamageScale;                                     // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargePercent;                                           // 0x0930(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargeTime;                                              // 0x0934(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TwoPlayerChargeBonus;                                    // 0x0938(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AD7J[0x4];                                   // 0x093C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicsAsset*                                       PhysAsset;                                               // 0x0940(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChargeChanged;                                         // 0x0948(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMountableActorKilledAnimComplete;                      // 0x0958(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                CharacterMountableActorAnimName;                         // 0x0968(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AbilityChargeName;                                       // 0x0970(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AbilityAttackName;                                       // 0x0978(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinimumChargePercent;                                    // 0x0980(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3U9F[0xC];                                   // 0x0984(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnRep_ChargePercent();
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnCharacterMount(class ATBLCharacter* Character);
		bool NeedsTick();
		int GetNumCharacters();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HollowNavBlocker
	 * Size -> 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
	 */
	class AHollowNavBlocker : public AActor
	{
	public:
		void Deactivate();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CharacterPerformanceTestSettings
	 * Size -> 0x0048 (FullSize[0x02A0] - InheritedSize[0x0258])
	 */
	class ACharacterPerformanceTestSettings : public AActor
	{
	public:
		TArray<struct FCharacterPerformanceTestSingleSetting>      Tests;                                                   // 0x0258(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              SeriesName;                                              // 0x0268(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        WaitForCharacterCount;                                   // 0x0278(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EMU1[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      PreTestCommands;                                         // 0x0280(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      StartTestCommands;                                       // 0x0290(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CharacterVOAKBank
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UCharacterVOAKBank : public UPrimaryDataAsset
	{
	public:
		TBL_EAudioPersonalityType                                  Tag;                                                     // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4C81[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioBank*                                        AudioBank;                                               // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ChatInputEditableTextBox
	 * Size -> 0x0000 (FullSize[0x0A38] - InheritedSize[0x0A38])
	 */
	class UChatInputEditableTextBox : public UEditableTextBox
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ChatLineBinding
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class UChatLineBinding : public UPropertyBinding
	{
	public:
		struct FChatLine GetValue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ChatMessageText
	 * Size -> 0x00C0 (FullSize[0x01C8] - InheritedSize[0x0108])
	 */
	class UChatMessageText : public UWidget
	{
	public:
		TArray<class FName>                                        ChatTypeStyles;                                          // 0x0108(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FText>                                        ChatFormatStrings;                                       // 0x0118(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FChatLine                                           ChatLine;                                                // 0x0128(0x0050) Edit, NativeAccessSpecifierPublic
		class FText                                                TimestampFormatString;                                   // 0x0178(0x0018) NativeAccessSpecifierPublic
		class FScriptDelegate                                      ChatLineDelegate;                                        // 0x0190(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		float                                                      WrapWidth;                                               // 0x01A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRenderTimestamps;                                       // 0x01A4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JWCV[0x3];                                   // 0x01A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      bRenderTimestampsDelegate;                               // 0x01A8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CWCY[0x10];                                  // 0x01B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ChatWidget
	 * Size -> 0x0088 (FullSize[0x0190] - InheritedSize[0x0108])
	 */
	class UChatWidget : public UWidget
	{
	public:
		class FScriptMulticastDelegate                             OnAddedChatLine;                                         // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterInputMode;                                        // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnChangedAlwaysVisible;                                  // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEnterLastChannelInputMode;                             // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bShowTimestamps;                                         // 0x0148(0x0001) BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysVisible;                                          // 0x0149(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseAbbreviatedChatHistory;                              // 0x014A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9GZB[0x1];                                   // 0x014B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      bUseAbbreviatedChatHistoryDelegate;                      // 0x014C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		int                                                        SecondsToConsiderMessageFresh;                           // 0x015C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateRowEvent;                                      // 0x0160(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HH95[0x20];                                  // 0x0170(0x0020) MISSED OFFSET (PADDING)

	public:
		void UsedChat();
		void SetAlwaysVisible(bool InAlwaysVisible);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CinematicAnimationRemapping
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UCinematicAnimationRemapping : public UObject
	{
	public:
		TArray<struct FCinematicAnimationRemapSet>                 RemapSets;                                               // 0x0028(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FString>                                      AutomapWeaponNames;                                      // 0x0038(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UAnimSequenceBase*, int>                        AnimToRemapSetsIndex;                                    // 0x0048(0x0050) Transient, NativeAccessSpecifierPublic

	public:
		class UAnimSequenceBase* OverrideSequencerAnimation(class UAnimSequenceBase* InAnim, class USkeletalMeshComponent* SkelMeshComp);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CinematicState
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCinematicState : public UObject
	{
	public:
		void Tick(float DeltaTime);
		void HideLoadingScreen();
		void HandleUIStateChanged(const struct FGameplayTag& UIState);
		void HandleTeamChanged(class ATBLTeam* NewTeam);
		void HandleSuicideNotify(TBL_EKillReason KillReason);
		void HandlePossessedPawn(class APawn* Pawn);
		void HandlePendingSpawn(class ASpawner* PendingSpawner, float ServerSpawnTimeSeconds);
		void HandleNextSpawnWaveChanged(class ASpawnWave* SpawnWave);
		void HandleNextSpawnTeamChanged(class ATBLTeam* NewTeam);
		void HandleMatchStateChanged(const class FName& MatchState);
		void HandleGoingToSpawnAtSpawner(class ASpawner* Spawner);
		void HandleGameCinematicStateChanged(TBL_ECinematicGameState GameStateCinematicState);
		void HandleCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void HandleCharacterAllowControl();
		class ATBLPlayerController* GetPlayerController();
		class UCinematicsComponent* GetCinematicsComponent();
		void EndState(const struct FGameplayTag& NextState);
		void BeginState(const struct FGameplayTag& PreviousState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CinematicsComponent
	 * Size -> 0x0170 (FullSize[0x0278] - InheritedSize[0x0108])
	 */
	class UCinematicsComponent : public UActorComponent
	{
	public:
		struct FGameplayTag                                        InitialState;                                            // 0x0108(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DefaultStates[0x50];                                     // 0x0110(0x0050) UNKNOWN PROPERTY: MapProperty
		class FScriptMulticastDelegate                             OnCinematicStateChanged;                                 // 0x0160(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<struct FGameplayTag, class UCinematicState*>          States;                                                  // 0x0170(0x0050) NativeAccessSpecifierPrivate
		struct FGameplayTag                                        CurrentState;                                            // 0x01C0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FGameplayTag                                        CurrentUIState;                                          // 0x01C8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              CinematicAnimationRemappingClass[0x28];                  // 0x01D0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UCinematicAnimationRemapping*                        CinematicAnimationRemapping;                             // 0x01F8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_18I8[0x10];                                  // 0x0200(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UCombatStateComponent>                PreviousCombatStateComponent;                            // 0x0210(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y210[0x60];                                  // 0x0218(0x0060) MISSED OFFSET (PADDING)

	public:
		void SetUIState(const struct FGameplayTag& UIState);
		bool IsInState(const struct FGameplayTag& State);
		void HandleTeamChanged(class ATBLTeam* NewTeam);
		void HandleSuicideNotify(TBL_EKillReason KillReason);
		void HandlePossessedPawn(class APawn* Pawn);
		void HandlePendingSpawn(class ASpawner* PendingSpawner, float ServerSpawnTimeSeconds);
		void HandleNextSpawnWaveChanged(class ASpawnWave* SpawnWave);
		void HandleNextSpawnTeamChanged(class ATBLTeam* NewTeam);
		void HandleMatchStateChanged(const class FName& MatchState);
		void HandleGoingToSpawnAtSpawner(class ASpawner* Spawner);
		void HandleGameCinematicStateChanged(TBL_ECinematicGameState GameStateCinematicState);
		void HandleCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void GotoState(const struct FGameplayTag& NextState);
		class UCinematicState* GetState(const struct FGameplayTag& Tag);
		struct FGameplayTag GetCurrentUIState();
		struct FGameplayTag GetCurrentStateTag();
		class UCinematicState* GetCurrentState();
		void BindToPlayerState(class APlayerState* PlayerState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateBlueprint
	 * Size -> 0x0010 (FullSize[0x00B8] - InheritedSize[0x00A8])
	 */
	class UCombatStateBlueprint : public UAssemblyBlueprint
	{
	public:
		TArray<class FName>                                        Tags;                                                    // 0x00A8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateComponent
	 * Size -> 0x0940 (FullSize[0x0A48] - InheritedSize[0x0108])
	 */
	class UCombatStateComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_EQU5[0x28];                                  // 0x0108(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCombatStateChanged;                                    // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartAttack;                                           // 0x0140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSwitchAttack;                                          // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCombatStateBegin;                                      // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCombatStateEnd;                                        // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCrowdControlNoDamage;                                  // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimationEnd;                                          // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCombatStateEvent;                                      // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRagdollHitEvent;                                       // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRagdollHitFxEvent;                                     // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGetUp;                                                 // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProjectileCounterWindowStart;                          // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProjectileCounterWindowEnd;                            // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCounterWindowStart;                                    // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCounterWindowEnd;                                      // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActiveRiposteWindowStart;                              // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActiveRiposteWindowEnd;                                // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                InitialState;                                            // 0x0240(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicatedCombatStateInfo                          SimulatedCombatState;                                    // 0x0248(0x000A) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PLHS[0x6];                                   // 0x0252(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDelayedQueueHeldInputs>                     DelayedQueueHeldInputs;                                  // 0x0258(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              DisplayDebugTitle;                                       // 0x0268(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverrideHitDirectionTime;                                // 0x0278(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                OverrideHitDirection;                                    // 0x027C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        OverrideCrowdControlVariant;                             // 0x0284(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTurnLimitState                                     TurnLimitState;                                          // 0x0288(0x0048) Transient, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PostUpdateWeaponTracers;                                 // 0x02D0(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              bWeaponTracersUpdating : 1;                              // 0x02E0(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bForceCanMount : 1;                                      // 0x02E0(0x0001) BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ONE1[0x7];                                   // 0x02E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FReplicatedCombatStateInfo              ReplicatedCombatState;                                   // 0x02E8(0x0020) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UCombatStateSynchronization*                         CombatStateSynchronization;                              // 0x0308(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCombatStateQueue*                                   CombatStateQueue;                                        // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          NonAbilitiesAnimationDataTable;                          // 0x0318(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KOMT[0x20];                                  // 0x0320(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCombatStateSet*                                     CombatStateSet;                                          // 0x0340(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, class UCombatState*>                     AllStates;                                               // 0x0348(0x0050) NativeAccessSpecifierPrivate
		struct FCombatStateInfo                                    CurrentState;                                            // 0x0398(0x0128) ContainsInstancedReference, NativeAccessSpecifierPrivate
		class FName                                                CurrentEvent;                                            // 0x04C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        ComboCount;                                              // 0x04C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        IdenticalComboCount;                                     // 0x04CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FPreviousCombatState>                        PreviousStates;                                          // 0x04D0(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSwingThroughInfo                                   CurrentSwingThroughInfo;                                 // 0x04E0(0x0050) NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FSwingThroughInfo>                           PreviousSwingThroughInfo;                                // 0x0530(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, float>                                   CooldownEndTime;                                         // 0x0540(0x0050) NativeAccessSpecifierPrivate
		class FString                                              ErrorMessage;                                            // 0x0590(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsValidCombatState;                                     // 0x05A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bWasKilled;                                              // 0x05A1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsSwitchingStates;                                      // 0x05A2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bCancelToParry;                                          // 0x05A3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FNextStateQueue                                     NextStateQueue;                                          // 0x05A4(0x0010) NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       bHasNextStateInputParams;                                // 0x05B4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4LQ4[0x3];                                   // 0x05B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInputPressedParams                                 NextStateInputParams;                                    // 0x05B8(0x0038) NativeAccessSpecifierPrivate
		struct FDamageTakenEvent                                   LastDamageEvent;                                         // 0x05F0(0x0148) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class AActor*                                              LastAttacker;                                            // 0x0738(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AnimationTimerOvertime;                                  // 0x0740(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bShouldOverrideCurrentAnimTiming;                        // 0x0744(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_99V7[0x3];                                   // 0x0745(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAnimationTiming                                    OverrideCurrentAnimTiming;                               // 0x0748(0x0014) NoDestructor, NativeAccessSpecifierPrivate
		float                                                      SyncClientTimeStamp;                                     // 0x075C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bSyncStartAttack;                                        // 0x0760(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsStartingAttack;                                       // 0x0761(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E3D7[0x6];                                   // 0x0762(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCombatStateStartAttack                             SyncStartAttackParams;                                   // 0x0768(0x0038) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BYCA[0xA0];                                  // 0x07A0(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAction*>                                     InstancedObjects;                                        // 0x0840(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bWeaponTracerStarted;                                    // 0x0850(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5RH4[0x7];                                   // 0x0851(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AInventoryItem*>                              CurrentTracerWeapons;                                    // 0x0858(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      EndTracerTime;                                           // 0x0868(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        OnEndAnimationTimerHandle;                               // 0x086C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable*                                          AbilitiesOverridesDataTable;                             // 0x0870(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bSwitchAttack;                                           // 0x0878(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SODN[0x7];                                   // 0x0879(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAttackInfo                                         SwitchAttackInfo;                                        // 0x0880(0x0108) ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class FName>                                        OverrideTimingStates;                                    // 0x0988(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        InterruptingCombatStates;                                // 0x0998(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        CooldownRefreshCombatStates;                             // 0x09A8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        KnockedDownCombatStates;                                 // 0x09B8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        DownedCombatStates;                                      // 0x09C8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        CounterAttacks;                                          // 0x09D8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        ActiveRiposteAttacks;                                    // 0x09E8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DrawStrengthModifier;                                    // 0x09F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        ProjectileCounterTimer;                                  // 0x09FC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        CounterTimer;                                            // 0x0A00(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        ActiveRiposteTimer;                                      // 0x0A04(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DashTime;                                                // 0x0A08(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      AttackStartTime;                                         // 0x0A0C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      FeintStartTime;                                          // 0x0A10(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      NewFeintTime;                                            // 0x0A14(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      NewFeintAttackTime;                                      // 0x0A18(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      NewFeintHeavyAttackTime;                                 // 0x0A1C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class ULockTurnAngle*                                      LockTurnAngle;                                           // 0x0A20(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDrainStamina*                                       DrainStamina;                                            // 0x0A28(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAbilityActivated;                                       // 0x0A30(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bIsFocused;                                              // 0x0A31(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8N5N[0x2];                                   // 0x0A32(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LagCompensation;                                         // 0x0A34(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxLagCompensationMS;                                    // 0x0A38(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LastCancelTime;                                          // 0x0A3C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bWasInterruptedByJab;                                    // 0x0A40(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bWasHitByProjectile;                                     // 0x0A41(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NVF2[0x6];                                   // 0x0A42(0x0006) MISSED OFFSET (PADDING)

	public:
		bool WasInterruptedByJab();
		bool WasHitByProjectile();
		bool WasBlockedWithParryForgivenessWindow();
		void StartProjectileCounterWindow();
		void StartCounterWindow();
		void StartActiveRiposteWindow();
		bool ShouldEndCounterWindow();
		bool ShouldEndActiveRiposteWindow();
		void SetSimulatedCombatState(bool bBroadcastEndState);
		void ServerStartReleaseStab(const struct FCombatStateReleaseStab& Params);
		void ServerStartHeavyAttack(const struct FCombatStateHeavyAttack& Params);
		void ServerStartFire(const struct FCombatStateFire& Params);
		void ServerStartChargeStab(const struct FCombatStateChargeStab& Params);
		void ServerManualReload(const struct FTBL_FManualReload& Params);
		void ServerHitSuccessWorldWithStats(int AttackID, const struct FHitResultCompressed& HitCompressed, bool bParried, bool bBreakableHit);
		void ServerHitSuccess(int AttackID, const struct FHitResultCompressed& HitCompressed, bool bParried, bool bIsInTeamThwackRange);
		void ServerGetUp(const struct FCombatStateGetUp& Params);
		void ServerDisableAttackRootMotion(const struct FTBL_FDisableAttackRootMotion& Params);
		void ServerDebugGotoState(const class FName& CombatState, const class FName& HitDirection, int CrowdControlVariant);
		void ServerCancelAttack(const struct FCombatStateCancelAttack& Params);
		void ResetQueuedInputs();
		struct FReplicatedCombatStateInfo ReplicateCombatState(bool bForceNetUpdate);
		void Reload(class AInventoryItem* Item, bool bReplicateToClient);
		void QueueHeldInputs(const class FName& InputName, bool bIgnoreLastAttackInput);
		void OnWasParried(class ATBLCharacter* AttackingCharacter, class ATBLCharacter* DefendingCharacter, const struct FParryEventState& ParryEventState);
		void OnStaminaDrained();
		void OnReplicatedCombatState();
		void OnRagdolled();
		void OnProjectileCounterWindowTimeout(float OverTime);
		void OnParrySuccess(class ATBLCharacter* DefendingCharacter, class ATBLCharacter* AttackingCharacter, const struct FParryEventState& ParryEventState);
		void OnMovementInput(const class FName& Direction);
		void OnMeleeSuccess(class ATBLCharacter* HitCharacter);
		void OnLanded(const struct FLandedResult& LandedResult);
		void OnKilled();
		void OnJumpPressed();
		void OnItemStackChanged(class AInventoryItem* Item, int Delta);
		void OnHitWorld(class AActor* HitActor, bool bBreakableHit, bool bAutonomous);
		void OnEndAnimationTimeout(float OverTime);
		void OnEndAnimation();
		void OnDismount(class AActor* AttachParent, TBL_EDismountType DismountType);
		void OnDamageCaused(const struct FDamageTakenEvent& DamageEvent);
		void OnDamage(const struct FDamageTakenEvent& DamageEvent);
		void OnCounterWindowTimeout(float OverTime);
		void OnClash(class ATBLCharacter* Initiator, class ATBLCharacter* Target);
		void OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnActiveRiposteWindowTimeout(float OverTime);
		void OnActivateTimer(float OverTime);
		void OnAbilityInitiated(class AAbilityInvocation* Invocation);
		void ManualReload();
		bool IsUsingAttackTracers();
		bool IsRiposte();
		bool IsPreMovement();
		bool IsParryQueued();
		bool IsKnockedDown();
		bool IsInterrupted();
		bool IsInState(const class FName& StateName);
		bool IsInProjectileCounterWindow();
		bool IsInParryForgivenessWindow();
		bool IsInCounterWindow();
		bool IsInActiveRiposteWindow();
		bool IsHoldingInput();
		bool IsHoldAttackPressed();
		bool IsHeavy();
		bool IsFocused();
		bool IsFeint();
		bool IsDowned();
		bool IsCounter();
		bool IsCombo();
		bool IsCancelling();
		bool IsActiveRiposte();
		bool IsActiveCounter();
		bool IsAbilityUnblockable();
		void HandleDelayedQueueHeldInputs();
		void GotoStateReplicated(const class FName& NextStateName, bool bAutonomous, float OverrideStateTime, TBL_ECrowdControlVariant Variant);
		void GotoState(const class FName& NextStateName, float OverrideStateTime, bool bStartAttack, TBL_ECrowdControlVariant Variant);
		void GotoParrySuccessReplicated(int ParryAttackID, bool bWasBlockedWithParryForgivenessWindow);
		void GotoCounterReadyStateReplicated(int ParryAttackID, const class FName& AttackerAttackName);
		class FName GetState();
		class FName GetQueuedInput();
		struct FCombatStateInfo GetPreviousStateInfoByName(const class FName& InCombatState);
		struct FCombatStateInfo GetPreviousStateInfo(bool bLastAttackState, bool bIgnoreQuickIdle);
		float GetMinimumHoldingTime();
		TBL_ECrowdControlDirection GetLastHitDirection_CrowdControl();
		class FName GetLastHitDirection();
		float GetFeintMinTime();
		TArray<class FString> GetDebugPreviousSwingThroughInfo();
		TArray<class FString> GetDebugPreviousStates();
		struct FCombatStateInfo GetCurrentStateInfo();
		TBL_EAttackTypeCategory GetCurrentAttackTypeCategory();
		float GetCurrentAttackTime();
		class AInventoryItem* GetCurrentAttackItem();
		struct FAttackInfo GetCurrentAttackInfo(bool bLastValidAttack);
		class FName GetCurrentAttackDirection();
		class FName GetCurrentAttackComboState();
		class FName GetCurrentAttackCategory();
		class FName GetCurrentAttack();
		float GetCurrentAnimationLength();
		class FString GetComboTimingPolicyString(TBL_EComboTimingPolicy ComboTimingPolicy);
		class UCombatStateSynchronization* GetCombatStateSynchronization();
		class UCombatStateQueue* GetCombatStateQueue();
		class UCombatState* GetCombatStateBlueprint(const class FName& StateName);
		float GetClientTimeStamp();
		class FString GetAttackTransitionString(TBL_EAttackTransition AttackTransition);
		float GetAttackCooldownRemainingByName(const class FName& AttackName);
		void ExtendCounterWindow();
		void EndProjectileCounterWindow();
		void EndCounterWindow();
		void EndActiveRiposteWindow();
		void DoHitSuccess(int AttackID, const struct FHitResultCompressed& HitCompressed, bool bParried, bool bIsInTeamThwackRange);
		void DebugGotoState(const class FName& CombatState, const class FName& HitDirection, int CrowdControlVariant);
		void CrowdControl_NoDamage(TBL_ECrowdControlCombatState CombatState, const struct FCrowdControlParams& CrowdControlParams, bool bAutonomous);
		void ClientRecordPreviousSwingThroughInfo(const struct FSwingThroughInfo& SwingThroughInfo);
		void ClientOutOfStamina(const class FName& NewState);
		void ClientGotoState(const class FName& NextState, float OverrideStateTime, TBL_ECrowdControlVariant Variant);
		void ClientGotoParrySuccess(int ParryAttackID, bool bWasBlockedWithParryForgivenessWindow);
		void ClientGotoCounterReadyState(int ParryAttackID, const class FName& AttackerAttackName);
		void ClientCancelProjectile(const class FName& CombatState);
		bool CanDoHeavyAttack();
		bool CanCrouch();
		void BroadcastGetUp(const class FName& Direction);
		void BroadcastDrawStrengthModifier(unsigned char InDrawStrengthModifier);
		void BroadcastDebugGotoState(const class FName& CombatState, const class FName& HitDirection, int CrowdControlVariant);
		void BroadcastCrowdControl_NoDamage(TBL_ECrowdControlCombatState CombatState, const struct FCrowdControlParams& CrowdControlParams, bool bSkipAutonomous);
		void AnimNotify_EndWeaponTracers();
		void AnimNotify_ActivateAbility();
		bool AbilityHasMeleeTargetMethod(class UAbilitySpec* AbilitySpec);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateQueue
	 * Size -> 0x0200 (FullSize[0x0308] - InheritedSize[0x0108])
	 */
	class UCombatStateQueue : public UActorComponent
	{
	public:
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x0108(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCombatStateSynchronization*                         CombatStateSynchronization;                              // 0x0110(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        EarlyBlockStates;                                        // 0x0118(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        ParryCounterQueueStates;                                 // 0x0128(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        SendHeldInputToServer;                                   // 0x0138(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        HeldInput;                                               // 0x0148(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FInputPressedParams>                         InputQueue;                                              // 0x0158(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FAttackInfo>                                 AttackList;                                              // 0x0168(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        PendingAttackId;                                         // 0x0178(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N6KU[0x4];                                   // 0x017C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAttackInfo                                         PendingParryCounterAttack;                               // 0x0180(0x0108) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       bHoldAttack;                                             // 0x0288(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RXZO[0x3];                                   // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                HoldAttackQueued;                                        // 0x028C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HoldAttackQueueTime;                                     // 0x0294(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GamepadReloadPressedStartTime;                           // 0x0298(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAltAttack;                                              // 0x029C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bToggleAlt;                                              // 0x029D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFocusHeld;                                              // 0x029E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFocusAttackHeld;                                        // 0x029F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastAltAttackPressedTime;                                // 0x02A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastAltAttackTime;                                       // 0x02A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeSinceLastQueuedAttack;                               // 0x02A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CancelAttackPressedTime;                                 // 0x02AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      CancelIntoParryPressedTime;                              // 0x02B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCancelAttackKeyDown;                                  // 0x02B4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCancelIntoParryKeyDown;                               // 0x02B5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCancelGamepadKeyDown;                                 // 0x02B6(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsParryGamepadKeyDown;                                  // 0x02B7(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanFeintSameAttackOnGamepad;                            // 0x02B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y3GN[0x3];                                   // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ComboCancelTime;                                         // 0x02BC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        ComboCancelTimer;                                        // 0x02C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UQWZ[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FKey>                                        ConsumedKeys;                                            // 0x02C8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bShouldComboCancelQueue : 1;                             // 0x02D8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8C7F[0x3];                                   // 0x02D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                ComboCancelQueued;                                       // 0x02DC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        FeintQueueTimer;                                         // 0x02E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        CancelGamepadTimer;                                      // 0x02E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFeintQueued;                                            // 0x02EC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GP3[0x3];                                   // 0x02ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LastJumpInput;                                           // 0x02F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bParryQueued;                                            // 0x02F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1KQZ[0x3];                                   // 0x02F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                QueuedInput;                                             // 0x02FC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bQueueHeldInputs;                                        // 0x0304(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisableThrow;                                           // 0x0305(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisableSpecial;                                         // 0x0306(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DJSF[0x1];                                   // 0x0307(0x0001) MISSED OFFSET (PADDING)

	public:
		void TryCancelAttack();
		void ServerRemoveHeldInput(const class FName& InputActionName);
		void ServerQueueParry();
		void ServerQueueInput(const class FName& NewQueuedInput);
		void ServerAddHeldInput(const class FName& InputActionName);
		void QueueFeint(const class FName& FeintAttack);
		void OnShowInGameMenu();
		void OnFeintQueueTimeout(float OverTime);
		void OnComboCancelTimeout(float OverTime);
		void OnCancelGamepadTimeout(float OverTime);
		void ClearHeldAttackQueue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateSet
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UCombatStateSet : public UTBLObject
	{
	public:
		TArray<class UClass*>                                      CombatStateBlueprints;                                   // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoFillFromDirectory;                                  // 0x0050(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIncludeSubDirectories;                                  // 0x0051(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MFX3[0x6];                                   // 0x0052(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      ExcludeCombatStates;                                     // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateSetBlueprint
	 * Size -> 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
	 */
	class UCombatStateSetBlueprint : public UAssemblyBlueprint
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CombatStateSynchronization
	 * Size -> 0x0298 (FullSize[0x03A0] - InheritedSize[0x0108])
	 */
	class UCombatStateSynchronization : public UActorComponent
	{
	public:
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x0108(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCombatStateQueue*                                   CombatStateQueue;                                        // 0x0110(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        LatestAttackID;                                          // 0x0118(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DDN8[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSyncAttackId>                               ReceivedAcks;                                            // 0x0120(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSyncAttackId>                               FailedAttacks;                                           // 0x0130(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSyncAttackId>                               CancelledAttacks;                                        // 0x0140(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFailedAttackInfo                                   LastFailedAttack;                                        // 0x0150(0x0250) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void ClientOnAttackFailed(int AttackID);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ConditionalActions
	 * Size -> 0x0070 (FullSize[0x01E0] - InheritedSize[0x0170])
	 */
	class UConditionalActions : public UAction
	{
	public:
		TArray<class UCondition*>                                  Conditions;                                              // 0x0170(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     Actions;                                                 // 0x0180(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     FalseActions;                                            // 0x0190(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysOnDeadPawn;                                       // 0x01A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RHLU[0x7];                                   // 0x01A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAbilityInitiationParams                            LastInitiationParams;                                    // 0x01A8(0x0038) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ConditionsComponent
	 * Size -> 0x0128 (FullSize[0x0230] - InheritedSize[0x0108])
	 */
	class UConditionsComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_LWA7[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnApplyCondition;                                        // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRemoveCondition;                                       // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UConditionsSpec*                                     ConditionsSpec;                                          // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DownedTurnRateId;                                        // 0x0140(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        NumTimesDowned;                                          // 0x0144(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        NumTimesCrippled;                                        // 0x0148(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        BleedingTicks;                                           // 0x014C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        BurningTicks;                                            // 0x0150(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        OnFireTicks;                                             // 0x0154(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      DownedScore;                                             // 0x0158(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      MaxDownedScore;                                          // 0x015C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SZJR[0x48];                                  // 0x0160(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FConditionEntry>                             Conditions;                                              // 0x01A8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_UInt32                                  ReplicatedConditions;                                    // 0x01B8(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_Float                                   TotalBurnTime;                                           // 0x01D0(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_Float                                   TotalOnFireTime;                                         // 0x01E8(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_Int8                                    ReplicatedDownedScore;                                   // 0x0200(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_Bool                                    bDownedCanGetup;                                         // 0x0218(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetDownedScore(float Score);
		void ServerGetUpFromDowned();
		void Revive(class ATBLCharacter* RevivedBy);
		void ReplicateConditions();
		void RemoveCondition(TBL_EConditionType Condition, bool bClearStacks);
		void OnRep_DownedScore();
		void OnRep_Conditions();
		void OnDownedDamageCaused(const struct FDamageTakenEvent& Event);
		bool HasCondition(TBL_EConditionType Condition);
		void HandleOwnerUsed(class APawn* UsedBy, class UInteractableComponent* InteractableComponent);
		void HandleOwnerPreBroadcastDamage(const struct FDamageTakenEvent& DamageTakenEvent);
		void HandleOwnerDamageTaken(const struct FDamageTakenEvent& Event);
		void GetUpFromDowned();
		float GetMaxDownedScore();
		float GetDownedTime();
		float GetDownedScorePercent();
		float GetDownedScore();
		bool GetDownedCanGetUp();
		void ApplyCondition(TBL_EConditionType Condition, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ConditionsSpec
	 * Size -> 0x00D0 (FullSize[0x0178] - InheritedSize[0x00A8])
	 */
	class UConditionsSpec : public UAssemblyBlueprint
	{
	public:
		TArray<TBL_EConditionType>                                 ValidConditions;                                         // 0x00A8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       FallDamageSource;                                        // 0x00B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       FireDamageSource;                                        // 0x00C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       WaterDamageSource;                                       // 0x00C8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DownedDeathSaveHealth;                                   // 0x00D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DownedTurnRatePercent;                                   // 0x00D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDownedScore                                        DownedScore;                                             // 0x00D8(0x0028) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ShellShockTime;                                          // 0x0100(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BleedingTime;                                            // 0x0104(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BleedingTicks;                                           // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BleedingDamagePerTick;                                   // 0x010C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       BleedingDamageType;                                      // 0x0110(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BleedingFatalTime;                                       // 0x0118(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EJKL[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageSource*                                       BleedingFatalDamageType;                                 // 0x0120(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurningTime;                                             // 0x0128(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BurningTicks;                                            // 0x012C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BurningDamagePerTick;                                    // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U8Y1[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageSource*                                       BurningDamageType;                                       // 0x0138(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OnFireTime;                                              // 0x0140(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        OnFireTicks;                                             // 0x0144(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OnFireDamagePerTick;                                     // 0x0148(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T7N1[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageSource*                                       OnFireDamageType;                                        // 0x0150(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrippledTime;                                            // 0x0158(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxTimesFallingDamageDeathSave;                          // 0x015C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        FallingDamageDeathSaveHealth;                            // 0x0160(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MultipleDismembermentDeathSaveHealth;                    // 0x0164(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RequiredOverkillDamageToKill;                            // 0x0168(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BandageKitTime;                                          // 0x016C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InspiredTime;                                            // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0372[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimationSet
	 * Size -> 0x0118 (FullSize[0x0158] - InheritedSize[0x0040])
	 */
	class UAnimationSet : public UTBLObject
	{
	public:
		bool                                                       bIsCustomization;                                        // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_44KD[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              CharacterSet;                                            // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              WeaponSet;                                               // 0x0058(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFirstPerson;                                            // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GCW[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class FString>                         AutoMapAnimations;                                       // 0x0070(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FTracerCacheKey>                             DefaultTracerCacheKeys;                                  // 0x00C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTracerCacheKey>                             AdditionalTracerCacheKeys;                               // 0x00D0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        AnimationFPS;                                            // 0x00E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JPY3[0x4];                                   // 0x00E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FTracerCacheKey, struct FTracerCache>          TracerCache;                                             // 0x00E8(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<class UAnimMontage*>                                TracerMontages;                                          // 0x0138(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UAnimSequenceBase*>                           TracerSequences;                                         // 0x0148(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_BattlecryAbility
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_BattlecryAbility : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_CameraFollowAnimation
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_CameraFollowAnimation : public UAnimNotifyState
	{
	public:
		bool                                                       bFollowPitch;                                            // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFollowYaw;                                              // 0x0031(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5M5Q[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_DisableCollision
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_DisableCollision : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_DisableRootMotionInAir
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_DisableRootMotionInAir : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_EnableRootMotion
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_EnableRootMotion : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_EndLadderMovement
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_EndLadderMovement : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_PhysicsFlying
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_PhysicsFlying : public UAnimNotifyState
	{
	public:
		bool                                                       bDisableCollision;                                       // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DKGR[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_PhysicsFollowGround
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_PhysicsFollowGround : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_PhysicsSpawn
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_PhysicsSpawn : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AnimNotifyState_PhysicsVaulting
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UAnimNotifyState_PhysicsVaulting : public UAnimNotifyState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ApplyCondition
	 * Size -> 0x0008 (FullSize[0x0178] - InheritedSize[0x0170])
	 */
	class UApplyCondition : public UAction
	{
	public:
		TBL_EConditionType                                         ConditionType;                                           // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DJVX[0x7];                                   // 0x0171(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ApplyTargetMethod
	 * Size -> 0x0018 (FullSize[0x0188] - InheritedSize[0x0170])
	 */
	class UApplyTargetMethod : public UAction
	{
	public:
		TBL_ETargetMethodParameters                                TargetActor;                                             // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O39H[0x7];                                   // 0x0171(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbilityTargetMethod*                                TargetMethod;                                            // 0x0178(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilityTargetMethod*                                TargetMethodInstance;                                    // 0x0180(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnFinished(class AAbilityInvocation* InInvocation, class UAbilityTargetMethod* InTargetMethod);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameMode
	 * Size -> 0x0DA0 (FullSize[0x10E0] - InheritedSize[0x0340])
	 */
	class ATBLGameMode : public AGameMode
	{
	public:
		class UClass*                                              GameModeSettingsClass;                                   // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Teams;                                                   // 0x0348(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              FFATeam;                                                 // 0x0358(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               AttackingFaction;                                        // 0x0360(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               DefendingFaction;                                        // 0x0361(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6MJN[0x6];                                   // 0x0362(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultHorseClass;                                       // 0x0368(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              BlueprintDebugMenuComponentClass[0x28];                  // 0x0370(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UnknownData_IIJL[0xC];                                   // 0x0398(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SeamlessTravelEndTime;                                   // 0x03A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGameModeType                                          GamemodeType;                                            // 0x03A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGameModeType                                          CreateGameModeType;                                      // 0x03A9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFirstBotMatch;                                          // 0x03AA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U42T[0x5];                                   // 0x03AB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              GameScoringClass;                                        // 0x03B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLGameScoringInfo*                                 GameScoringInfo;                                         // 0x03B8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLActor*                                           AlwaysOnMusicManager;                                    // 0x03C0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UContextVOManager*                                   ContextVOManager;                                        // 0x03C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      SpawnQueuerClasses;                                      // 0x03D0(0x0010) Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class USpawnQueuer*>                                SpawnQueuers;                                            // 0x03E0(0x0010) Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerKilled;                                          // 0x03F0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPawnRevived;                                           // 0x0400(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPawnDowned;                                            // 0x0410(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerPossessed;                                       // 0x0420(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             CleanupAbilityActors;                                    // 0x0430(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_025N[0x4];                                   // 0x0440(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bPerfomedDeferredSpawnThisFrame;                         // 0x0444(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisablePlayerNamePlates;                                // 0x0445(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyShowNamesOnTeammates;                               // 0x0446(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFFAGameMode;                                          // 0x0447(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PostGameSlomo;                                           // 0x0448(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHideHudImportantMessages;                               // 0x044C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QR9Y[0x3];                                   // 0x044D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeBetweenLoadoutVolumeUses;                            // 0x0450(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUsePrioritySpawnSettings;                               // 0x0454(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseProximitySpawnSettings;                              // 0x0455(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IgnoreClassLimits;                                       // 0x0456(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TFUZ[0x1];                                   // 0x0457(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         SecondsBetweenWavesPlayerCountBonus;                     // 0x0458(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AIControllerClass;                                       // 0x0460(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBehaviorTree*                                       AIBehaviorTree;                                          // 0x0468(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRespawnStinger                                     FirstSpawnSound;                                         // 0x0470(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FRespawnStinger                                     RespawnSound;                                            // 0x0480(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FGuid                                               MatchID;                                                 // 0x0490(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAnalyticsShutdown : 1;                                  // 0x04A0(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WNRY[0x7];                                   // 0x04A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSessionBannedPlayer>                        SessionBannedPlayers;                                    // 0x04A8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       BotBackfillEnabled;                                      // 0x04B8(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MR83[0x3];                                   // 0x04B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        BotBackfillLowPlayers;                                   // 0x04BC(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BotBackfillLowBots;                                      // 0x04C0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BotBackfillHighPlayers;                                  // 0x04C4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BotBackfillHighBots;                                     // 0x04C8(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IdleKickTimerSpectate;                                   // 0x04CC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IdleKickTimerDisconnect;                                 // 0x04D0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRespawnImmediately;                                     // 0x04D4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLoggingAbilityEvents;                                   // 0x04D5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GEUM[0xA];                                   // 0x04D6(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              OverrideAIObjective;                                     // 0x04E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMatchComplete                                      MatchCompleteEvent;                                      // 0x04E8(0x0138) NativeAccessSpecifierPublic
		struct FServerPerformanceHistory                           ServerPerformanceHistory;                                // 0x0620(0x0180) NativeAccessSpecifierPublic
		TArray<class AGameModeModifier*>                           GameModeModifiers;                                       // 0x07A0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ATBLPlayerController*>                        DebugDrawAllTracers;                                     // 0x07B0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnControllerLogout;                                      // 0x07C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      AutoBalanceGracePeriodSeconds;                           // 0x07D0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A2C0[0x8];                                   // 0x07D4(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bEnableAutoDemoRecording;                                // 0x07DC(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAITestMap;                                            // 0x07DD(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ICLS[0x2];                                   // 0x07DE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      Maplist;                                                 // 0x07E0(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseMaplist;                                             // 0x07F0(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YU8H[0x3];                                   // 0x07F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        PostMatchTime;                                           // 0x07F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ServerName;                                              // 0x07F8(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ServerIdentifier;                                        // 0x0808(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MapListIndex;                                            // 0x0818(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WXBI[0x4];                                   // 0x081C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FClassLimitStruct>                           ClassLimits;                                             // 0x0820(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoBalancePlayersByTeamNumbers;                         // 0x0830(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       AutoBalancePlayersByKills;                               // 0x0831(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B2U1[0x2];                                   // 0x0832(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        TimeBetweenTeamKillBalanceChecks;                        // 0x0834(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        TimeBetweenPlayerNumBalanceChecks;                       // 0x0838(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        StartOfMatchGracePeriodForAutoBalance;                   // 0x083C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumKillsModifierForAutoBalance;                      // 0x0840(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoBalanceKillRelevancyTime;                            // 0x0844(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoBalanceKillThreshold;                                // 0x0848(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        AutoBalanceTimeUntilForcedRespawn;                       // 0x084C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpectatorsCannotSendToAllChat;                          // 0x0850(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bClientSideWeaponTracers;                                // 0x0851(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1T6G[0x2];                                   // 0x0852(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeEnteredWaitingToStart;                               // 0x0854(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MinPlayers;                                              // 0x0858(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DesiredPlayersToStartPercentage;                         // 0x085C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinTimeBeforeStartingMatch;                              // 0x0860(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxTimeBeforeStartingMatch;                              // 0x0864(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bManuallyStartMatch;                                     // 0x0868(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUsePrepareMatchTimer;                                   // 0x0869(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MEG9[0x2];                                   // 0x086A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PrepareMatchDuration;                                    // 0x086C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        PrepareMatchTimerHandle;                                 // 0x0870(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              GameModeWidgetClass[0x28];                               // 0x0878(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      EpilogueDuration;                                        // 0x08A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IFK3[0x4];                                   // 0x08A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTeamBalanceConfig>                          TeamBalanceOptions;                                      // 0x08A8(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTeamBalanceConfig>                          AutoBalanceOptions;                                      // 0x08B8(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FAutoBalancePlayerSwappingPriorityConfig>    AutoBalancePlayerPriorityConfig;                         // 0x08C8(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTeamImbalanceTracker                               TeamImbalanceTracker;                                    // 0x08D8(0x00A8) Protected, NativeAccessSpecifierProtected
		TBL_EFaction                                               Victor;                                                  // 0x0980(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V3TG[0x7];                                   // 0x0981(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPendingSpawn>                               PendingPlayerSpawnQueue;                                 // 0x0988(0x0010) ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      LastPlayerSpawnTime;                                     // 0x0998(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TWVS[0x4];                                   // 0x099C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FOccupiedPlayerStart>                        OccupiedPlayerStarts;                                    // 0x09A0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TNZK[0x40];                                  // 0x09B0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        ConfigWarmupTime;                                        // 0x09F0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J683[0xC];                                   // 0x09F4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBehaviorTree*                                       OverrideAIBehaviorTree;                                  // 0x0A00(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XV6X[0x28];                                  // 0x0A08(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int>                                                GoldAwardByTeamPlacement;                                // 0x0A30(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        GoldAwardTimePeriod;                                     // 0x0A40(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2M8G[0x4];                                   // 0x0A44(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              GoldMultiplierByDailyHour;                               // 0x0A48(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     GoldMultiplierByDailyHourTimeDilation;                   // 0x0A58(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        GoldAwardByTimePeriodAmount;                             // 0x0A60(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GameModeXPMultiplier;                                    // 0x0A64(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TNPY[0x1E8];                                 // 0x0A68(0x01E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_EPostMatchMatchmakingMode                              PostMatchMatchmakingMode;                                // 0x0C50(0x0001) ELEMENT_SIZE_MISMATCH ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CK9Y[0x3];                                   // 0x0A68(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
		unsigned char                                              UnknownData_5G34[0x4];                                   // 0x0C54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              PostMatchTravelString;                                   // 0x0C58(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bReadyToPostMatchTravel;                                 // 0x0C68(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P7SF[0xF];                                   // 0x0C69(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AGameServerQuery*                                    GameServerQuery;                                         // 0x0C78(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FHBN[0x3F0];                                 // 0x0C80(0x03F0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class ATBLPlayerState*, TBL_EFaction>                 FriendsByFaction;                                        // 0x1070(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0TD1[0x8];                                   // 0x10C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       AutoBalanceWithFriendsBlocked;                           // 0x10C8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_61MT[0x17];                                  // 0x10C9(0x0017) MISSED OFFSET (PADDING)

	public:
		void UpdatePS5MatchResponsibility(class APlayerController* ExcludePlayer);
		void UpdateBotBackfill(int NewNumPlayers);
		void TBSSkipStage();
		void TBSSetUseMapList(bool UseMapList);
		void TBSSetStageTime(float TimeMinutes);
		void TBSModifyTeamScore(int TeamId, int Score);
		void TBSManuallyStartGame();
		void TBSEndWarmup();
		void TBSEndGame(int WinningTeam);
		void Slomo(float T);
		void SetPS5MatchResponsiblePlayer(class ATBLPlayerState* NewPlayerState);
		void SetPS5MatchId(const class FString& NewPS5MatchId);
		void RemoveSessionBan(const struct FSessionBannedPlayer& BannedPlayer);
		void RemoveBots(bool bRemoveLevelBots, bool bRemoveBackfillBots);
		bool PlayerRequestNewTeam(class AController* Controller, class ATBLTeam* Team, bool bImmediatelySwitch);
		bool PlayerRequestBeginSpectating(class AController* Controller);
		void PlayerReadyToSpawn(class USpawnQueuer* SpawnQueuer, class AController* Player, class ASpawner* Spawner);
		void PerformDeferredSpawnRequest(const struct FPendingSpawn& DeferredSpawn);
		void PerformAutoBalancePriorToGameStart();
		void OverrideAIBehavior(const class FString& BehaviorTreeName);
		void OnPCPossessedPawn(class APawn* APawn);
		void NotifyStageStart(const class FString& StageName, float TimeRemaining);
		void NotifyStageEnd(TBL_EFaction WinningFaction);
		void KickByNetIdWithTimer(const struct FUniqueNetIdRepl& UniqueId, const class FString& Reason, float BanTime);
		void KickByName(const class FString& PlayerName, const class FString& Reason);
		void KickById(const class FString& PlayerId, const class FString& Reason);
		void KickAllPlayers();
		void K2_HandleSkipStage();
		void K2_HandlePrepareMatch();
		void K2_HandleMatchIsWaitingToStart();
		void K2_HandleMatchHasStarted();
		class UObject* K2_GetCurrentStage();
		bool IsSpawnWaveInQueue(class ASpawnWave* SpawnWave);
		bool IsAutoBalanceBlocked();
		void InitTeams();
		void InitSpawnQueuers();
		void HandleAIPossessedPawn(class ATBLAIController* AIC, class APawn* APawn);
		class FString GetServerIdentifier();
		class FString GetServerDisplayName();
		int GetNumberOfPlayersOnFaction(TBL_EFaction Faction, bool bRequirePlayerState);
		void GetGameModeWidgetClass();
		float GetEpilogueDuration();
		void GetCharacterPerformanceTestInfo(bool* IsRunningTest, int* TestIndex);
		TArray<class AActor*> GetAIObjectiveActors(class ATBLCharacter* Character);
		class USpawnQueuer* FindSpawnQueue(const class FName& SpawnQueueName);
		void DisableSpawningBots();
		void ClientAddMainMenuMessage(const class FText& Message);
		void ClearStageProgress(const struct FStageActorProgress& Progress);
		void ClearPS5MatchResponsiblePlayer();
		void ClearPS5MatchId();
		void ClearAllObjectiveAITags();
		void BroadcastLocalizedChatForFaction(TBL_EFaction ReceivingFaction, const class FText& Msg, TBL_EChatType Type);
		void BroadcastLocalizedChat(const class FText& Msg, TBL_EChatType Type);
		void BroadcastChat(class AActor* Sender, const class FString& Msg, TBL_EChatType Type, const struct FColor& OverrideColor);
		void BeginEpilogue();
		void BanByName(const class FString& PlayerName, int Hours, const class FString& Reason);
		void BanById(const class FString& PlayerId, int Hours, const class FString& Reason);
		void AwardVictory(TBL_EFaction InVictor, class ATBLPlayerState* InPlayerVictor);
		void AwardFFAVictory(class ATBLPlayerState* InPlayerVictor);
		void AutoBalanceByPlayerKills();
		void AutoBalanceByNumPlayers();
		void AddStageProgress(const struct FStageActorProgress& Progress);
		void AddPlayerNullBots(int InNumBots);
		void AddPlayerDummyBots(int InNumBots);
		void AddPlayerBotsEx(int InNumBots, int Team, int Class);
		void AddPlayerBots(int InNumBots);
		void AddNullBots(int InNumBots);
		void AddDummyBots(int InNumBots);
		void AddBotsEx(int InNumBots, int Team, int Class);
		void AddBots(int InNumBots);
		void ActuallyLeaveMap();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameMode_NativeBase
	 * Size -> 0x0000 (FullSize[0x10E0] - InheritedSize[0x10E0])
	 */
	class ATBLGameMode_NativeBase : public ATBLGameMode
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ArenaGameMode
	 * Size -> 0x00B0 (FullSize[0x1190] - InheritedSize[0x10E0])
	 */
	class AArenaGameMode : public ATBLGameMode_NativeBase
	{
	public:
		int                                                        Rounds;                                                  // 0x10E0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        TeamLives;                                               // 0x10E4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        FinalLives;                                              // 0x10E8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        TimeBetweenRounds;                                       // 0x10EC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        RoundTimeLimit;                                          // 0x10F0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bClearWeaponsPostRound;                                  // 0x10F4(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bResetTaggedActorsPostRound;                             // 0x10F5(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2TPO[0x2];                                   // 0x10F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        PreCountdownDelay;                                       // 0x10F8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUsePreCountdownForCustomizationLoading;                 // 0x10FC(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8CAP[0x3];                                   // 0x10FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UArenaGameModeSettings*                              ArenaGameModeSettings;                                   // 0x1100(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_51DL[0x8];                                   // 0x1108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bMatchEndingMusicTrigger;                                // 0x1110(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7RIL[0x2F];                                  // 0x1111(0x002F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AController*>                                 ControllersNeedingToSpawn;                               // 0x1140(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EG8E[0x28];                                  // 0x1150(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                VictoryPodiumMapName;                                    // 0x1178(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6PTG[0x10];                                  // 0x1180(0x0010) MISSED OFFSET (PADDING)

	public:
		void TryPodiumSetup();
		void ShowPodiumLevel();
		void PlayRoundFightCommanderVO();
		void OnPodiumLevelLoaded();
		void OnCustomizationJobsEmptied();
		void OnActorSpawned(class AActor* InActor);
		void LoadPodiumCinematic();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameModeSettings
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLGameModeSettings : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ArenaGameModeSettings
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class UArenaGameModeSettings : public UTBLGameModeSettings
	{
	public:
		struct FArenaCommanderVO                                   MasonVO;                                                 // 0x0028(0x0058) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FArenaCommanderVO                                   AgathaVO;                                                // 0x0080(0x0058) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9B1X[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (PADDING)

	public:
		class UAkAudioEvent* GetSound(TBL_EArenaSounds ArenaSound, TBL_EFaction Faction);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ContextVOManager
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UContextVOManager : public UObject
	{
	public:
		TMap<TWeakObjectPtr<class UObject>, struct FTimersArray>   StageTimerHandles;                                       // 0x0028(0x0050) NativeAccessSpecifierPrivate

	public:
		void RemoveStage(class UObject* Stage);
		void AddStageContextVo(class UObject* Stage, TArray<struct FContextVoEntry> ContextVO);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CounterXWorker
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UCounterXWorker : public UTBLAchievementWorker
	{
	public:
		class FString                                              AchievementID;                                           // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        RequiredCounters;                                        // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0QKT[0xC];                                   // 0x0054(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnCounteredAttack(TBL_EDefenderBlockedPolicy BlockPolicy, class ATBLCharacter* AttackingCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MapModifierProperty
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UMapModifierProperty : public UObject
	{
	public:
		class FText                                                Name;                                                    // 0x0028(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FString                                              CommandlineStr;                                          // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetNameAndDescription(const class FText& inName, const class FText& inDescription);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MapModifierFloatProperty
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UMapModifierFloatProperty : public UMapModifierProperty
	{
	public:
		float                                                      DefaultValue;                                            // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinValue;                                                // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxValue;                                                // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Value;                                                   // 0x0074(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetValue(float NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MapModifierIntProperty
	 * Size -> 0x0010 (FullSize[0x0078] - InheritedSize[0x0068])
	 */
	class UMapModifierIntProperty : public UMapModifierProperty
	{
	public:
		int                                                        DefaultValue;                                            // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MinValue;                                                // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxValue;                                                // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Value;                                                   // 0x0074(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetValue(int NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MapModifierBoolProperty
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UMapModifierBoolProperty : public UMapModifierProperty
	{
	public:
		bool                                                       DefaultValue;                                            // 0x0068(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Value;                                                   // 0x0069(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O19L[0x6];                                   // 0x006A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetValue(bool NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MapModifierComboBoxProperty
	 * Size -> 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
	 */
	class UMapModifierComboBoxProperty : public UMapModifierProperty
	{
	public:
		int                                                        DefaultValue;                                            // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Value;                                                   // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FText>                                        TextValues;                                              // 0x0070(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetValue(int NewValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MapOptionsObject
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UMapOptionsObject : public UObject
	{
	public:
		class FText                                                MapName;                                                 // 0x0028(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<TBL_EGameModeType>                                  GameModeTypes;                                           // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<TBL_EGameModeType, struct FMapModifierPropertiesArray> MapPropertiesByGameModeType;                             // 0x0050(0x0050) NativeAccessSpecifierPublic
		class UMapModifierComboBoxProperty*                        GamemodeTypesComboboxProperty;                           // 0x00A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMapModifierComboBoxProperty*                        ServerTypeComboboxProperty;                              // 0x00A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool GetMapMofidiersForGameMode(TBL_EGameModeType GamemodeType, TArray<class UMapModifierProperty*>* MapModifiers);
		class FString GenerateMapURL(TArray<class UMapModifierProperty*> InMapModifierProperties);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PlayerCapturePointComponent
	 * Size -> 0x00C0 (FullSize[0x01C8] - InheritedSize[0x0108])
	 */
	class UPlayerCapturePointComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_T1K3[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPlayerCapturePointComponentProperties              PlayerCapturePointComponentProperties;                   // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FReplicated_FPlayerCapturePointComponentProperties  ReplicatedTeamCapturePointComponentProperties;           // 0x0120(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PlayersInCaptureVolumeChanged;                           // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerCompletedCapture;                                // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlockedStatusUpdated;                                  // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		struct FReplicatedArray_ATBLCharacterPtr                   PlayersInVolume;                                         // 0x0168(0x0020) Net, RepNotify, NativeAccessSpecifierPublic
		struct FReplicated_Bool                                    bIsBlocked;                                              // 0x0188(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicatedArray_PlayerCaptureData                  PlayersCapturingData;                                    // 0x01A0(0x0020) Net, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_650X[0x8];                                   // 0x01C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetPlayerCapturePointProperties(const struct FPlayerCapturePointComponentProperties& Props);
		void ResetCapturePoint();
		void RefreshActorsInCaptureZone();
		bool PlayerSatisfiesCaptureRequirments(class ATBLCharacter* Player);
		void OnTrackedCharacterKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnTrackedCharacterDestroyed(class AActor* DestroyedActor);
		void OnRep_Properties();
		void OnRep_PlayersInPlayerCapturePoint();
		void OnRep_IsBlocked();
		TArray<struct FPlayerCaptureData> GetPlayersCaptureData();
		bool GetIsBlocked();
		void EndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void DeactivatePlayerCapturePoint();
		void BeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void ActivatePlayerCapturePoint();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameConfigObjectBase
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UGameConfigObjectBase : public UObject
	{
	public:
		TMap<class FString, struct FMapSummaryData>                MapSummaryLookup;                                        // 0x0028(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		void ClearCachedMapsData();
		void CacheMapData(const struct FMapOption& MapOption);
		void CacheAllMapsData(TArray<struct FMapOption> MapOptions, bool bClearOldData);
		void BuildDerivedProperties();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CreateGameLibrary
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UCreateGameLibrary : public UBlueprintFunctionLibrary
	{
	public:
		TMap<TBL_EGameModeType, struct FMapModifierPropertiesArray> DefaultGameModeModifiers;                                // 0x0028(0x0050) Transient, NativeAccessSpecifierPrivate
		TArray<class UMapModifierProperty*>                        DefaultModifiers;                                        // 0x0078(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        GlobalTimeLimitOverride;                                 // 0x0088(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BPF8[0x4];                                   // 0x008C(0x0004) MISSED OFFSET (PADDING)

	public:
		class UMapOptionsObject* STATIC_MakeMapOption(class UObject* WorldContextObject, const struct FMapOption& MapOptions);
		void STATIC_GetTOOptions(class UObject* WorldContextObject, int* ThereAreNoOptionsAtTheMoment);
		void STATIC_GetTDMOptions(class UObject* WorldContextObject, int* TicketCountOverride, int* TimeLimitOverride);
		int STATIC_GetGlobalTimeLimitOverride();
		bool STATIC_GetGenericModifiers(TArray<class UMapModifierProperty*>* Modifiers);
		void STATIC_GetFFAOptions(class UObject* WorldContextObject, int* ScoreLimitOverride, int* TimeLimitOverride);
		bool STATIC_GetDefaultModifiersForGameMode(TBL_EGameModeType GameMode, TArray<class UMapModifierProperty*>* Modifiers);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CreditsScrollBox
	 * Size -> 0x0020 (FullSize[0x08A0] - InheritedSize[0x0880])
	 */
	class UCreditsScrollBox : public UScrollBox
	{
	public:
		float                                                      SecondsBeforeResumingScroll;                             // 0x0880(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScrollPerSecond;                                         // 0x0884(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReversePerSecond;                                        // 0x0888(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxScrollOffset;                                         // 0x088C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EBHQ[0x10];                                  // 0x0890(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateScrolling(float DeltaTime);
		TArray<struct FCreditsSection> GetCredits();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CrowdControl
	 * Size -> 0x0008 (FullSize[0x0178] - InheritedSize[0x0170])
	 */
	class UCrowdControl : public UAction
	{
	public:
		TBL_ECrowdControlCombatState                               CombatState;                                             // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y9SC[0x7];                                   // 0x0171(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VirtualGood
	 * Size -> 0x0108 (FullSize[0x0200] - InheritedSize[0x00F8])
	 */
	class UVirtualGood : public UGameSparksAsset
	{
	public:
		int64_t                                                    ID;                                                      // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateBrush                                         Icon;                                                    // 0x0100(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int                                                        MaxQuantity;                                             // 0x0188(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CY6G[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FGameplayTagContainer                               TagContainer;                                            // 0x0190(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FString                                              Type;                                                    // 0x01B0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                CategoryText;                                            // 0x01C0(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<class FName>                                        BackendTags;                                             // 0x01D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTransient;                                              // 0x01E8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YG28[0x7];                                   // 0x01E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPrimaryAssetId>                             BundledItems;                                            // 0x01F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VirtualGoodItem
	 * Size -> 0x0000 (FullSize[0x0200] - InheritedSize[0x0200])
	 */
	class UVirtualGoodItem : public UVirtualGood
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTBase
	 * Size -> 0x0128 (FullSize[0x0328] - InheritedSize[0x0200])
	 */
	class UCTBase : public UVirtualGoodItem
	{
	public:
		int                                                        LoadPriority;                                            // 0x0200(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K9F9[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TBL_ECustomizationTag>                              Tags;                                                    // 0x0208(0x0010) Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCustomizationAttributes                            CustomizationAttributes;                                 // 0x0218(0x0110) Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic

	public:
		bool Apply(struct FCustomizationContext* InContext, class APawn* InPawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTArmourSet
	 * Size -> 0x0010 (FullSize[0x0338] - InheritedSize[0x0328])
	 */
	class UCTArmourSet : public UCTBase
	{
	public:
		class UCTTorso*                                            Torso;                                                   // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCTLeg*                                              Leg;                                                     // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTBaseCharacter
	 * Size -> 0x0000 (FullSize[0x0328] - InheritedSize[0x0328])
	 */
	class UCTBaseCharacter : public UCTBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTBeard
	 * Size -> 0x0020 (FullSize[0x0348] - InheritedSize[0x0328])
	 */
	class UCTBeard : public UCTBase
	{
	public:
		class USkeletalMesh*                                       Mesh;                                                    // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture*                                            Utility;                                                 // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture*                                            Normal;                                                  // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTEyeColors
	 * Size -> 0x0010 (FullSize[0x0338] - InheritedSize[0x0328])
	 */
	class UCTEyeColors : public UCTBase
	{
	public:
		struct FLinearColor                                        Color;                                                   // 0x0328(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTFacePaint
	 * Size -> 0x0018 (FullSize[0x0340] - InheritedSize[0x0328])
	 */
	class UCTFacePaint : public UCTBase
	{
	public:
		class UTexture*                                            Map;                                                     // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        Color;                                                   // 0x0330(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTHair
	 * Size -> 0x0020 (FullSize[0x0348] - InheritedSize[0x0328])
	 */
	class UCTHair : public UCTBase
	{
	public:
		class USkeletalMesh*                                       Mesh;                                                    // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture*                                            Utility;                                                 // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture*                                            Normal;                                                  // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTHairColor
	 * Size -> 0x0030 (FullSize[0x0358] - InheritedSize[0x0328])
	 */
	class UCTHairColor : public UCTBase
	{
	public:
		struct FLinearColor                                        Color;                                                   // 0x0328(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        Color2;                                                  // 0x0338(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        DisplayColor;                                            // 0x0348(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTHead
	 * Size -> 0x0018 (FullSize[0x0340] - InheritedSize[0x0328])
	 */
	class UCTHead : public UCTBase
	{
	public:
		class USkeletalMesh*                                       Mesh;                                                    // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                MorphTarget;                                             // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTHelmet
	 * Size -> 0x0018 (FullSize[0x0340] - InheritedSize[0x0328])
	 */
	class UCTHelmet : public UCTBase
	{
	public:
		class USkeletalMesh*                                       Mesh;                                                    // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HideHair;                                                // 0x0338(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HideBeard;                                               // 0x0339(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HideEar;                                                 // 0x033A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       JoustHelmet;                                             // 0x033B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3QDM[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTHeraldry
	 * Size -> 0x0010 (FullSize[0x0338] - InheritedSize[0x0328])
	 */
	class UCTHeraldry : public UCTBase
	{
	public:
		class UTexture*                                            Color;                                                   // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture*                                            Normal;                                                  // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTLeg
	 * Size -> 0x0038 (FullSize[0x0360] - InheritedSize[0x0328])
	 */
	class UCTLeg : public UCTBase
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0328(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UMaterialInterface*                                  Material;                                                // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasKneePadLeft;                                          // 0x0358(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasKneePadRight;                                         // 0x0359(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZIM2[0x6];                                   // 0x035A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTNickname
	 * Size -> 0x0018 (FullSize[0x0340] - InheritedSize[0x0328])
	 */
	class UCTNickname : public UCTBase
	{
	public:
		class FText                                                Nickname;                                                // 0x0328(0x0018) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTNovelty
	 * Size -> 0x0008 (FullSize[0x0330] - InheritedSize[0x0328])
	 */
	class UCTNovelty : public UCTBase
	{
	public:
		class UClass*                                              Asset;                                                   // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UClass* ResolveAssetClass();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTPersonality
	 * Size -> 0x0008 (FullSize[0x0330] - InheritedSize[0x0328])
	 */
	class UCTPersonality : public UCTBase
	{
	public:
		TBL_EAudioPersonalityType                                  PersonalityType;                                         // 0x0328(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QUP2[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTScar
	 * Size -> 0x0010 (FullSize[0x0338] - InheritedSize[0x0328])
	 */
	class UCTScar : public UCTBase
	{
	public:
		class UTexture*                                            Color;                                                   // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture*                                            Normal;                                                  // 0x0330(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTShield
	 * Size -> 0x0040 (FullSize[0x0368] - InheritedSize[0x0328])
	 */
	class UCTShield : public UCTBase
	{
	public:
		struct FSoftClassPath                                      Asset;                                                   // 0x0328(0x0018) Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         StaticMesh;                                              // 0x0340(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         DamagedStaticMesh;                                       // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         DestroyedStaticMesh;                                     // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0358(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EWeaponTag                                             WeaponTag;                                               // 0x0360(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6HUR[0x7];                                   // 0x0361(0x0007) MISSED OFFSET (PADDING)

	public:
		class UClass* ResolveAssetClass();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTSkinTone
	 * Size -> 0x0020 (FullSize[0x0348] - InheritedSize[0x0328])
	 */
	class UCTSkinTone : public UCTBase
	{
	public:
		struct FLinearColor                                        Color;                                                   // 0x0328(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        DisplayColor;                                            // 0x0338(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTTattoo
	 * Size -> 0x0020 (FullSize[0x0348] - InheritedSize[0x0328])
	 */
	class UCTTattoo : public UCTBase
	{
	public:
		class UTexture*                                            Map;                                                     // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETattooColorChannel                                    MapChannel;                                              // 0x0330(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OV0B[0x3];                                   // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        InkColor;                                                // 0x0334(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NG6A[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTTorso
	 * Size -> 0x0040 (FullSize[0x0368] - InheritedSize[0x0328])
	 */
	class UCTTorso : public UCTBase
	{
	public:
		unsigned char                                              Mesh[0x28];                                              // 0x0328(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class UMaterialInterface*                                  Material;                                                // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HideHair;                                                // 0x0358(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HideBeard;                                               // 0x0359(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HideEar;                                                 // 0x035A(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasShoulderPadLeft;                                      // 0x035B(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasShoulderPadRight;                                     // 0x035C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasElbowPadLeft;                                         // 0x035D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasElbowPadRight;                                        // 0x035E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasCoifMorph;                                            // 0x035F(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasLeftFrontArmorPad;                                    // 0x0360(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasRightFrontArmorPad;                                   // 0x0361(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasBackArmorPad;                                         // 0x0362(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasSkirtBone;                                            // 0x0363(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W4FO[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CTWeapon
	 * Size -> 0x0038 (FullSize[0x0360] - InheritedSize[0x0328])
	 */
	class UCTWeapon : public UCTBase
	{
	public:
		struct FSoftClassPath                                      Asset;                                                   // 0x0328(0x0018) Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         StaticMesh;                                              // 0x0340(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  Material;                                                // 0x0348(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       SkeletalMesh;                                            // 0x0350(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EWeaponTag                                             WeaponTag;                                               // 0x0358(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ASA6[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (PADDING)

	public:
		class UClass* ResolveAssetClass();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnQueuer
	 * Size -> 0x0040 (FullSize[0x0080] - InheritedSize[0x0040])
	 */
	class USpawnQueuer : public UTBLObject
	{
	public:
		class FName                                                Name;                                                    // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActivated;                                             // 0x0048(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDeactivated;                                           // 0x0058(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnQueuePlayerReadyToSpawn;                          // 0x0068(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		bool                                                       bApplysToAllTeams;                                       // 0x0078(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               Faction;                                                 // 0x0079(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoActivate;                                           // 0x007A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoDeactivate;                                         // 0x007B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HTIE[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool RequestSpawnFor(class AController* PC);
		bool RemoveFromQueue(class AController* PC);
		void ReceiveDeactivate();
		void ReceiveActivate();
		bool IsActive();
		void Deactivate();
		bool CanDeactivate();
		bool CanActivate();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CumulativeSpawnQueuer
	 * Size -> 0x0070 (FullSize[0x00F0] - InheritedSize[0x0080])
	 */
	class UCumulativeSpawnQueuer : public USpawnQueuer
	{
	public:
		unsigned char                                              UnknownData_2DLZ[0x8];                                   // 0x0080(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CumulativeTime;                                          // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartingRespawnTime;                                     // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCumulativePlayerSpawnPair>                  SpawnQueue;                                              // 0x0090(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class AController>, float>             PlayerCumulativeTimes;                                   // 0x00A0(0x0050) Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationAttachment
	 * Size -> 0x0040 (FullSize[0x0298] - InheritedSize[0x0258])
	 */
	class ACustomizationAttachment : public AActor
	{
	public:
		class FText                                                DisplayName;                                             // 0x0258(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FName                                                AttachRootComponentName;                                 // 0x0270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ThumbnailCameraComponentName;                            // 0x0278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAttach1PMesh : 1;                                       // 0x0280(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAttach3PMesh : 1;                                       // 0x0280(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0JBQ[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ExcludeIfAttached;                                       // 0x0288(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationComponent
	 * Size -> 0x0080 (FullSize[0x0188] - InheritedSize[0x0108])
	 */
	class UCustomizationComponent : public UTBLComponent
	{
	public:
		unsigned char                                              UnknownData_O9DW[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCustomizationApplied;                                  // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FReplicated_FCustomizationPreset                    CustomizationPreset;                                     // 0x0128(0x0018) BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		struct FCustomizationData                                  CustomizationData;                                       // 0x0140(0x0040) Transient, NativeAccessSpecifierPublic
		bool                                                       CustomizationApplied;                                    // 0x0180(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OZYW[0x7];                                   // 0x0181(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_CustomizationPreset();
		TArray<struct FPrimaryAssetId> GetPendingCustomization();
		TArray<struct FPrimaryAssetId> GetCurrentCustomization();
		bool FindPreset(struct FCustomizationPreset* OutPreset);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationConfig
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UCustomizationConfig : public UObject
	{
	public:
		unsigned char                                              UnknownData_BKC8[0x50];                                  // 0x0028(0x0050) MISSED OFFSET (PADDING)

	public:
		void GetParametersAndMorphTargetsToApply(const class FName& Category, int SelectedSwatch, TArray<class FName>* ScalarNames, TArray<float>* ScalarValues, TArray<class FName>* VectorNames, TArray<struct FLinearColor>* VectorValues, TArray<class FName>* TextureNames, TArray<class UTexture*>* TextureValues, TArray<class FName>* MorphTargetNames, TArray<float>* MorphTargetValues);
		int GetNumSwatchesInCategory(const class FName& Category);
		void GetCategorySwatchNames(const class FName& Category, TArray<class FString>* SwatchNames);
		void GetCategorySwatchAttachments(const class FName& Category, class UCustomizationComponent* CustomizationComponent, TArray<class UClass*>* SwatchAttachments);
		void GetCategories(TArray<class FName>* Categories);
		void ApplySwatchToMID(const class FName& SwatchCategoryName, int SelectedSwatch, class UMaterialInstanceDynamic* Mid, class UMeshComponent* MeshComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationAssetContainer
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UCustomizationAssetContainer : public UDataAsset
	{
	public:
		TArray<class UCTBase*>                                     Assets;                                                  // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCustomizationLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SetVectorParameterOnMaterials(class ATBLCharacter* Char, const class FName& ParameterName, const struct FVector& ParameterValue);
		bool STATIC_SetTextureParameterValueOnMaterials(class ATBLCharacter* InCharacter, const class FName& InMeshName, const class FName& ParameterName, class UTexture* ParameterValue, const class FName& SlotName);
		bool STATIC_SetStaticMeshAndMaterial(class UStaticMeshComponent* SKM, class UStaticMesh* SrcMesh, class UMaterialInterface* Material, const class FName& SlotName);
		bool STATIC_SetScalarParameterValueOnMaterials(class ATBLCharacter* InCharacter, const class FName& InMeshName, const class FName& InParameterName, float InParameterValue);
		void STATIC_SetScalarParameterOnMaterials(class ATBLCharacter* Char, const class FName& ParameterName, float ParameterValue);
		bool STATIC_SetMorphTarget(class ATBLCharacter* InCharacter, const class FName& InMeshName, const class FName& MorphTargetName, float InValue);
		bool STATIC_SetMeshAndMaterial(class ATBLCharacter* InCharacter, const class FName& InMeshName, class USkeletalMesh* SrcMesh, class UMaterialInterface* Material, const class FName& SlotName);
		void STATIC_SetHelmetHidden(class ATBLCharacter* Char, bool Hide);
		void STATIC_SetHairHidden(class ATBLCharacter* Char, bool Hide);
		void STATIC_SetHairBeardEarHiddenFromContext(class ATBLCharacter* Char, bool bUseItemsVisibilityForContext);
		void STATIC_SetEarHidden(class ATBLCharacter* Char, bool Hide);
		bool STATIC_SetColorParameterValueOnMaterials(class ATBLCharacter* InCharacter, const class FName& InMeshName, const class FName& InParameterName, const struct FLinearColor& InParameterValue);
		void STATIC_SetBeardHidden(class ATBLCharacter* Char, bool Hide);
		void STATIC_SaveAssetsForClassFaction(class ATBLPlayerState* PlayerState, TBL_EAudioClassType ClassType, TBL_EFaction Faction);
		bool STATIC_LoadCustomizationPreset(class APawn* Pawn, struct FCustomizationPreset* InPreset);
		void STATIC_InitializeContext(TArray<struct FPrimaryAssetId> AssetIds, struct FCustomizationContext* Context);
		TBL_EWeaponTag STATIC_GetWeaponTagFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAsset);
		class USkeletalMeshComponent* STATIC_GetTorsoMesh(class ATBLCharacter* Char, bool WantFirstPerson);
		void STATIC_GetTattooCustomizationEnabled(bool* Enabled);
		void STATIC_GetRandomAssets(class ATBLCharacter* Char, TArray<struct FPrimaryAssetId>* OutAssetIds);
		class UClass* STATIC_GetPrimaryAssetClass(const struct FPrimaryAssetId& PrimaryAsset);
		class FText STATIC_GetOnlineStoreOfferTitle(const struct FOnlineStoreOffer& OnlineStoreOffer);
		class USkeletalMeshComponent* STATIC_GetLegsMesh(class ATBLCharacter* Char, bool WantFirstPerson);
		class FText STATIC_GetItemNameFromAssetId(const struct FPrimaryAssetId& PrimaryAsset);
		class USkeletalMeshComponent* STATIC_GetInventorySKMesh(class ATBLCharacter* Char, const struct FSoftObjectPath& WeaponAsset, class AActor** ItemOut);
		class UStaticMeshComponent* STATIC_GetInventoryMesh(class ATBLCharacter* Char, const struct FSoftObjectPath& WeaponAsset, class AActor** ItemOut);
		class USkeletalMeshComponent* STATIC_GetHelmetMesh(class ATBLCharacter* Char, bool WantFirstPerson);
		class USkeletalMeshComponent* STATIC_GetHeadMesh(class ATBLCharacter* Char, bool WantFirstPerson);
		class USkeletalMeshComponent* STATIC_GetHairMesh(class ATBLCharacter* Char, bool WantFirstPerson);
		class UCTBase* STATIC_GetCustomizationAsset(class ATBLCharacter* Char, class UClass* CustomizationType, class UClass* WeaponClass);
		class USkeletalMeshComponent* STATIC_GetBeardMesh(class ATBLCharacter* Char, bool WantFirstPerson);
		void STATIC_GetAllWeaponMesh(class ATBLCharacter* Char, TArray<class UMeshComponent*>* OutComponents);
		void STATIC_GetAllCharMesh(class ATBLCharacter* Char, TArray<class UMeshComponent*>* OutComponents);
		bool STATIC_ForceAllMipLevelsOnMaterials(class ATBLCharacter* InCharacter, const class FName& InMeshName, const class FName& ParameterName, const class FName& SlotName, float Seconds);
		void STATIC_EquipAssetsForClassFaction(class ATBLPlayerState* PlayerState, class ATBLCharacter* Char, TBL_EAudioClassType ClassType, TBL_EFaction Faction, TArray<struct FPrimaryAssetId> InAssetIds, TArray<class UClass*> CTClassesToIgnore);
		void STATIC_CustomizeHead(class AActor* HeadActor, const struct FReplicated_FCustomizationPreset& CustomizationPreset);
		void STATIC_ApplyRandomAsset(class ATBLCharacter* Char, const struct FPrimaryAssetType& PrimaryAssetType);
		void STATIC_ApplyCutomizationToCharacter(class ATBLCharacter* InCharacter);
		void STATIC_ApplyCustomizationToItem(class ATBLCharacter* Character, class AInventoryItem* NewItem, class ATBLPlayerState* PlaterState, TBL_EFaction Faction, TBL_EAudioClassType Class);
		void STATIC_ApplyAssets(class ATBLCharacter* Char, TArray<struct FPrimaryAssetId>* InAssetIds);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationLoadingJob
	 * Size -> 0x0120 (FullSize[0x0148] - InheritedSize[0x0028])
	 */
	class UCustomizationLoadingJob : public UObject
	{
	public:
		unsigned char                                              UnknownData_QB62[0xB0];                                  // 0x0028(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCTBase*>                                     Assets;                                                  // 0x00D8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCustomizationContext                               TemporaryCustomizationContext;                           // 0x00E8(0x0058) Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OK62[0x8];                                   // 0x0140(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CharacterCustomizationLoadingJob
	 * Size -> 0x0020 (FullSize[0x0168] - InheritedSize[0x0148])
	 */
	class UCharacterCustomizationLoadingJob : public UCustomizationLoadingJob
	{
	public:
		unsigned char                                              UnknownData_AZLN[0x20];                                  // 0x0148(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationLoadingManager
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UCustomizationLoadingManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_0YKQ[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCustomizationLoadingJob*>                    Jobs;                                                    // 0x0038(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationRulesLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UCustomizationRulesLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SortCustomizationEntries(TArray<struct FCustomizationEntry>* RefCustomizationEntries, bool bSortByLevel, bool bSortByAlignment, bool bSortByRarity);
		TArray<struct FCustomizationEntry> STATIC_OnlyCustomizationEntriesCompatibleWithOwnerPreset(class ATBLPlayerController* PlayerController, TArray<struct FCustomizationEntry> CustomizationEntries, TBL_EAudioClassType ClassType, TBL_EFaction Faction);
		TArray<struct FPrimaryAssetId> STATIC_OnlyCustomizationAssetsCompatibleWithOwnerPreset(class ATBLPlayerController* PlayerController, TArray<struct FPrimaryAssetId> CustomizationAssets, TBL_EAudioClassType ClassType, TBL_EFaction Faction);
		void STATIC_GroupCustomizationEntries(class ATBLPlayerController* PlayerController, TArray<struct FCustomizationEntry> CustomizationEntries, TArray<struct FCustomizationEntriesGroup>* CustomizationGroups, TBL_ECustomizationGroupSearchResult* SearchResult);
		struct FPrimaryAssetId STATIC_FindReplacementAsset(const struct FPrimaryAssetId& AssetToReplace, TBL_EAudioClassType ClassType, TBL_EFaction Faction, const struct FCustomizationConstraintsQuery& ConstraintsQuery, const struct FCustomizationCompatibilityQuery& CompatibilityQuery, const struct FCustomizationConstraintsQuery& OptionalConstraintsQuery, const struct FCustomizationCompatibilityQuery& OptionalCompatibilityQuery, int Alignment, TArray<struct FPrimaryAssetId> DefaultAssets);
		TArray<struct FCustomizationEntry> STATIC_FilterCustomizationEntries(TArray<struct FCustomizationEntry> CustomizationEntries, const struct FCustomizationConstraintsQuery& ConstraintsQuery);
		TArray<struct FPrimaryAssetId> STATIC_FilterCustomizationAssets(TArray<struct FPrimaryAssetId> CustomizationAssets, const struct FCustomizationConstraintsQuery& ConstraintsQuery);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationSettings
	 * Size -> 0x0150 (FullSize[0x0188] - InheritedSize[0x0038])
	 */
	class UCustomizationSettings : public UDeveloperSettings
	{
	public:
		struct FCustomizationTagDefinitionList                     Exclusivity;                                             // 0x0038(0x0010) Edit, Config, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FCustomizationTagDefinitionList>  Categories;                                              // 0x0048(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FCustomizationSortingTagDefinitionList> SortingAttributes;                                       // 0x0098(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FCustomizationGroupData>          Groups;                                                  // 0x00E8(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected
		TMap<TBL_EWeaponTag, TBL_EWeaponCategoryTypes>             WeaponTagToCategoryMap;                                  // 0x0138(0x0050) Edit, Config, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PodiumLocation
	 * Size -> 0x0058 (FullSize[0x02B0] - InheritedSize[0x0258])
	 */
	class APodiumLocation : public AActor
	{
	public:
		class USceneComponent*                                     SceneComponent;                                          // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPodiumLocationComponent*>                    LocationComponents;                                      // 0x0260(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPodiumLocationComponent*>                    VictorLocationComponents;                                // 0x0270(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPodiumLocationComponent*>                    LoserLocationComponents;                                 // 0x0280(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPodiumLocationData>                         VictorLocationsData;                                     // 0x0290(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPodiumLocationData>                         LoserLocationsData;                                      // 0x02A0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PossessableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPossessableInterface : public UInterface
	{
	public:
		void EventEndPossess(class APawn* Pawn);
		void EventBeginPossess(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ProgressBarCostsOverlay
	 * Size -> 0x01A0 (FullSize[0x04B8] - InheritedSize[0x0318])
	 */
	class UProgressBarCostsOverlay : public UProgressBar
	{
	public:
		float                                                      OverlayPercent;                                          // 0x0318(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OverlayPercentDelegate;                                  // 0x031C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZPSK[0x4];                                   // 0x032C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         OverlayFillImage;                                        // 0x0330(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSlateBrush                                         DamageFillImage;                                         // 0x03B8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      DamageLingerTime;                                        // 0x0440(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamageRemovedPerSecond;                                  // 0x0444(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateColor                                         DamageFillColorAndOpacity;                               // 0x0448(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FSlateColor                                         OverlayFillColorAndOpacity;                              // 0x0470(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptDelegate                                      DamageFillColorAndOpacityDelegate;                       // 0x0498(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OverlayFillColorAndOpacityDelegate;                      // 0x04A8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic

	public:
		void SetOverlayPercent(float InOverlayPercent);
		void SetOverlayFillColorAndOpacity(const struct FLinearColor& InColor);
		void SetDamageFillColorAndOpacity(const struct FLinearColor& InColor);
		class UMaterialInstanceDynamic* GetFillDynamicMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ProgressionSpec
	 * Size -> 0x0030 (FullSize[0x00D8] - InheritedSize[0x00A8])
	 */
	class UProgressionSpec : public UAssemblyBlueprint
	{
	public:
		class UDataTable*                                          XpTable;                                                 // 0x00A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WUEX[0x28];                                  // 0x00B0(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ProjectileCollision
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UProjectileCollision : public UObject
	{
	public:
		TWeakObjectPtr<class UShapeComponent>                      ShapeComponent;                                          // 0x0028(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DPTI[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		bool IgnoreCharactersBehind(const struct FHitResult& Hit);
		void HandleDelayedHits();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ProjectileOverlapEventInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UProjectileOverlapEventInterface : public UInterface
	{
	public:
		void OnProjectileOverlap(class AInventoryItem* Item, const struct FHitResult& HitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PropertyDebugger
	 * Size -> 0x01D0 (FullSize[0x02D8] - InheritedSize[0x0108])
	 */
	class UPropertyDebugger : public UTBLComponent
	{
	public:
		class ATBLCharacter*                                       OtherCharacter;                                          // 0x0108(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              OtherActor;                                              // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DisplayDebugScrollDir;                                   // 0x0118(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DisplayDebugScrollY;                                     // 0x011C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowMenu;                                               // 0x0120(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GLHK[0x3];                                   // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MenuDirection;                                           // 0x0124(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MenuTimer;                                               // 0x0128(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MenuHeldTime;                                            // 0x012C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MenuTimerRate;                                           // 0x0130(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_53EP[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              SearchText;                                              // 0x0138(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFilterEnabled;                                          // 0x0148(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4AMZ[0x7];                                   // 0x0149(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastInputTime;                                           // 0x0150(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPropertyMenuItem>                           PropertiesMenu;                                          // 0x0158(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPropertyMenuItem>                           PropertiesMenuUnfiltered;                                // 0x0168(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FPropertyMenuItem                                   CurrentMenu;                                             // 0x0178(0x0098) Protected, NativeAccessSpecifierProtected
		TArray<struct FPropertyUndoItem>                           UndoStack;                                               // 0x0210(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      RedoStack;                                               // 0x0220(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDebugProperty                                      SelectedProperty;                                        // 0x0230(0x0020) Protected, NativeAccessSpecifierProtected
		TArray<struct FDebugProperty>                              DebugProperties;                                         // 0x0250(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SelectedPropertyIndex;                                   // 0x0260(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ETT8[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     InputComponent;                                          // 0x0268(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     MenuInputComponent;                                      // 0x0270(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReplicateProperties;                                    // 0x0278(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShowDebugOther;                                         // 0x0279(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_175E[0x2];                                   // 0x027A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      OtherCharacterTraceTime;                                 // 0x027C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        AllClassNames;                                           // 0x0280(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UActorComponent*>                             ActorComponents;                                         // 0x0290(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                DebugAllOption;                                          // 0x02A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLHUD*                                             MyHUD;                                                   // 0x02A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      HistoryBuffer;                                           // 0x02B0(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        CurrentHistoryIndex;                                     // 0x02C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F8DL[0x14];                                  // 0x02C4(0x0014) MISSED OFFSET (PADDING)

	public:
		void ToggleShowDebugOther();
		void ToggleReplication();
		void ServerSetOtherCharacter(class ATBLCharacter* Other);
		void ServerSetOtherActor(class AActor* Other);
		void ServerGetSelectedClass(const struct FDebugProperty& Property);
		void ServerGetBaseClass(const class FName& BaseObj);
		void ServerEnableReplication(bool bReplicate);
		void ServerDeleteDebugProperty(bool bFromEnd);
		void ServerAddDebugProperty(const struct FDebugProperty& Property);
		void PrintToFile();
		void PreviousProperty();
		void OnPossessed(class APawn* NewPawn);
		void OnMovementSync(class UMovementDebugger* MovementDebugger);
		void NextProperty();
		void MenuUpPressed();
		void MenuRight();
		void MenuReleased();
		void MenuPageUp();
		void MenuPageDown();
		void MenuOpen();
		void MenuLeft();
		void MenuDownPressed();
		void MenuDelete();
		void MenuClose();
		void MenuBackSpace();
		void MenuAdd();
		void InitHUD();
		bool HandleFilterText(const class FString& Char);
		class UStruct* GetOverrideSelectedClass(const struct FDebugProperty& Property);
		class UStruct* GetOverrideBaseClass(const class FName& BaseObj);
		void FindProperty(const class FString& PropName);
		void STATIC_DrawProperty(class UCanvas* Canvas, float* XPos, float* YPos, const class FString& PropName, const class FString& PropVal);
		void DrawDebug(class UCanvas* Canvas);
		void DisplayDebugScrollUp();
		void DisplayDebugScrollReleased();
		void DisplayDebugScrollDown();
		void DebugInputChar(const class FString& Char);
		void CreateMenu();
		void CloseDebugger();
		void ClientReturnSelectedClass(class UStruct* Struct);
		void ClearFilter();
		void ApplyFilter(const class FString& Text);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PushableSplineActor
	 * Size -> 0x0030 (FullSize[0x0320] - InheritedSize[0x02F0])
	 */
	class APushableSplineActor : public ATBLActor
	{
	public:
		class USplineComponent*                                    SplineComponentGenerated;                                // 0x02F0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USplineComponent*                                    SplineComponentOutline;                                  // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     DefaultSceneComponent;                                   // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPushableEndPoint>                           PushableEndPoints;                                       // 0x0308(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartingDistance;                                        // 0x0318(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AllSubLevelsLoaded;                                      // 0x031C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       AllowConstructionScriptToRun;                            // 0x031D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7FN1[0x2];                                   // 0x031E(0x0002) MISSED OFFSET (PADDING)

	public:
		void OnLevelLoaded();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PushableComponent
	 * Size -> 0x03C0 (FullSize[0x04C8] - InheritedSize[0x0108])
	 */
	class UPushableComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_XKDR[0x18];                                  // 0x0108(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTeamCapturePointComponent*                          TeamCapturePointComponent;                               // 0x0120(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UObjectiveStatusDisplayComponent*                    ObjectiveStatusDisplay;                                  // 0x0128(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStatsComponent*                                     StatsComponent;                                          // 0x0130(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USplineComponent*                                    SplineComponent;                                         // 0x0138(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class APushableSplineActor*                                SplineActor;                                             // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_AActorPtr                               ReplicatedSplineActor;                                   // 0x0148(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EPushableMovementType                                  PushableMovementType;                                    // 0x0160(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MSQJ[0x7];                                   // 0x0161(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_EPushableMovementType                   ReplicatedPushableMovementType;                          // 0x0168(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      FollowerPushables;                                       // 0x0180(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_FollowerPushables                       ReplicatedFollowerPushables;                             // 0x0190(0x0020) Net, RepNotify, NativeAccessSpecifierPublic
		float                                                      StartingDistance;                                        // 0x01B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeToCompleteSeconds;                                   // 0x01B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   ReplicatedTimeToCompleteSeconds;                         // 0x01B8(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxSpeed;                                                // 0x01D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q1A7[0x4];                                   // 0x01D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAkAudioEvent*>                               PlayMovingSounds;                                        // 0x01D8(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAkAudioEvent*>                               StopMovingSounds;                                        // 0x01E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisablePawnCollisionOnSkeletalMeshWhenActive;           // 0x01F8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTestExperimentalTeleport;                               // 0x01F9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTeleportWithPhysics;                                    // 0x01FA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowDisableOfPhysicsForOneTick;                        // 0x01FB(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YKDW[0x4];                                   // 0x01FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    PushableActive;                                          // 0x0200(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float_FullPrecision                     PushableProgressAuthority;                               // 0x0218(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Int32                                   CurrentEndPoint;                                         // 0x0230(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PushableProgress;                                        // 0x0248(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUpdateMarkerWithProgress;                               // 0x024C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUpdateMarkerWithHealth;                                 // 0x024D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UA63[0x2];                                   // 0x024E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentSpeedScale;                                       // 0x0250(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TQFA[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_UInt8                                   ReplicatedMovementState;                                 // 0x0258(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPushableActivated;                                     // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPushableCompleted;                                     // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPushableProgressUpdated;                               // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPushableReachedEndPoint;                               // 0x02A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPushableMovementTypeChanged;                           // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FPushableComponentProperties                        PushableComponentProperties;                             // 0x02C0(0x0024) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GO4D[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FPushableComponentProperties            ReplicatedPushableComponentProperties;                   // 0x02E8(0x0038) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		struct FFollowerPushableComponentProperties                FollowerPushableComponentProperties;                     // 0x0320(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FReplicated_FFollowerPushableComponentProperties    ReplicatedFollowerPushableComponentProperties;           // 0x0328(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TArray<struct FPushableEndPoint>                           PushableEndPoints;                                       // 0x0340(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicatedArray_PushableEndPoints                  ReplicatedPushableEndPoints;                             // 0x0350(0x0020) Net, RepNotify, NativeAccessSpecifierPublic
		struct FDataTableRowSelection                              PushingIntervalScoreEvent;                               // 0x0370(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		struct FDataTableRowSelection                              PushingCompleteScoreEvent;                               // 0x0388(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bCanBeBasedWhilePushable;                                // 0x03A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M8X4[0x3];                                   // 0x03A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LeaderStartingDistance;                                  // 0x03A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HitchTime;                                               // 0x03A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P5EM[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPrimitiveComponent*                                 PushingCollisionComponent;                               // 0x03B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              OwnerSiegeMesh;                                          // 0x03B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IB9G[0x58];                                  // 0x03C0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        OwnerAKComponent;                                        // 0x0418(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L4XB[0x10];                                  // 0x0420(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPushingComponent*                                   OwnersPushingComponent;                                  // 0x0430(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_Bool                                    PushableIsReversing;                                     // 0x0438(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicated_Float                                   PushableReverseEndProgress;                              // 0x0450(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9DL2[0x8];                                   // 0x0468(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CompletedEndPoints[0x50];                                // 0x0468(0x0050) UNKNOWN PROPERTY: SetProperty
		bool                                                       IsPlayingTravelSound;                                    // 0x04C0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V4ZW[0x7];                                   // 0x04C1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SkipToEndOfCurrentEndPoint();
		void SetPushingCollisionComponent(class UPrimitiveComponent* NewPushingCollisionComponent);
		void SetPushableMovementType(TBL_EPushableMovementType NewMovementType);
		void SetPushableComponentProperties(const struct FPushableComponentProperties& Props);
		void SetFollowerPushableComponentProperties(const struct FFollowerPushableComponentProperties& Props);
		void SetCurrentEndPointCinematic(bool CinematicEndPoint);
		void ReversePushableByDistance(float Distance);
		void ResetProgress(float NewProgress);
		void ReConfigurePushable(TBL_EPushableMovementType NewMovementType, const struct FPushableComponentProperties& IndependentAndLeaderProperties, const struct FFollowerPushableComponentProperties& FollowerProperties, class APushableSplineActor* NewSplineActor, TArray<struct FPushableEndPoint> NewEndPoints, TArray<class AActor*> NewFollowerPushables, float TimeToComplete, float TravelSpeedToNewSpline, const struct FLatentActionInfo& LatentInfo);
		void PushableMoveDelegateComplete();
		void ProceedToNextEndPoint();
		void OnRep_ReplicatedSplineActor();
		void OnRep_ReplicatedMovementState();
		void OnRep_PushableProgressAuthority();
		void OnRep_PushableMovementType();
		void OnRep_PushableEndPoints();
		void OnRep_PushableComponentProperties();
		void OnRep_PushableActive();
		void OnRep_FollowerPushables();
		void OnRep_FollowerPushableComponentProperties();
		void OnRep_CurrentEndPoint();
		void OnPlayersInCaptureVolumeChanged(TArray<class ATBLCharacter*> Players);
		void OnOwningTeamHasChanged(class ATBLTeam* OwningTeam);
		void OnHealthChanged(float Amount, class AActor* Initiator);
		void OnControllingTeamHasChanged(class ATBLTeam* ControllingTeam);
		void OnCaptureStateChanged(TBL_ETeamCapturePointComponentState CaptureState);
		bool IsPushableActive();
		bool IsLeader();
		bool IsIndependent();
		bool IsFollower();
		class APushableSplineActor* GetSplineActor();
		TArray<class UPrimitiveComponent*> GetSimulatingPhysicsComponents();
		class UPrimitiveComponent* GetPushingCollisionComponent();
		void GetPushableProgressSummary(float* Progress, struct FPushableEndPoint* OutCurrentEndPoint, float* ProgressPercent);
		float GetProgressToNextPoint();
		void FollowerPushableMovementTypeUpdated();
		void CheckForBlockingItemCollision();
		void AddPushableAuthorityProgress(float Progress);
		void ActivatePushable(bool Active);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PushableSiegeActor
	 * Size -> 0x00F8 (FullSize[0x03E8] - InheritedSize[0x02F0])
	 */
	class APushableSiegeActor : public ATBLActor
	{
	public:
		unsigned char                                              UnknownData_JLT7[0x10];                                  // 0x02F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     DefaultSceneComponent;                                   // 0x0300(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        AvoidanceUID;                                            // 0x0308(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FNavAvoidanceMask                                   AvoidanceGroup;                                          // 0x030C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		bool                                                       bUseRVOAvoidance;                                        // 0x0310(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BKGD[0xF];                                   // 0x0311(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AvoidanceHeight;                                         // 0x0320(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U1LW[0x8];                                   // 0x0324(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             AvoidanceLocation;                                       // 0x032C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       StationaryPhysAsset;                                     // 0x0338(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       PushablePhysAsset;                                       // 0x0340(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       StationaryPhysAssetLowLod;                               // 0x0348(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPhysicsAsset*                                       PushablePhysAssetLowLod;                                 // 0x0350(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDedicatedServerUseLowLodPhysics;                        // 0x0358(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NC9U[0x3];                                   // 0x0359(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        LowLodPhysAssetLevel;                                    // 0x035C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPushableComponent*                                  PushableComponent;                                       // 0x0360(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPushingComponent*                                   PushingComponent;                                        // 0x0368(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTeamCapturePointComponent*                          TeamCapturePoint;                                        // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UHudMarkerDisplayComponent*                          HudMarkerDisplay;                                        // 0x0378(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObjectiveStatusDisplayComponent*                    ObjectiveStatusDisplay;                                  // 0x0380(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTBLNavModifierComponent*                            TBLNavModifier;                                          // 0x0388(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              SiegeMesh;                                               // 0x0390(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       PawnPushingCollisionComponent;                           // 0x0398(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     HudMarkerComponentLocation;                              // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        AudioComponent;                                          // 0x03A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicated_UInt8                                   ReplicatedSiegeState;                                    // 0x03B0(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             PushableReachedEndPoint;                                 // 0x03C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             PushableComplete;                                        // 0x03D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected

	public:
		void UpdateSkeletalMesh();
		void SiegeStateAnimationUpdated(TBL_ESiegeActorState NewState);
		void SetSiegeState(TBL_ESiegeActorState NewState);
		void SetAvoidanceEnabled(bool bEnable);
		void OnRep_ReplicatedSiegeState();
		void OnPushableReachedEndPoint(int EndPointNum, const struct FPushableEndPoint& EndPoint, bool IsLastEndPoint);
		void OnPushableCompleted();
		void OnPushableActivated(bool bIsActive);
		void OnMeshLODChanged();
		void AddLogEntry(const class FString& LogEntry);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PushingComponent
	 * Size -> 0x0108 (FullSize[0x0210] - InheritedSize[0x0108])
	 */
	class UPushingComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_B4KR[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnOverlapCharacters;                                     // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bCannotBePushed;                                         // 0x0128(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HBI3[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinPushSpeed;                                            // 0x012C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxPushSpeed;                                            // 0x0130(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingPushSpeed;                                        // 0x0134(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingPushBackSpeed;                                    // 0x0138(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallingOverlapOffset;                                    // 0x013C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CollisionProfileName;                                    // 0x0140(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PushedVelocity;                                          // 0x0148(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BasePushingPriority;                                     // 0x0154(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicated_Int32                                   PushingPriority;                                         // 0x0158(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicated_FVector                                 DesiredPushedVelocity;                                   // 0x0170(0x0020) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EPushingDirection                                      PushingDirection;                                        // 0x0190(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KLD6[0x3];                                   // 0x0191(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PushedTime;                                              // 0x0194(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             PreviousLocation;                                        // 0x0198(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             Velocity;                                                // 0x01A4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOwnerIsCharacter;                                       // 0x01B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y9TZ[0x7];                                   // 0x01B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int, int>                                             PushingInstances;                                        // 0x01B8(0x0050) Protected, NativeAccessSpecifierProtected
		int                                                        PushingInstanceId;                                       // 0x0208(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WMR1[0x4];                                   // 0x020C(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdatePushingWhileFalling(float DeltaSeconds);
		void UpdatePushing(float DeltaSeconds, const struct FVector& OldLocation);
		void UpdatePushed(float DeltaTime);
		bool ShouldPush(class AActor* OtherActor);
		void SetPushingDirection(TBL_EPushingDirection Direction);
		void SetPushedVelocity(const struct FVector& PushVel);
		void PushActor(class AActor* Actor, const struct FVector& PushVel);
		void OnRep_PushingPriority();
		void OnRep_DesiredPushedVelocity();
		void OnCharacterMovementUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
		bool HasEqualPriority(class AActor* OtherActor);
		struct FVector GetPushVelocity(class AActor* PushingActor, class AActor* OtherActor);
		float GetPushingRadius(class AActor* Actor);
		struct FVector GetOwnerVelocity();
		struct FVector GetFallingPushDirection(class AActor* PushingActor, class AActor* OtherActor, float DeltaSeconds);
		TArray<class UPrimitiveComponent*> GetCollisionComponents();
		bool FindOverlappingCharacters(TArray<class ATBLCharacterBase*>* OutCharacters, const struct FVector& Offset);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RallyPoint
	 * Size -> 0x00A0 (FullSize[0x0358] - InheritedSize[0x02B8])
	 */
	class ARallyPoint : public AAINavPoint
	{
	public:
		unsigned char                                              ProhibitedClasses[0x50];                                 // 0x02B8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              AllowedClasses[0x50];                                    // 0x0308(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		bool IsAllowedPawnClass(class APawn* Pawn);
		bool HasPawnClassFilters();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InteractableComponent
	 * Size -> 0x0358 (FullSize[0x0460] - InheritedSize[0x0108])
	 */
	class UInteractableComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_L808[0x18];                                  // 0x0108(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInteractableComponent*                              OverrideInteractable;                                    // 0x0120(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseHeldInitiated;                                      // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUse;                                                   // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseHeld;                                               // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseSyncFailed;                                         // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCooldown;                                              // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseReleased;                                           // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableReachable;                                 // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableUnreachable;                               // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableFocused;                                   // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableLostFocus;                                 // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteracbleUsesUpdated;                                 // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableEnabled;                                   // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPawnChanged;                                           // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnCanShowUI;                                             // 0x01F8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnCanBeUsed;                                             // 0x0208(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class APawn*                                               UsingPawn;                                               // 0x0218(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_AActorPtr                               CurrentUsingPawn;                                        // 0x0220(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        InitialUses;                                             // 0x0238(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZSTW[0x4];                                   // 0x023C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Int32                                   Uses;                                                    // 0x0240(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowProximityCheck;                                    // 0x0258(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8O77[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MaxUses;                                                 // 0x025C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UseRechargeTime;                                         // 0x0260(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        RechargeStacks;                                          // 0x0264(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_EInteractableRechargeRule               ReplicatedRechargeRule;                                  // 0x0268(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TBL_EInteractableRechargeRule                              RechargeRule;                                            // 0x0280(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O4BL[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_EInteractionType                        ReplicatedInteractionType;                               // 0x0288(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TBL_EInteractionType                                       InteractionType;                                         // 0x02A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0UCZ[0x7];                                   // 0x02A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                ActorName;                                               // 0x02A8(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x02C0(0x0018) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class FName                                                KeyBind;                                                 // 0x02D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInteractableUILocation                                UILocation;                                              // 0x02E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               AllowedTeam;                                             // 0x02E1(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyAllowOwningPlayer;                                  // 0x02E2(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MTEJ[0x5];                                   // 0x02E3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ValidCollisionComponents;                                // 0x02E8(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ValidCollisionComponentSet[0x50];                        // 0x02F8(0x0050) UNKNOWN PROPERTY: SetProperty
		bool                                                       bCheckValidEquipState;                                   // 0x0348(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInteractCombatState                                   InteractCombatState;                                     // 0x0349(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RQF7[0x6];                                   // 0x034A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_EFaction                                UseableByTeam;                                           // 0x0350(0x0018) Net, NoDestructor, NativeAccessSpecifierPublic
		float                                                      InitiateUseDuration;                                     // 0x0368(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S32Y[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Float                                   ReplicatedInitiateUseDuration;                           // 0x0370(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DecayRate;                                               // 0x0388(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Cooldown;                                                // 0x038C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentCooldownTime;                                     // 0x0390(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnCooldown;                                             // 0x0394(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JM4O[0x3];                                   // 0x0395(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentUseTime;                                          // 0x0398(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsUseHeld;                                              // 0x039C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_48LZ[0x3];                                   // 0x039D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ItemRequiredToUse;                                       // 0x03A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStageActorAction                                   StageActorAction;                                        // 0x03A8(0x0030) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		unsigned char                                              ConfigWidgetClass[0x28];                                 // 0x03D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              WidgetClass[0x28];                                       // 0x0400(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       bShouldHaveHudMarker;                                    // 0x0428(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoPickupOnly;                                         // 0x0429(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2HQM[0x6];                                   // 0x042A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    bEnabled;                                                // 0x0430(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ND6L[0x8];                                   // 0x0448(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ATBLCharacter*>                               HoldingCharacterList;                                    // 0x0450(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void Use(class APawn* Pawn);
		void StopRechargeTimer();
		void SetUseableByTeam(TBL_EFaction EFaction);
		void SetRechargeRule(TBL_EInteractableRechargeRule InRechargeRule);
		void SetOnlyAllowOwningPlayer(bool bInOnlyAllowOwningPlayer);
		void SetInteractionType(TBL_EInteractionType InInteractionType);
		void SetInitiateUseDuration(float InInitiateUseDuration);
		void SetEnabled(bool Enabled, bool bForceClient);
		void RestartRechargeTimer();
		void OnRep_Uses();
		void OnRep_RechargeRule();
		void OnRep_InteractionType();
		void OnRep_InitiateUseDuration();
		void OnRep_Enabled();
		void OnRep_CurrentUsingPawn();
		bool IsValidCollisionComponent(class UPrimitiveComponent* Component);
		TArray<class UPrimitiveComponent*> GetValidCollisionComponents();
		int GetUses();
		TBL_EFaction GetUseableByTeam();
		TBL_EInteractableRechargeRule GetRechargeRule();
		TBL_EInteractionType GetInteractionType();
		class UInteractableComponent* GetInteractableComponent();
		bool GetEnabled();
		bool CanShowUI(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RepairableComponent
	 * Size -> 0x0010 (FullSize[0x0470] - InheritedSize[0x0460])
	 */
	class URepairableComponent : public UInteractableComponent
	{
	public:
		float                                                      HealingAmount;                                           // 0x0460(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       CanRepairDeadActor;                                      // 0x0464(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L6I9[0x3];                                   // 0x0465(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UStatsComponent>                      StatsComponent;                                          // 0x0468(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ReplicatedCollisionActor
	 * Size -> 0x0008 (FullSize[0x02F8] - InheritedSize[0x02F0])
	 */
	class AReplicatedCollisionActor : public ATBLActor
	{
	public:
		bool                                                       bReplicatedCollision;                                    // 0x02F0(0x0001) Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CHVC[0x7];                                   // 0x02F1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetReplicatedCollision(bool bEnabled);
		void OnRep_ReplicatedCollision();
		void OnCollisionChanged(bool bEnabled);
		bool GetReplicatedCollision();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ReplicatedSubobjectInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UReplicatedSubobjectInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RevivalWorker
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class URevivalWorker : public UTBLAchievementWorker
	{
	public:
		unsigned char                                              UnknownData_KUXZ[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        NumOthersRevivedRequired;                                // 0x0050(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        NumTimesRevivedRequired;                                 // 0x0054(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ReviveOthersId;                                          // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              BeRevivedId;                                             // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRevivedOtherPlayer(class APawn* Pawn);
		void OnPlayerRevived(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RewardTable
	 * Size -> 0x0000 (FullSize[0x00C8] - InheritedSize[0x00C8])
	 */
	class URewardTable : public UDataTable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RichTextEmbeddedWidgetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class URichTextEmbeddedWidgetInterface : public UInterface
	{
	public:
		void OnReceivedEmbedInfo(const struct FRichTextEmbedInfo& Info);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RoundBasedSpawnQueuer
	 * Size -> 0x0010 (FullSize[0x0090] - InheritedSize[0x0080])
	 */
	class URoundBasedSpawnQueuer : public USpawnQueuer
	{
	public:
		TArray<class AController*>                                 PlayersWaitingToSpawn;                                   // 0x0080(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ScrollWheelCapture
	 * Size -> 0x0020 (FullSize[0x0128] - InheritedSize[0x0108])
	 */
	class UScrollWheelCapture : public UWidget
	{
	public:
		class FScriptMulticastDelegate                             OnMouseWheelScrolledEvent;                               // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4OBF[0x10];                                  // 0x0118(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Spawner
	 * Size -> 0x0340 (FullSize[0x0598] - InheritedSize[0x0258])
	 */
	class ASpawner : public AActor
	{
	public:
		struct FSpawnWaveParamOverrides                            SpawnWaveParams;                                         // 0x0258(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawningStarted;                                       // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawningEnded;                                         // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnerSpawnedCharacter;                               // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnerPossessedCharacter;                             // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		float                                                      DelayBeforeSpawningStops;                                // 0x0330(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             StartCameraOffset;                                       // 0x0334(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            StartCameraRotation;                                     // 0x0340(0x000C) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      CameraInterpTime;                                        // 0x034C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C8OS[0x4];                                   // 0x0350(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeBeforeVulnerable;                                    // 0x0354(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSkipLocationValidation;                                 // 0x0358(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TFNH[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpawnerSpawnReservation>                    SpawnReservations;                                       // 0x0360(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        NextReservationToSpawn;                                  // 0x0370(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        SpawnLocationIndex;                                      // 0x0374(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ATBLCharacter*>                               SpawnedCharacters;                                       // 0x0378(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ATBLCharacter*>                               PendingPossessCharacters;                                // 0x0388(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Rows;                                                    // 0x0398(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Columns;                                                 // 0x039C(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RowSpacing;                                              // 0x03A0(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ColumnSpacing;                                           // 0x03A4(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSpawnScoringConfig                                 SpawningConfig;                                          // 0x03A8(0x0018) Edit, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bPrioritizeFrontmost;                                    // 0x03C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DEAM[0x3];                                   // 0x03C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SnapToGroundDistance;                                    // 0x03C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RowOffsetPercent;                                        // 0x03C8(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinimumPlayerDistance;                                   // 0x03CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnerScoreMultiplier;                                  // 0x03D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastSpawnTime;                                           // 0x03D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PostSpawnPossesionTime;                                  // 0x03D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L6EK[0xC];                                   // 0x03DC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASpawnWave*                                          SpawnWave;                                               // 0x03E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bSpawning;                                               // 0x03F0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPossessing;                                             // 0x03F1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bWaveLocked;                                             // 0x03F2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bChildSpawner;                                           // 0x03F3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPreviousWaveControlRestricted;                          // 0x03F4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPendingLock;                                            // 0x03F5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ND0O[0x2];                                   // 0x03F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASpawnWave*                                          PendingSpawnWave;                                        // 0x03F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             SpawnCenter;                                             // 0x0400(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GYH6[0x4];                                   // 0x040C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USpawnLocationComponent*>                     SpawnComponents;                                         // 0x0410(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSpawnComponentData>                         SpawnComponentData;                                      // 0x0420(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C4LO[0x58];                                  // 0x0430(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EFaction, float>                                  SpawnerScore;                                            // 0x0488(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VU67[0x10];                                  // 0x04D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpawnerScoreMethodClass;                                 // 0x04E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UClass*, int>                                   SpawnedSpecialCarryableSpawnSpecs;                       // 0x04F0(0x0050) NativeAccessSpecifierPrivate
		class URandomCarryableSpawnLoadout*                        RandomCarryableLoadout;                                  // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<TWeakObjectPtr<class AController>, class UClass*>     EquippedCarryablesByController;                          // 0x0548(0x0050) UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		class ASpawnWave* StartSpawning(TBL_EFaction Faction, const struct FSpawnWaveParamOverrides& InSpawnWaveParams);
		class AForwardSpawnWave* StartForwardSpawning(TArray<class APawn*> PawnsAllowedToSpawn, const struct FSpawnWaveParamOverrides& InSpawnWaveParams);
		class AForcedRespawnSpawnWave* StartForcedSpawning(class AController* SpawnController, const struct FSpawnWaveParamOverrides& InSpawnWaveParams);
		class ATBLCharacter* SpawnCharacter(const struct FTransform& SpawnTransform, class UClass* Class, class AController* Controller);
		void SetupComponentsArray();
		void RequestSpawnQueueSlot();
		void RequestSpawnerScoreUpdate();
		void OnSpawnedCharacter(class ATBLCharacter* NewCharacter, class USceneComponent* SpawnComp);
		void OnPossessedCharacter(class ATBLCharacter* Character, class AController* Controller);
		void LockingWaveDestroyed(class AActor* DestroyedSpawnWave);
		bool IsWaveLocked();
		bool IsValidSpawnLocation(const struct FTransform& OutTransform, class UClass* PawnClass);
		int IsThereAPlayerTooClose(TBL_EFaction Faction, int LocationIndex, bool bIsSpawningIn);
		bool IsPendingLock();
		void HandleOnCustomizationJobsEmptied();
		void HandleAddedReservation(const struct FSpawnerSpawnReservation& Reservation);
		int GetTotalReservations();
		class ASpawnWave* GetSpawnWave();
		class USceneComponent* GetSpawnLocationAndComponent(int Index, struct FTransform* OutTransform, float* SpawnRadius, float* SpawnHalfHeight);
		float GetSpawnerScoreForFaction(TBL_EFaction Faction);
		float GetSpawnerScoreForAllPlayers();
		TArray<class ATBLCharacter*> GetSpawnedCharacters();
		int GetRemainingReservations();
		int GetMinPlayerCount();
		int GetMaxPlayerCount();
		class UClass* GetEquippedCarryableForController(class AController* Controller);
		void GenerateSpawnComponents();
		void ConditionalStopSpawning();
		void Cinematics_StartAllowingControl(class ATBLCharacter* Character);
		void Cinematics_ControllerPossessedPawn(class ATBLPlayerController* Controller, class ATBLCharacter* Pawn);
		void Cinematics_BecameNextSpawner(class ATBLPlayerController* Controller);
		void ActualStopSpawning();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SeatSpawner
	 * Size -> 0x0060 (FullSize[0x05F8] - InheritedSize[0x0598])
	 */
	class ASeatSpawner : public ASpawner
	{
	public:
		class FName                                                SeatActorTag;                                            // 0x0598(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class USiegeMountPoint>>             CurrentSeatMountComponentList;                           // 0x05A0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class USiegeMountPoint>>             PendingSpawnSeatMountComponentList;                      // 0x05B0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class USiegeMountPoint>>             SeatMountComponentIndexList;                             // 0x05C0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class USiegeMountPoint>>             SeatMountComponentList;                                  // 0x05D0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSeatEntry>                                  SeatActorList;                                           // 0x05E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_ESeatSelectionMode                                     SeatSelectionMode;                                       // 0x05F0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5TN9[0x3];                                   // 0x05F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        SeatSelectionIndex;                                      // 0x05F4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSeverBrowserEntryRowStyle
	 * Size -> 0x07C8 (FullSize[0x07F8] - InheritedSize[0x0030])
	 */
	class UTBLSeverBrowserEntryRowStyle : public USlateWidgetStyleContainerBase
	{
	public:
		struct FTableRowStyle                                      RowStyle;                                                // 0x0030(0x07C8) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ServerBrowserList
	 * Size -> 0x0208 (FullSize[0x0310] - InheritedSize[0x0108])
	 */
	class UServerBrowserList : public UWidget
	{
	public:
		unsigned char                                              UnknownData_1N3V[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ItemHeight;                                              // 0x0110(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N98G[0x14];                                  // 0x0114(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		Slate_ESelectionMode                                       SelectionMode;                                           // 0x0128(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2AHF[0x3];                                   // 0x0129(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                TableRowStyleName;                                       // 0x012C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateRowEvent;                                      // 0x0134(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGetServerFilterSettingsEvent;                          // 0x0144(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnLoadingProgressStatusChangedEvent;                     // 0x0154(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnRefreshServerCompleteEvent;                            // 0x0164(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnSelectionChangedEvent;                                 // 0x0174(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_365S[0x14];                                  // 0x0184(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLScrollBarStyleDataAsset*                         ScrollBarStyle;                                          // 0x0198(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NTZ9[0x170];                                 // 0x01A0(0x0170) MISSED OFFSET (PADDING)

	public:
		void UseSavedSort();
		void SortServersByServerType(bool Descending);
		void SortServersByServerName(bool Descending);
		void SortServersByPlayerNumbers(bool Descending);
		void SortServersByPing(bool Descending);
		void SortServersByMapName(bool Descending);
		void SortServersByGameMode(bool Descending);
		void SelectWidget(const struct FBlueprintSessionResult& Item);
		void SelectFirstWidget();
		void RefreshServerList(TBL_EServerListType ListType);
		void RefreshServerEntry(const struct FBlueprintSessionResult& SessionResult);
		void OnRefreshCompleted(bool bSuccess, TBL_EServerListType ListType);
		void OnQueryCompleted(bool bSuccess, TBL_EServerListType ListType);
		void OnPingServerComplete(const struct FBlueprintSessionResult& PingedSession);
		class UWidget* GetSelectedWidget();
		void GetSelectedSession(struct FBlueprintSessionResult* Out);
		int GetCurrentFilteredItemsCount();
		void FetchFilteredList();
		void CreateFakeServers(int NumberOfServers, TArray<class FString> ServerNames, TArray<class FString> MapNamesAndGameModes, TArray<int> ListOfPossibleMaxPlayers);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SGComponent_TargetLocation
	 * Size -> 0x0000 (FullSize[0x0118] - InheritedSize[0x0118])
	 */
	class USGComponent_TargetLocation : public UST_SGComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SiegeMountPoint
	 * Size -> 0x0160 (FullSize[0x03D0] - InheritedSize[0x0270])
	 */
	class USiegeMountPoint : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_J106[0x10];                                  // 0x0270(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CharacterAttachSocketName;                               // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SiegeInventoryItemClass;                                 // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraYawRotationLimit;                                  // 0x0290(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraPitchRotationLimit;                                // 0x0294(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            RotationLimitOffset;                                     // 0x0298(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                MountAnimation;                                          // 0x02A4(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxMountDistance;                                        // 0x02AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxMountAngle;                                           // 0x02B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxMountAngleOffset;                                     // 0x02B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CharacterAnimationSet;                                   // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CharacterAnimationSet1P;                                 // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanDismount : 1;                                        // 0x02C8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YOHD[0x7];                                   // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMountBlendParams                                   MountBlendParams;                                        // 0x02D0(0x00D0) Transient, NoDestructor, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       MountedCharacter;                                        // 0x03A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      SiegeInventoryItem;                                      // 0x03A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        HorizLockId;                                             // 0x03B0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        VertLockId;                                              // 0x03B4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseMountCombatState;                                    // 0x03B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S0PJ[0x3];                                   // 0x03B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UInteractableComponent>               CachedInteractableComponent;                             // 0x03BC(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bPendingSpawn;                                           // 0x03C4(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LCA0[0xB];                                   // 0x03C5(0x000B) MISSED OFFSET (PADDING)

	public:
		void UsePressed(class APawn* InPawn, class UInteractableComponent* InInteractable);
		void UpdateInterpToMountLocation(float DeltaSeconds);
		void SetInteractableComponent(class UInteractableComponent* Interactable);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnCharacterKilledDuringInterp(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnCharacterKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void DismountPressed();
		bool CanMount(class APawn* Pawn);
		void BroadcastPendingSpawn(bool bNewPendingSpawn);
		void BroadcastInterpToMountLocation(class ATBLCharacter* Character);
		void BroadcastDismount(TBL_EDismountType DismountType);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SignificanceInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USignificanceInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SimpleSpawner
	 * Size -> 0x0000 (FullSize[0x0598] - InheritedSize[0x0598])
	 */
	class ASimpleSpawner : public ASpawner
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SingleTargetMethod
	 * Size -> 0x0018 (FullSize[0x01C8] - InheritedSize[0x01B0])
	 */
	class USingleTargetMethod : public UAbilityTargetMethod
	{
	public:
		int                                                        Version;                                                 // 0x01B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTargetSelf;                                             // 0x01B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OAVW[0x3];                                   // 0x01B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayFinishTime;                                         // 0x01B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q3RX[0xC];                                   // 0x01BC(0x000C) MISSED OFFSET (PADDING)

	public:
		void DelayFinish();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SourceType
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class USourceType : public UDataAsset
	{
	public:
		class FString                                              Name;                                                    // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnLocationComponent
	 * Size -> 0x0010 (FullSize[0x04A0] - InheritedSize[0x0490])
	 */
	class USpawnLocationComponent : public UCapsuleComponent
	{
	public:
		int                                                        Priority;                                                // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZRGP[0xC];                                   // 0x0494(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnerScoreMethod
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpawnerScoreMethod : public UObject
	{
	public:
		void GetSpawnerScore(TMap<TBL_EFaction, float>* ScoreResult, const struct FVector& SpawnLocation, TArray<struct FCharacterInfo> CharacterList, const struct FSpawnScoringConfig& Config);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnerScoreMethod_FFA
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class USpawnerScoreMethod_FFA : public USpawnerScoreMethod
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnQueuerComponent
	 * Size -> 0x0000 (FullSize[0x0108] - InheritedSize[0x0108])
	 */
	class USpawnQueuerComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnSequence
	 * Size -> 0x0160 (FullSize[0x03B8] - InheritedSize[0x0258])
	 */
	class ASpawnSequence : public AActor
	{
	public:
		TArray<class ASpawner*>                                    Spawners;                                                // 0x0258(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASpawner*>                                    SpawnerQueue;                                            // 0x0268(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class ASpawner*>                                    PushedSpawners;                                          // 0x0278(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsActive;                                               // 0x0288(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U7I5[0x3];                                   // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        CurrentIndex;                                            // 0x028C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               Faction;                                                 // 0x0290(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AH1P[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        SimultaneousWaves;                                       // 0x0294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SecondsBetweenWaves;                                     // 0x0298(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideWaveTimingToHalfOfSecondsBetweenWaves;          // 0x029C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysKeepOneWaveActive;                                // 0x029D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLoop;                                                   // 0x029E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFastFirstSpawn;                                         // 0x029F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         SecondsBetweenWavesPlayerCountBonus;                     // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         MaxPlayersPlayerCountBonus;                              // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSpawnWaveParamOverrides                            SpawnWaveParams;                                         // 0x02B0(0x0098) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSequenceFinished;                                      // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              ActiveWaves[0x50];                                       // 0x0358(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_PXRC[0x10];                                  // 0x03A8(0x0010) MISSED OFFSET (PADDING)

	public:
		void StartNextWave();
		void SetSpawnerList(TArray<class ASpawner*> SpawnerList);
		void SetSecondsBetweenWaves(float InSecondsBetweenWaves);
		void RemoveSpawner(class ASpawner* Spawner);
		void PushSpawner(class ASpawner* Spawner);
		void Initialize(const struct FSpawnSequenceProperties& Properties);
		void HandleSpawnWaveNotJoinable(class ASpawnWave* SpawnWave);
		void HandleSpawnWaveDestroyed(class AActor* SpawnWave);
		void ForceSpawnController(class AController* Controller);
		void EmptySpawnerList();
		void Deactivate();
		void AddSpawner(class ASpawner* Spawner);
		void ActivateDeactivate(TBL_ESpawnSequenceActivateDeactivateAction Action);
		bool Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CarryableSpawnSpec
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCarryableSpawnSpec : public UObject
	{
	public:
		class UClass*                                              Carryable;                                               // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AssignmentPercentage;                                    // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        GuaranteedMinimumNum;                                    // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.RandomCarryableSpawnLoadout
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class URandomCarryableSpawnLoadout : public UObject
	{
	public:
		TArray<struct FRandomCarryableSpawnSpec>                   CarryableSpecs;                                          // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              Status;                                                  // 0x0038(0x0010) Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              TotalPercent;                                            // 0x0048(0x0010) Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UClass* GetRandomCarryable();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpecialSpawnSpec
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class USpecialSpawnSpec : public UObject
	{
	public:
		class FText                                                SpawnName;                                               // 0x0028(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class UTexture2D*                                          SpawnWaveIcon;                                           // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHorse;                                                  // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutospawnAllowed;                                       // 0x0049(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPromptedSpawn;                                          // 0x004A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseSubclassesOfAllowedClasses;                          // 0x004B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnorePlayerOwnership;                                  // 0x004C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceBotsUseLoadout;                                    // 0x004D(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J48S[0x2];                                   // 0x004E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, class UClass*>                         AllowedClasses;                                          // 0x0050(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		bool IsAllowedClass(class UClass* CharacterClass);
		bool HasAllowedClassList();
		class UClass* GetRandomClassLoadout();
		class UClass* GetAllowedClassLoadout(class UClass* CharacterClass);
		void GetAllowedClassesSet(class ATBLPlayerController* TargetController);
		void GetAllowedClassesList(TArray<class UClass*>* AllowedClassesList, class ATBLPlayerController* TargetController);
		TMap<class UClass*, class UClass*> GetAllowedClasses();
		bool ForceBotsUseLoadout();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpecialItemAbility
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class USpecialItemAbility : public UObject
	{
	public:
		float                                                      MaxCharge;                                               // 0x0028(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7QQ9[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnChargeUpdated;                                         // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpecialItemEquip;                                      // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpecialItemUsed;                                       // 0x0050(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpecialItemUseFailed;                                  // 0x0060(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AInventoryItem*                                      SpecialItem;                                             // 0x0070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentCharge;                                           // 0x0078(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_ESpecialItemChargeType                                 LastChargeType;                                          // 0x007C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MGVY[0x3];                                   // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        LastStackCount;                                          // 0x0080(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EEquippedState                                         LastEquippedState;                                       // 0x0084(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsUsing : 1;                                            // 0x0085(0x0001) BIT_FIELD Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CV3F[0x2];                                   // 0x0086(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       OwnerCharacter;                                          // 0x0088(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VHFC[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUseItem();
		void OnStartHeal(class AActor* HealedActor);
		void OnRechargeTimer();
		void OnPawnRevived(class APawn* RevivedPlayer, class APawn* RevivorPlayer);
		void OnParrySuccess(class ATBLCharacter* ThisCharacter, class ATBLCharacter* OtherCharacter, const struct FParryEventState& ParryEventState);
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		void OnItemStackChanged(class AInventoryItem* Item, int Delta);
		void OnEquippedItemsChanged();
		void OnDamageTaken(const struct FDamageTakenEvent& Event);
		void OnDamageCaused(const struct FDamageTakenEvent& Event);
		void IncreaseStackCount();
		int GetPerkBonus();
		float GetMaxCharge();
		float GetCurrentCharge();
		void DecreaseStackCount();
		void BattlecryAbilityStart();
		void BattlecryAbilityEnd();
		void ApplyHelperBonus();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SphereTargetMethod
	 * Size -> 0x0040 (FullSize[0x0208] - InheritedSize[0x01C8])
	 */
	class USphereTargetMethod : public UShapeTargetMethod
	{
	public:
		bool                                                       bTargetSelf;                                             // 0x01C8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_28TT[0x3];                                   // 0x01C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      SphereRadius;                                            // 0x01CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseZLimiters;                                           // 0x01D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A3DW[0x3];                                   // 0x01D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ZUpLimiter;                                              // 0x01D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ZDownLimiter;                                            // 0x01D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             SphereOffset;                                            // 0x01DC(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseTargetChannel;                                       // 0x01E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		Engine_ECollisionChannel                                   TargetChannel;                                           // 0x01E9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BG9I[0x2];                                   // 0x01EA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxRange;                                                // 0x01EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxTargets;                                              // 0x01F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETargetVisibilityCheck                                 CheckVisibility;                                         // 0x01F4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseControllerRotation;                                  // 0x01F5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseMountRotation;                                       // 0x01F6(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EE4H[0x1];                                   // 0x01F7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DelayFinishTime;                                         // 0x01F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ESphereHitDirection                                    SphereHitDirection;                                      // 0x01FC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D1IJ[0xB];                                   // 0x01FD(0x000B) MISSED OFFSET (PADDING)

	public:
		void GetSphereCenter(struct FVector* SphereCenter, struct FTransform* ControllerTransform);
		void DelayFinish();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpinBoxInt
	 * Size -> 0x0400 (FullSize[0x0508] - InheritedSize[0x0108])
	 */
	class USpinBoxInt : public UWidget
	{
	public:
		int                                                        Value;                                                   // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      ValueDelegate;                                           // 0x010C(0x0010) ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WB0G[0x4];                                   // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpinBoxStyle                                       WidgetStyle;                                             // 0x0120(0x02E8) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class USlateWidgetStyleAsset*                              Style;                                                   // 0x0408(0x0008) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Delta;                                                   // 0x0410(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        SliderExponent;                                          // 0x0414(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateFontInfo                                      Font;                                                    // 0x0418(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MinDesiredWidth;                                         // 0x0470(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ClearKeyboardFocusOnCommit;                              // 0x0474(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       SelectAllTextOnCommit;                                   // 0x0475(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XG05[0x2];                                   // 0x0476(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateColor                                         ForegroundColor;                                         // 0x0478(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnValueChanged;                                          // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnValueCommitted;                                        // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBeginSliderMovement;                                   // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndSliderMovement;                                     // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              bOverride_MinValue : 1;                                  // 0x04E0(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bOverride_MaxValue : 1;                                  // 0x04E0(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bOverride_MinSliderValue : 1;                            // 0x04E0(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bOverride_MaxSliderValue : 1;                            // 0x04E0(0x0001) BIT_FIELD Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N8XJ[0x3];                                   // 0x04E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MinValue;                                                // 0x04E4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MaxValue;                                                // 0x04E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MinSliderValue;                                          // 0x04EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MaxSliderValue;                                          // 0x04F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CYLJ[0x14];                                  // 0x04F4(0x0014) MISSED OFFSET (PADDING)

	public:
		void SetValue(int NewValue);
		void SetMinValue(int NewValue);
		void SetMinSliderValue(int NewValue);
		void SetMaxValue(int NewValue);
		void SetMaxSliderValue(int NewValue);
		void SetForegroundColor(const struct FSlateColor& InForegroundColor);
		void OnSpinBoxValueCommittedEvent__DelegateSignature(int InValue, SlateCore_ETextCommit CommitMethod);
		void OnSpinBoxValueChangedEvent__DelegateSignature(int InValue);
		void OnSpinBoxBeginSliderMovement__DelegateSignature();
		int GetValue();
		int GetMinValue();
		int GetMinSliderValue();
		int GetMaxValue();
		int GetMaxSliderValue();
		void ClearMinValue();
		void ClearMinSliderValue();
		void ClearMaxValue();
		void ClearMaxSliderValue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StagedLevelBlueprintInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStagedLevelBlueprintInterface : public UInterface
	{
	public:
		void GetFirstStage();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StageInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UStageInterface : public UInterface
	{
	public:
		void StartStage();
		bool IsStageReadyToComplete();
		float GetTimeRemainingPercent();
		float GetTimeRemaining();
		int GetStageIdNum();
		class AActor* GetStageCommander(TBL_EFaction Faction);
		void CompleteStage();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StandardDamage
	 * Size -> 0x0020 (FullSize[0x0190] - InheritedSize[0x0170])
	 */
	class UStandardDamage : public UAction
	{
	public:
		float                                                      BaseDamage;                                              // 0x0170(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_61BJ[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageSource*                                       DamageType;                                              // 0x0178(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAttackType*                                         AttackType;                                              // 0x0180(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EDamageProperty                                        DamageProperty;                                          // 0x0188(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D9NJ[0x7];                                   // 0x0189(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StartJump
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UStartJump : public UAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StartMovement
	 * Size -> 0x0050 (FullSize[0x01C0] - InheritedSize[0x0170])
	 */
	class UStartMovement : public UAction
	{
	public:
		TBL_EAbilitiesMovementSequence                             MovementSequenceName;                                    // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YJEV[0x3];                                   // 0x0171(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StrengthScaling;                                         // 0x0174(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bApplyToInitiator;                                       // 0x0178(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExecuteClientFirst;                                     // 0x0179(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4CBP[0x6];                                   // 0x017A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCondition*>                                  Conditions;                                              // 0x0180(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     StartActions;                                            // 0x0190(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     FinishActions;                                           // 0x01A0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   MovementSequence;                                        // 0x01B0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementInstance*                                   MovementInstance;                                        // 0x01B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnStartMovement();
		void OnFinishMovement();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StatsComponent
	 * Size -> 0x03C0 (FullSize[0x04C8] - InheritedSize[0x0108])
	 */
	class UStatsComponent : public UTBLComponent
	{
	public:
		unsigned char                                              UnknownData_OCIB[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStatsComponentInitialized;                             // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPreBroadcastDamage;                                    // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPreDamageTaken;                                        // 0x0138(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageTaken;                                           // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPostDamageTaken;                                       // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageCaused;                                          // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageFailed;                                          // 0x0178(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKilled;                                                // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnScoredKill;                                            // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnExperienceLevelChanged;                                // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatChanged;                                           // 0x01B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatHealthChanged;                                     // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStaminaDrained;                                        // 0x01D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealOverTimeStart;                                     // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealOverTimeAdded;                                     // 0x01F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHealOverTimeEnd;                                       // 0x0208(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FStatsArray                                         Stats;                                                   // 0x0218(0x0018) Transient, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   ReplicatedHealth;                                        // 0x0230(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   ReplicatedMaxHealth;                                     // 0x0248(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   ReplicatedStamina;                                       // 0x0260(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UStatsDelegateObject*>                        StatChangedDelegates;                                    // 0x0278(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicatedArray_FModEntry                          Mods;                                                    // 0x0288(0x0020) Net, Transient, NativeAccessSpecifierPublic
		TArray<struct FBaseStatEntry>                              BaseStats;                                               // 0x02A8(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          StatsDataTable;                                          // 0x02B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StatsDataTableRowName;                                   // 0x02C0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStatsScaleToPlayerCount;                                // 0x02C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AIFG[0x7];                                   // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         PlayerCountHealthScalingCurve;                           // 0x02D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReplicateStats;                                         // 0x02D8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableRegenTimer;                                      // 0x02D9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableProjectileDamage;                                // 0x02DA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableSiegeDamage;                                      // 0x02DB(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETeamDamageOptions                                     OnTeamDamage;                                            // 0x02DC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F7JN[0x3];                                   // 0x02DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDamageSource*>                               AllowedDamageSource;                                     // 0x02E0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FStatRegeneration>                           StatRegeneration;                                        // 0x02F0(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugGotoDowned;                                        // 0x0300(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CRPO[0x3];                                   // 0x0301(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreviousStaminaReduction;                                // 0x0304(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EConditionType                                         OnDamageApplyCondition;                                  // 0x0308(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1V6N[0x3];                                   // 0x0309(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastParrySuccessTime;                                    // 0x030C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDamageTakenEvent                                   LastDamageEvent;                                         // 0x0310(0x0148) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       bAppliedPlayerCountHealthScaling;                        // 0x0458(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H6L1[0x3];                                   // 0x0459(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        RegenDisabledId;                                         // 0x045C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDisabledRegenArray                                 RegenDisabled;                                           // 0x0460(0x0010) Transient, NativeAccessSpecifierPrivate
		TArray<struct FHealOverTime>                               HealOverTime;                                            // 0x0470(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FDebugHealOverTime>                          DebugHealOverTime;                                       // 0x0480(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bGatherDebugHealOverTime;                                // 0x0490(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JKR2[0xF];                                   // 0x0491(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BeginPlayTime;                                           // 0x04A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bLoggedKillEvent;                                        // 0x04A4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TBL_EFaction                                               AllowedDamagingFaction;                                  // 0x04A5(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AE0P[0x2];                                   // 0x04A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_EFaction                                ReplicatedAllowedDamagingFaction;                        // 0x04A8(0x0018) Edit, Net, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C0V3[0x8];                                   // 0x04C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void UndoDisableRegeneration(int ID);
		void StartHealOverTime(float Amount, float Speed, class UCurveFloat* Curve, class ATBLCharacter* Healer, class ATBLPlayerState* InstigatorPlayerState, bool AwardHealingScore, bool bOverheal, TBL_EHealingSource HealingSource);
		void SetBase(TBL_EStat Stat, float Value, bool bCanOverCharge);
		void SetAllowedDamagingFaction(TBL_EFaction InFaction);
		void ServerDebugSetBase(TBL_EStat Stat, float Value);
		void ServerDebugApplyDamage(float Damage, class UDamageSource* DamageSource);
		void ServerDebugApplyBonus(TBL_EStat Stat, float Value);
		void ReceiveHealthChanged(float Amount, class UDamageSource* DamageSource, class AActor* InitiatorActor);
		void ReceiveExperienceChanged(float Amount, class UDamageSource* DamageSource, class AActor* InitiatorActor);
		void OnRep_Stamina();
		void OnRep_MaxHealth();
		void OnRep_Health();
		bool IsRegenerationDisabled(TBL_EStat Stat);
		bool IsDead();
		bool HasMod(TBL_EMod Mod);
		bool HasHealOverTimeOfSource(TBL_EHealingSource HealingSource);
		bool HasHealOverTime();
		class UStatsDelegateObject* GetStatChangedDelegate(TBL_EStat Stat);
		struct FStatEntry GetStat(TBL_EStat Stat);
		float GetHealthPercent();
		float GetHealOverTimeLeft();
		int GetExperienceLevel();
		TBL_EFaction GetAllowedDamagingFaction();
		void DrainStamina(float Amount);
		int DisableRegeneration(TBL_EStat Stat);
		float Current(TBL_EStat Stat);
		void BroadcastKilled(TArray<class AActor*> Killers, const struct FBroadcastKilledParams& Params);
		void BroadcastHealOverTime(float Amount, float Speed, class UCurveFloat* Curve, class ATBLPlayerState* InstigatorPlayerState, bool bOverheal, TBL_EHealingSource HealingSource);
		void BroadcastDamageTaken(const struct FDamageTakenEventCompressed& Event, int InvocationId);
		float BonusPercent(TBL_EStat Stat);
		float Bonus(TBL_EStat Stat);
		float base(TBL_EStat Stat);
		bool STATIC_ApplyPlayerCountHealthScalingCurve(class UObject* Target, class UCurveFloat* OverrideCurve);
		void ApplyModDelta(TBL_EMod Mod, int Delta);
		void ApplyBonusPercent(TBL_EStat Stat, float Value, bool bCanOverCharge);
		void ApplyBonus(TBL_EStat Stat, float Value, bool bCanOverCharge);
		void AddStamina(float Amount);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StatsDelegateObject
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UStatsDelegateObject : public UTBLObject
	{
	public:
		class FScriptMulticastDelegate                             StatChangedDelegate;                                     // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.StoreOffersList
	 * Size -> 0x0008 (FullSize[0x0370] - InheritedSize[0x0368])
	 */
	class UStoreOffersList : public UListView
	{
	public:
		class UTBLScrollBarStyleDataAsset*                         ScrollBarStyle;                                          // 0x0368(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAchievementSettings
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UTBLAchievementSettings : public UDeveloperSettings
	{
	public:
		TArray<class UClass*>                                      AchievementWorkers;                                      // 0x0038(0x0010) Edit, ZeroConstructor, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DebugAchievementCountCap;                                // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AC1S[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAchievementSubsystem
	 * Size -> 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
	 */
	class UTBLAchievementSubsystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_Y469[0x28];                                  // 0x0030(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class UTBLAchievementWorker*>          WorkerMap;                                               // 0x0058(0x0050) NativeAccessSpecifierPrivate

	public:
		void ResetAchievements();
		void OnWorldDestroy(class UWorld* World);
		void OnWorldCreation(class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLActivitySubsystem
	 * Size -> 0x00A8 (FullSize[0x00D8] - InheritedSize[0x0030])
	 */
	class UTBLActivitySubsystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_7FX2[0xA8];                                  // 0x0030(0x00A8) MISSED OFFSET (PADDING)

	public:
		void OnWorldCleanup(class UWorld* World, bool bSessionEnded, bool bCleanupResources);
		void OnPostLoadMap(class UWorld* LoadedWorld);
		void HandleStateChanged(const class FName& CurrentState);
		void HandleOnTitleDataUpdated();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CharacterCustomization
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UCharacterCustomization : public UObject
	{
	public:
		TMap<class UClass*, class UCTBase*>                        CustomizationMap;                                        // 0x0028(0x0050) Edit, NativeAccessSpecifierPrivate
		TMap<class UClass*, class UCTBase*>                        Weapons;                                                 // 0x0078(0x0050) NativeAccessSpecifierPrivate
		TArray<struct FPrimaryAssetId>                             AppendedAssets;                                          // 0x00C8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DefaultCharacterCustomization
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UDefaultCharacterCustomization : public UObject
	{
	public:
		TArray<class UCTBase*>                                     DefaultCharacterCustomizations;                          // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DefaultWeaponCustomization
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UDefaultWeaponCustomization : public UObject
	{
	public:
		unsigned char                                              DefaultCustomizationWeaponMap[0x50];                     // 0x0028(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CustomizationDebugPresetSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCustomizationDebugPresetSettings : public UObject
	{
	public:
		TArray<struct FCustomizationPreset>                        Presets;                                                 // 0x0028(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DamagerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDamagerInterface : public UInterface
	{
	public:
		bool ShouldDealTeamDamageAgainst(class AActor* TargetTeammate);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DamageSource
	 * Size -> 0x0050 (FullSize[0x00F8] - InheritedSize[0x00A8])
	 */
	class UDamageSource : public UAssemblyBlueprint
	{
	public:
		class FString                                              Name;                                                    // 0x00A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                DisplayName;                                             // 0x00B8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCanvasIcon                                         Icon;                                                    // 0x00D0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ArmourPenetration;                                       // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FriendlyFirePercent;                                     // 0x00EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       FriendlyFireCanInterrupt;                                // 0x00F0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZAC1[0x7];                                   // 0x00F1(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Delay
	 * Size -> 0x0020 (FullSize[0x0190] - InheritedSize[0x0170])
	 */
	class UDelay : public UAction
	{
	public:
		float                                                      Delay;                                                   // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C30F[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAction*>                                     Actions;                                                 // 0x0178(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0L7V[0x8];                                   // 0x0188(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DelegateWrapper_ActorDestroyed
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UDelegateWrapper_ActorDestroyed : public UObject
	{
	public:
		unsigned char                                              UnknownData_BM1B[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnExecute(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DemoList
	 * Size -> 0x0078 (FullSize[0x0180] - InheritedSize[0x0108])
	 */
	class UDemoList : public UWidget
	{
	public:
		float                                                      ItemHeight;                                              // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PDED[0x14];                                  // 0x010C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		Slate_ESelectionMode                                       SelectionMode;                                           // 0x0120(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EH5R[0x3];                                   // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnGenerateRowEvent;                                      // 0x0124(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H7C8[0x4C];                                  // 0x0134(0x004C) MISSED OFFSET (PADDING)

	public:
		void RefreshDemoList();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FollowMasterSkeletalMeshComponent
	 * Size -> 0x0050 (FullSize[0x0870] - InheritedSize[0x0820])
	 */
	class UFollowMasterSkeletalMeshComponent : public UPoseableMeshComponent
	{
	public:
		int                                                        NumFrames;                                               // 0x0820(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFollowServerAnimation;                                  // 0x0824(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DTJ4[0x3];                                   // 0x0825(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class USkeletalMeshComponent>               FollowPoseComponent;                                     // 0x0828(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int16_t                                                    PoseOffset;                                              // 0x0830(0x0002) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XOTO[0x6];                                   // 0x0832(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       FollowCharacter;                                         // 0x0838(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FTransform>                                  PoseBuffer;                                              // 0x0840(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FVector>                                     LocationBuffer;                                          // 0x0850(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H6TV[0x10];                                  // 0x0860(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetPoseOffset(int Offset);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SpawnWave
	 * Size -> 0x01E8 (FullSize[0x04D8] - InheritedSize[0x02F0])
	 */
	class ASpawnWave : public ATBLActor
	{
	public:
		class ASpawner*                                            Spawner;                                                 // 0x02F0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               Faction;                                                 // 0x02F8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_01O7[0x7];                                   // 0x02F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              JoinedPlayers[0x50];                                     // 0x02F9(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class AController*>                                 ReplJoinedPlayers;                                       // 0x0350(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CVRY[0x4];                                   // 0x0360(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        PendingDeferredSpawnCount;                               // 0x0364(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastPendingDeferredSpawnRequest;                         // 0x0368(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_787N[0x4];                                   // 0x036C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AController*>                                 PlayersToSpawn;                                          // 0x0370(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartTime;                                               // 0x0380(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SecondsBeforeSpawningStarts;                             // 0x0384(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExtraSecondsBeforeSpawningToSpawnBots;                   // 0x0388(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SecondsJoinableAfterSpawningStarts;                      // 0x038C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y8FY[0xC];                                   // 0x0390(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MaxPlayerCount;                                          // 0x039C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFireWhenFilled;                                         // 0x03A0(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForcedSpawn;                                            // 0x03A1(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QDFQ[0x2];                                   // 0x03A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumWaitTimeSeconds;                                  // 0x03A4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ESpawnWaveState                                        WaveState;                                               // 0x03A8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAllowBots;                                              // 0x03A9(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPrivateWave;                                            // 0x03AA(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPlayFromHere;                                         // 0x03AB(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPrespawn;                                               // 0x03AC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4B7E[0x3];                                   // 0x03AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PrespawnTime;                                            // 0x03B0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForwardSpawn;                                           // 0x03B4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S6S4[0x3];                                   // 0x03B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpecialSpawnSpec;                                        // 0x03B8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSpawnWaveSounds                                    SpawnWaveSounds;                                         // 0x03C0(0x0038) BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaveNoLongerJoinable;                                  // 0x03F8(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaveFinished;                                          // 0x0408(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaveFilled;                                            // 0x0418(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWaveSpawning;                                          // 0x0428(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnedCharacter;                                      // 0x0438(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPossessedCharacter;                                    // 0x0448(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		bool                                                       bControlRestricted;                                      // 0x0458(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantsEndAfterControlReturned;                           // 0x0459(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PK57[0x1E];                                  // 0x045A(0x001E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     DummyRoot;                                               // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              HistoryOfJoinedPlayers[0x50];                            // 0x0480(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_14VH[0x8];                                   // 0x04D0(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartPrespawning();
		void StartCleanupTimer(bool bRestart);
		void SpawnController(class AController* Controller);
		bool ShouldShowSpawnPrompt();
		void SetClientJoinTime(float InClientJoinWorldTime);
		void Public_StartSpawning();
		void ProcessInitiallySpawnedCharacters(class ASpawner* InstigatorSpawner, TArray<class ATBLCharacter*> Characters);
		void OnRep_WaveState();
		void OnRep_ReplJoinedPlayers();
		void OnControllerPossessedPawn(class APawn* NewPawn);
		void NotifyPendingDeferredSpawnPerformed();
		void NotifyPendingDeferredSpawn();
		bool NeedsCleanup();
		bool LeaveSpawn(class AController* Controller);
		bool JoinSpawn(class AController* Controller);
		bool IsSpecialSpawn();
		bool IsJoinableBy(class AController* Controller);
		bool HasPendingDeferredSpawnsRemaining();
		void HandleNoLongerJoinable();
		float GetTimeLeft(class AController* Target);
		void GetDisplayInfo(TMap<class UClass*, class UClass*>* AllowedClasses, class UTexture2D** SpawnWaveIcon, class FText* SpawnWaveName, bool* SpawnWithHorse);
		class UClass* GetAllowedLoadoutSelection(class UClass* RequestedClass);
		TArray<class UClass*> GetAllowedCharacterClasses(class ATBLPlayerController* TargetController);
		void FireEarly();
		void End();
		void AttemptCleanup();
		void AllowFullPlayerControl();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ForcedRespawnSpawnWave
	 * Size -> 0x0008 (FullSize[0x04E0] - InheritedSize[0x04D8])
	 */
	class AForcedRespawnSpawnWave : public ASpawnWave
	{
	public:
		class AController*                                         RespawningController;                                    // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ForceSpawnController(class AController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ForwardSpawnWave
	 * Size -> 0x01A8 (FullSize[0x0680] - InheritedSize[0x04D8])
	 */
	class AForwardSpawnWave : public ASpawnWave
	{
	public:
		TMap<TWeakObjectPtr<class AController>, struct FTimerHandle> ControllerTimerMap;                                      // 0x04D8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<TWeakObjectPtr<class AController>, struct FTimerHandle> ControllerCombatTimerMap;                                // 0x0528(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              ControllerAwaitingCombatTimer[0x50];                     // 0x0578(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class APawn*>                                       PawnsAllowedToForwardSpawn;                              // 0x05C8(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              AllowedPawns[0x50];                                      // 0x05D8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              RejectedPawns[0x50];                                     // 0x0628(0x0050) UNKNOWN PROPERTY: SetProperty
		float                                                      CombatTimerDuration;                                     // 0x0678(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VFOL[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnOutOfCombatCharacters();
		bool ShouldResetCombatTimerFor(class AController* Controller);
		void SetPawnsAllowedToForwardSpawn(TArray<class APawn*> InPawnsAllowedToForwardSpawn);
		void SetAwaitingCombatTimer(class AController* Controller);
		void ResetCombatTimerFor(class AController* Controller);
		void OnRep_PawnsAllowedToForwardSpawn();
		void OnQueuedPlayerTakeDamage(const struct FDamageTakenEvent& DamageEvent);
		void OnQueuedPlayerParryEvent(class ATBLCharacter* A, class ATBLCharacter* B, const struct FParryEventState& ParryEventState);
		void OnQueuedPlayerCauseDamage(const struct FDamageTakenEvent& DamageEvent);
		bool IsControllerRecentlyInCombat(class AController* Controller);
		void ForwardSpawnController(class AController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FrameThrottledCinematicActor
	 * Size -> 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
	 */
	class AFrameThrottledCinematicActor : public AActor
	{
	public:
		void STATIC_AttemptThrottledCall(TBL_EFrameThrottleBranch* Branches);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FriendsAndPartyList
	 * Size -> 0x01F0 (FullSize[0x0408] - InheritedSize[0x0218])
	 */
	class UFriendsAndPartyList : public UListViewBase
	{
	public:
		unsigned char                                              UnknownData_Q9U5[0xC1];                                  // 0x0218(0x00C1) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_EFriendsListType                                       ListType;                                                // 0x02D9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X0KP[0x6];                                   // 0x02DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLScrollBarStyleDataAsset*                         ScrollBarStyle;                                          // 0x02E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGetEntryWidgetClassForItemEvent;                       // 0x02E8(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             BP_OnEntryGeneratedWithSelf;                             // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             BP_OnListEntryRefreshed;                                 // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<TBL_EFriendsListType, int>                            SortingWeights;                                          // 0x0318(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		SlateCore_EOrientation                                     Orientation;                                             // 0x0368(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		Slate_ESelectionMode                                       SelectionMode;                                           // 0x0369(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		SlateCore_EConsumeMouseWheel                               ConsumeMouseWheel;                                       // 0x036A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bClearSelectionOnClick;                                  // 0x036B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFocusable;                                            // 0x036C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PGBK[0x3];                                   // 0x036D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EntrySpacing;                                            // 0x0370(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bReturnFocusToSelection;                                 // 0x0374(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L8T6[0x73];                                  // 0x0375(0x0073) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              NumberOfDummyItems;                                      // 0x03E8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              NumberOfDummyGroups;                                     // 0x03E9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              NumberOfMaxItemsDisplayed;                               // 0x03EA(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_21QB[0x15];                                  // 0x03EB(0x0015) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SeparatorEntryWidgetClass;                               // 0x0400(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetPartyInviteSettings(bool bAllowInvites, bool bJoinViaPresence, bool bJoinViaPresenceFriendsOnly);
		void RefreshItemsList();
		void RefreshFriendsList(bool ShouldRead);
		void OnUsersChanged();
		void BP_NavigateToItem(const struct FBlueprintOnlineUser& Item);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.BlueprintOnlineUserListEntry
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UBlueprintOnlineUserListEntry : public UUserListEntry
	{
	public:
		void OnListItemSet(const struct FBlueprintOnlineUser& ListItemObject);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FxActor
	 * Size -> 0x0008 (FullSize[0x0260] - InheritedSize[0x0258])
	 */
	class AFxActor : public AActor
	{
	public:
		unsigned char                                              bEnableCollisionOnTearOff : 1;                           // 0x0258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1RSL[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TornOffLifeSpan;                                         // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnTornOff();
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void DisableAndDestroy(float LifeSpan);
		void CleanupAbilityActorsInternal(class AController* Controller);
		void CleanupAbilityActors();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FxComponent
	 * Size -> 0x0068 (FullSize[0x0170] - InheritedSize[0x0108])
	 */
	class UFxComponent : public UActorComponent
	{
	public:
		TArray<class UBlueprint*>                                  PersistentFXs;                                           // 0x0108(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UBlueprint*>                                  PersistentFXsForOwner;                                   // 0x0118(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      PersistentFXComponents;                                  // 0x0128(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      PersistentFXComponentsForOwner;                          // 0x0138(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFxInstance*>                                 PersistentFXInstances;                                   // 0x0148(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMaterialOverrideState                              MaterialOverrideState;                                   // 0x0158(0x0018) Transient, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		void PushMaterialOverride(class UMaterialInterface* Material);
		void PopMaterialOverride();
		class UFxInstance* STATIC_GetFXInstanceFromActor(class AActor* Actor, class UClass* Blueprint, bool bCreateIfNeeded);
		class UFxComponent* STATIC_GetFXComponent(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FxEventListener
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UFxEventListener : public UTBLObject
	{
	public:
		unsigned char                                              UnknownData_JKT9[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		void ProjectileStopped(class AInventoryItem* Item);
		void ProjectileStarted(class AInventoryItem* Item);
		void OnWorldHit(class AActor* Actor, const struct FVector& Location, class UPhysicalMaterial* PhysMaterial);
		void OnWasParried(class ATBLCharacter* ThisCharacter, class ATBLCharacter* OtherCharacter, const struct FParryEventState& ParryEventState);
		void OnTargetMethodEvent(class AActor* Initiator, const class FName& TargetMethodName, TBL_ETargetMethodEvent Event, class AAbilityInvocation* Invocation, const struct FVector& Location, TArray<class AActor*> HitTargets);
		void OnSuicide(class AActor* Suicider, const struct FDamageTakenEvent& DamageTakenEvent);
		void OnStatChanged(class AActor* Actor, TBL_EStat Type, const struct FStatEntry& Stat, float DeltaValue);
		void OnStartedFalling();
		void OnStaminaCostFailed(const class FName& Event);
		void OnSetThirdPersonDeathCamera();
		void OnSetRagdollPhysics();
		void OnSetOnFire();
		void OnSetOffFire();
		void OnSetFirstPersonDeathCamera();
		void OnRemoveCondition(class AActor* Actor, TBL_EConditionType Condition);
		void OnRagdollHit(class AActor* HitTaker, class AActor* HitCauser, class AInventoryItem* Weapon, const struct FHitResult& HitResult, const struct FVector& HitDirection, float Damage, class UDamageSource* DamageSource, class AActor* Projectile, const class FName& AttackName);
		void OnPossessed(class AController* Controller);
		void OnPlayerMeshChanged(class USkeletalMeshComponent* OldMesh, class USkeletalMeshComponent* NewMesh);
		void OnPlayerKilled(const struct FDeathEvent& DeathEvent);
		void OnParrySuccess(class ATBLCharacter* ThisCharacter, class ATBLCharacter* OtherCharacter, const struct FParryEventState& ParryEventState);
		void OnMountSiegeEngine(class ASiegeEngine* SiegeEngine);
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnInvocationActorCreated(class AActor* Actor);
		void OnInventoryProjectileHitPassiveShield(class AInventoryItem* Shield, class AInventoryItem* Projectile);
		void OnInventoryItemDamageStateChanged(class AInventoryItem* Item, TBL_EInventoryItemDamagedState DamagedState);
		void OnInventoryItemDamaged(class AInventoryItem* Item, const struct FInventoryItemDamagedParams& Params);
		void OnInventoryActionFailed(TBL_EFailedInventoryAction Action);
		void OnHorseFxEvent(const class FName& EventName, float EventScale, TArray<class FName> EventTags);
		void OnHealOverTimeStart(TBL_EHealingSource HealingSource, class ATBLPlayerState* InstigatingPlayerState);
		void OnHealOverTimeEnd();
		void OnHealOverTimeAdded(TBL_EHealingSource HealingSource, class ATBLPlayerState* InstigatingPlayerState);
		void OnExperienceLevelChanged(class AActor* Actor, int NewLevel);
		void OnEpicEndGame(const struct FEpicEndGameState& EpicEndGameState);
		void OnDismountSiegeEngine(class ASiegeEngine* SiegeEngine, bool Forced);
		void OnDamageTaken(const struct FDamageTakenEvent& DamageEvent);
		void OnDamageCaused(const struct FDamageTakenEvent& DamageEvent);
		void OnCrowdControlNoDamage(class AActor* OwningActor, const class FName& CombatState, const struct FCrowdControlParams& CrowdControlParams);
		void OnConstruct(class AActor* Actor);
		void OnCombatStateEvent(class AActor* Actor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnCombatStateEnd(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnClash(class ATBLCharacter* InitiatorCharacter, class ATBLCharacter* TargetCharacter, const struct FClashEventState& ClashEventState);
		void OnCharacterLanded(const struct FLandedResult& LandedResult);
		void OnApplyCondition(class AActor* Actor, TBL_EConditionType Condition);
		void OnAnimNotifyStepEvent();
		void OnAmmoInitialize();
		void OnAbilityOnCooldown(const struct FAbility& Ability, float RemainingTime, class AInventoryItem* InventoryItem);
		void OnAbilityError(class AActor* Initiator, TBL_EResultCode Code, class AAbilityInvocation* Invocation, const class FName& AttackName, class UClass* ItemClass);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FxInstance
	 * Size -> 0x0068 (FullSize[0x00B8] - InheritedSize[0x0050])
	 */
	class UFxInstance : public UFxEventListener
	{
	public:
		unsigned char                                              UnknownData_98S4[0x18];                                  // 0x0050(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_EStopTimerPolicy                                       StopTimerPolicy;                                         // 0x0068(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EDelegateRemovalPolicy                                 DelegateRemovalPolicy;                                   // 0x0069(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUnbindOnAttackEnd;                                      // 0x006A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D8XU[0x5];                                   // 0x006B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              Actor;                                                   // 0x0070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFxEventListener*>                            EventListeners;                                          // 0x0078(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Flags;                                                   // 0x0088(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlaySuicideDelay;                                        // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayBandageDelay;                                        // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z3EV[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       BandageAppliedSound;                                     // 0x0098(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KV3Y[0x18];                                  // 0x00A0(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetCharacterPostProcessMID(class UMaterialInstanceDynamic* InCharacterPostProcessMID);
		void ResetCharacterPostProcessMID();
		void PlayWeaponCombatStateSound(class AActor* SoundActor, const class FName& PreviousCombatState, const class FName& NewCombatState, const struct FAttackInfo& AttackInfo, class UCombatState* CombatState);
		void PlayCharacterCombatStateSound(class AActor* SoundActor, const class FName& PreviousCombatState, const class FName& NewCombatState, const struct FAttackInfo& AttackInfo, class UCombatState* CombatState);
		void OnKilledInternal(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnCombatStateChangedInternal(class AActor* InActor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnActorPreAbilityInitiate();
		class UMaterialInstanceDynamic* GetCharacterPostProcessMID();
		void Cleanup();
		void BP_ResetPostProcess();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameModeConfig
	 * Size -> 0x0018 (FullSize[0x00C0] - InheritedSize[0x00A8])
	 */
	class UGameModeConfig : public UAssemblyBlueprint
	{
	public:
		float                                                      PostGameUIDelay;                                         // 0x00A8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NDFR[0x4];                                   // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         PostGameSlomoCurve;                                      // 0x00B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnalyticsSampleEventInterval;                            // 0x00B8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AGM6[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameModeModifier
	 * Size -> 0x0050 (FullSize[0x02A8] - InheritedSize[0x0258])
	 */
	class AGameModeModifier : public AInfo
	{
	public:
		TMap<class UClass*, class UClass*>                         OverridePawnClasses;                                     // 0x0258(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameplayRules
	 * Size -> 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
	 */
	class UGameplayRules : public UActorComponent
	{
	public:
		float                                                      AimPenalty;                                              // 0x0108(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XSLY[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (PADDING)

	public:
		float UpdateAimPenalty(float DeltaSeconds, TArray<struct FAimPenalty> AimPenalties);
		bool TutorialCanDamage(class ATBLCharacter* InitiatorCharacter, class AActor* TargetActor);
		bool ShouldStartProjectileCounterWindow(class ATBLCharacter* Character);
		bool ShouldStartCounterWindow(class ATBLCharacter* Character);
		bool ShouldStartActiveRiposteWindow(class ATBLCharacter* Character);
		bool ShouldScoreKill(class AController* Killer, class AController* Killed, const struct FDeathDamageTakenEvent& DamageEvent);
		bool ShouldPlayDamageTaken(const struct FDamageTakenEvent& DamageTakenEvent);
		bool ShouldGotoDowned(class AActor* Target, class AActor* Initiator, const class FName& AbilityName, class AInventoryItem* InventoryItem, class UDamageSource* DamageType, const struct FDamageTakenEvent& DamageTakenEvent);
		bool ShouldComboCancelQueue(const class FName& CombatState, const struct FAttackInfo& Attack);
		bool ShouldBlockSameAttack(class ATBLCharacter* AttackingCharacter, class ATBLCharacter* DefendingCharacter);
		bool ShouldAttackBeCountered(class ATBLCharacter* HitCharacter, class ATBLCharacter* AttackingCharacter, class AInventoryItem* AttackingItem, class AInventoryItem* DefenderItem);
		void OnProjectileHit(TBL_EOnProjectileHitEffect* OutHitEffect, float* OutBounceVelocityModifier, class AInventoryItem* Projectile, TBL_EOnProjectileHitEffect InHitEffect, const struct FHitResult& InHitResult, float InBounceVelocityModifier);
		bool OnParryBreak(class ATBLCharacter* AttackingCharacter, class ATBLCharacter* DefendingCharacter, class AInventoryItem* AttackingItem, class AInventoryItem* DefendingItem);
		void OnDamageTaken(TBL_EOnHitEffect* OutHitEffect, TBL_ECrowdControlVariant* OutCrowdControlVariant, TBL_EOnHitEffect InHitEffect, TBL_ECrowdControlVariant InCrowdControlVariant, class AActor* HitActor, const struct FDamageTakenEvent& DamageEvent, const class FName& AttackName, class AInventoryItem* AttackingItem, class UAttackType* AttackType);
		bool IsValidSelfInflictedDamageSource(class UDamageSource* DamageSource);
		bool IsBlocking(class ATBLCharacter* Character, const class FName& AttackName, const class FName& CombatState, class ATBLCharacter* AttackingCharacter);
		float GetRangedInaccuracy(class AInventoryItem* Projectile);
		struct FTBL_FGoreEvent GetGoreEventOnDamage(const struct FDamageTakenEvent& DamageTakenEvent, bool bIsRagdollHit, bool bShouldApplyConditions);
		struct FVector GetDisarmImpulse(class AInventoryItem* AttackerItem, const struct FVector& HitDirection);
		TBL_EDefenderBlockedPolicy GetDefenderBlockedPolicy(bool* bShouldDisarm, TBL_EDefenderBlockedPolicy InDefenderBlockedPolicy, class ATBLCharacter* AttackingCharacter, class ATBLCharacter* DefendingCharacter, class AInventoryItem* AttackingItem, class AInventoryItem* DefendingItem, bool bProjectileAttack, bool bSameAttackClash, bool bWasBlockedWithParryForgivenessWindow);
		TBL_ECrowdControlVariant GetCrowdControlVariant(TBL_ECrowdControlVariant InCrowdControlVariant, class AActor* HitActor, const class FName& CombatState, class UClass* InventoryItemClass, const class FName& AbilityName, class UAttackType* AttackType, bool IsOnHorse);
		TBL_EComboTimingPolicy GetComboTimingPolicy(TBL_EComboTimingPolicy InComboTimingPolicy, class ATBLCharacter* Character, const class FName& CombatState, const struct FAttackInfo& PrevAttack, const struct FAttackInfo& NextAttack);
		TBL_EAttackerBlockedPolicy GetAttackerBlockedPolicy(TBL_EAttackerBlockedPolicy InAttackerBlockedPolicy, class ATBLCharacter* AttackingCharacter, class ATBLCharacter* DefendingCharacter, class AInventoryItem* AttackingItem, class AInventoryItem* DefendingItem, bool bSameAttackClash);
		bool ApplyDamageConditions(class AActor* HitActor, const struct FDamageTakenEvent& DamageEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameProgressInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameProgressInterface : public UInterface
	{
	public:
		void BroadcastTeamUpdated(class ATBLTeam* Team);
		void BroadcastSetActive(bool Active);
		void BroadcastProgressUpdated(float Progress, class ATBLTeam* Team);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GameSparksLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameSparksLibrary : public UBlueprintFunctionLibrary
	{
	public:
		int STATIC_GetXp(class ATBLPlayerState* InPlayerState);
		class UOnlineConfig* STATIC_GetOnlineConfig();
		struct FLevelStats STATIC_GetLevelStats(class ATBLPlayerState* InPlayerState, int Level);
		float STATIC_GetDaysSinceLive(class ATBLPlayerState* InPlayerState, class UVirtualGoodAnnouncement* InAnnouncement);
		class FText STATIC_ConvertIntToRomanNumeral(int InNumber);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GateComponent
	 * Size -> 0x0048 (FullSize[0x0150] - InheritedSize[0x0108])
	 */
	class UGateComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_5QDB[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGateOpened;                                            // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGateClosed;                                            // 0x0128(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FReplicated_Bool                                    IsGateOpened;                                            // 0x0138(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetIsGateOpened(bool InGateOpened);
		void OnRep_IsGateOpened();
		bool GetIsGatedOpened();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GoreFXLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGoreFXLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class USkeletalMeshComponent* STATIC_KnockoffHelmet(class ATBLCharacter* Char);
		bool STATIC_GetGoreActionFromAttack(class AInventoryItem* InIventoryItem, const class FName& InAttackName, struct FWeaponGoreSlot* GoreAction);
		class FName STATIC_FindClosestBoneFromGiven(class USkinnedMeshComponent* InSkinnedMesh, class UBoneList* InBreakableBones, const struct FVector& InTestLocation, struct FVector* OutBoneLocation, float* OutClosestDistance);
		void STATIC_FillUpComponentSpaceTransformsRefPose(class USkeletalMeshComponent* SKM, TArray<struct FTransform>* ComponentSpaceTransforms);
		bool STATIC_BreakAtBone(class ACharacter* Char, const class FName& BoneName, const struct FVector& Impulse, const struct FVector& HitLocation, bool bSpawnedItem);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GroupSpawner
	 * Size -> 0x0038 (FullSize[0x05D0] - InheritedSize[0x0598])
	 */
	class AGroupSpawner : public ASpawner
	{
	public:
		TArray<struct FSpawnerChild>                               Spawners;                                                // 0x0598(0x0010) Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W0B1[0x20];                                  // 0x05A8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_ESpawnerSelectionMode                                  SpawnerSelectionMode;                                    // 0x05C8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_74BM[0x3];                                   // 0x05C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        SpawnerSelectionIndex;                                   // 0x05CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GroupSpawnQueuer
	 * Size -> 0x0058 (FullSize[0x00D8] - InheritedSize[0x0080])
	 */
	class UGroupSpawnQueuer : public USpawnQueuer
	{
	public:
		int                                                        GroupWaveDurationSeconds;                                // 0x0080(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinimumRespawnTime;                                      // 0x0084(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        GroupWaveTimeExtension;                                  // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaximumGroupWaveTime;                                    // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExtensionInterval;                                       // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y323[0x14];                                  // 0x0094(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AController*>                                 SoloPlayerQueue;                                         // 0x00A8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AController*>                                 PlayerControllers;                                       // 0x00B8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YXRL[0x10];                                  // 0x00C8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HeadlookComponent
	 * Size -> 0x0028 (FullSize[0x0130] - InheritedSize[0x0108])
	 */
	class UHeadlookComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_N3WM[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              TargetActor;                                             // 0x0118(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              LocalNearestActor;                                       // 0x0120(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceSquaredToLocalNearestActor;                      // 0x0128(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NQ98[0x4];                                   // 0x012C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetTargetActor(class AActor* Target);
		void GetHeadlookLocation(struct FVector* OutHeadlookLocation, bool* OutIsHeadlook);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HeraldryAssetUserData
	 * Size -> 0x0168 (FullSize[0x0190] - InheritedSize[0x0028])
	 */
	class UHeraldryAssetUserData : public UAssetUserData
	{
	public:
		TArray<struct FCanvasUVTri>                                Triangles;                                               // 0x0028(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasMeshBuffers;                                         // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JYEE[0x157];                                 // 0x0039(0x0157) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Horse
	 * Size -> 0x0210 (FullSize[0x0B00] - InheritedSize[0x08F0])
	 */
	class AHorse : public ASiegeEngine
	{
	public:
		class FScriptMulticastDelegate                             OnInterpToMountLocation;                                 // 0x08E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PlayMountAnimation;                                      // 0x08F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PlayDismountAnimation;                                   // 0x0908(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHorseFxEvent;                                          // 0x0918(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLanceChargeEnabled;                                    // 0x0928(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLanceChargeFailed;                                     // 0x0938(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartAttack;                                           // 0x0948(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKickNoDriver;                                          // 0x0958(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStaminaCostFailed;                                     // 0x0968(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USceneComponent*                                     CollisionRoot;                                           // 0x0978(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              Interactable;                                            // 0x0980(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UConditionsComponent*                                ConditionsComponent;                                     // 0x0988(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementModifierComponent*                          MovementModifiers;                                       // 0x0990(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTeamOwnershipComponent*                             TeamOwnershipComponent;                                  // 0x0998(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRiderUseControllerRotationYaw;                          // 0x09A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WYCZ[0x3];                                   // 0x09A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FThirdPersonCameraParams                            ThirdPersonCameraParams;                                 // 0x09A4(0x0060) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ThirdPersonCameraOffsetZ;                                // 0x0A04(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PushingPriority;                                         // 0x0A08(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PushSpeed;                                               // 0x0A0C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      KnockdownBlendOutTime;                                   // 0x0A10(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VJVK[0x14];                                  // 0x0A14(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x0A28(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateSynchronization*                         CombatStateSynchronization;                              // 0x0A30(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateQueue*                                   CombatStateQueue;                                        // 0x0A38(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CombatStateSet;                                          // 0x0A40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPushingComponent*                                   PushingComponent;                                        // 0x0A48(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RotationLimit;                                           // 0x0A50(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M6I3[0x4];                                   // 0x0A54(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHorseMovement*                                      HorseMovement;                                           // 0x0A58(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UPrimitiveComponent*>                         WorldCollision_Front;                                    // 0x0A60(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UPrimitiveComponent*>                         WorldCollision_Back;                                     // 0x0A70(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UPrimitiveComponent*>                         WorldCollision_Both;                                     // 0x0A80(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   WorldCollision_FrontLegs;                                // 0x0A90(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   WorldCollision_BackLegs;                                 // 0x0A98(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCapsuleComponent*                                   WorldCollision_Rider;                                    // 0x0AA0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UPrimitiveComponent*>                         PushingCollision;                                        // 0x0AA8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpawnOnHorse;                                           // 0x0AB8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExhausted;                                              // 0x0AB9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BGC8[0x6];                                   // 0x0ABA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          AbilitiesDataTable;                                      // 0x0AC0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowSelection                              LanceCharge;                                             // 0x0AC8(0x0018) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UAbilitySpec*                                        LanceChargeSpec;                                         // 0x0AE0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MountDirection;                                          // 0x0AE8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        HorizLockId;                                             // 0x0AF0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                HorseCollisionPreset;                                    // 0x0AF4(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bLanceChargeEnabled;                                     // 0x0AFC(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsDead;                                                 // 0x0AFD(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RXPF[0x2];                                   // 0x0AFE(0x0002) MISSED OFFSET (PADDING)

	public:
		void WantsToGallop(bool bWantsToGallop);
		bool ShouldPushBackOnTurnAgainstWall();
		void RiderToWorldImpact(const struct FHitResult& Hit);
		void PostHorseFxEvent(const class FName& EventName, float EventScale, TArray<class FName> EventTags);
		void OnProcessPlayerInput();
		void OnPlayerMeshChanged(class USkeletalMeshComponent* OldMesh, class USkeletalMeshComponent* NewMesh);
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnCinematicControlRestricted(class ATBLCharacter* Character);
		void OnCinematicControlAllowed(class ATBLCharacter* Character);
		void KnockRiderOffHorse();
		void KickNoDriver();
		bool IsExhausted();
		void HorseToWorldImpact(const struct FHitResult& Hit, TBL_EHorseImpactLocation ImpactLocation, TBL_EHorseToWorldImpactType ImpactType, const class FName& ImpactCombatState, float ImpactSpeed);
		void HorseToHorseImpact(class AHorse* TargetHorse, TBL_EHorseImpactLocation ImpactLocation, TBL_EHorseToHorseImpactType ImpactType, const class FName& ImpactCombatState, float ImpactSpeed);
		void HorseToCharacterImpact(class ATBLCharacter* TargetCharacter, TBL_EHorseImpactLocation ImpactLocation, TBL_EHorseToCharacterImpactType ImpactType, const class FName& ImpactCombatState, float ImpactSpeed);
		void Horse_ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const class FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode, const struct FHorseMovementCorrection& HorseCorrection);
		bool HasStaminaForAttack(const class FName& AttackName);
		class UCapsuleComponent* GetWorldCollisionRider();
		void GetWorldCollisionLegs(class UCapsuleComponent** FrontLegs, class UCapsuleComponent** BackLegs);
		TArray<class UPrimitiveComponent*> GetWorldCollisionFront();
		TArray<class UPrimitiveComponent*> GetWorldCollisionBack();
		struct FVector GetThirdPersonCameraAttachPoint();
		Engine_ECollisionResponse GetRiderToWorldCollision();
		TArray<class UPrimitiveComponent*> GetPushingCollision();
		void ForceRun(float Time);
		void EventUsePressed(class APawn* InPawn, class UInteractableComponent* InInteractable);
		void BroadcastSetFaction(TBL_EFaction Faction);
		void BroadcastRandomSeed(int Seed);
		void BroadcastPostHorseFxEvent(const class FName& EventName, float EventScale, TArray<class FName> EventTags);
		void BroadcastPlayDismountAnimation(const class FName& AnimationName);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterMovementBaseComponent
	 * Size -> 0x0920 (FullSize[0x1080] - InheritedSize[0x0760])
	 */
	class UTBLCharacterMovementBaseComponent : public UCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_B4U0[0x8];                                   // 0x0760(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMovementActionStarted;                                 // 0x0768(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementActionFinished;                                // 0x0778(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInitialAutorunExpired;                                 // 0x0788(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      BottomOfCapsuleHeight;                                   // 0x0798(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementSequenceStepUpX;                                 // 0x079C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementSequenceStepUpZ;                                 // 0x07A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6C0P[0x4];                                   // 0x07A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     MasterTransformComponent;                                // 0x07A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMovementMetrics                                    MovementMetrics;                                         // 0x07B0(0x00C8) NativeAccessSpecifierPublic
		unsigned char                                              bIsPreMovement : 1;                                      // 0x0878(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LUKH[0x3];                                   // 0x0879(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             PreCorrectionLocation;                                   // 0x087C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementInstance*                                   ActiveMovementAction;                                    // 0x0888(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FDebugMovementAction>                        LogPreviousMovements;                                    // 0x0890(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EStartMovementResult                                   LastStartMovementResult;                                 // 0x08A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OIO2[0x7];                                   // 0x08A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMovementSequence*                                   LastMovementSequence;                                    // 0x08A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastMoveTime;                                            // 0x08B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DY3D[0x4];                                   // 0x08B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<unsigned char, struct FSyncStartMovementParams>       SyncStartMovementParams;                                 // 0x08B8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FAutorunParams>                 SyncForcedAutorunParams;                                 // 0x0908(0x0050) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, TBL_EAutorunMovementMode>              SyncAutorunMovementMode;                                 // 0x0958(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FSyncSpawnAnimationParams>      SyncSpawnAnimation;                                      // 0x09A8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FServerInitiateAbilityParams>   SyncInitiateAbility;                                     // 0x09F8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FServerHitWorldParams>          SyncHitWorld;                                            // 0x0A48(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FServerTrapEventParams>         SyncTrapEvent;                                           // 0x0A98(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateStartAttack>        SyncStartAttack;                                         // 0x0AE8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateHeavyAttack>        SyncStartHeavyAttack;                                    // 0x0B38(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateFire>               SyncStartFire;                                           // 0x0B88(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateCancelAttack>       SyncCancelAttack;                                        // 0x0BD8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateChargeStab>         SyncChargeStab;                                          // 0x0C28(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateReleaseStab>        SyncReleaseStab;                                         // 0x0C78(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FCombatStateGetUp>              SyncGetUp;                                               // 0x0CC8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FTBL_FManualReload>             SyncManualReload;                                        // 0x0D18(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FTBL_FDisableAttackRootMotion>  SyncDisableAttackRootMotion;                             // 0x0D68(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FTBL_FPlayLadderAnimation>      SyncPlayLadderAnimation;                                 // 0x0DB8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<unsigned char, struct FTBL_FMountLadder>              SyncMountLadder;                                         // 0x0E08(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<struct FSyncMovementAction>                         SyncMovementActions;                                     // 0x0E58(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSyncMovementAction>                         SyncPreMovementActions;                                  // 0x0E68(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              NextSyncMovementId;                                      // 0x0E78(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1M7G[0x3];                                   // 0x0E79(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastSyncMovementTime;                                    // 0x0E7C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FCharacterControlInstance>                   CharacterControlInstances;                               // 0x0E80(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCharacterControlInstance                           CurrentCharacterControl;                                 // 0x0E90(0x0018) Protected, NativeAccessSpecifierProtected
		TArray<struct FCharacterControlOverTime>                   CharacterControlOverTime;                                // 0x0EA8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        CharacterControlInstanceId;                              // 0x0EB8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastTimeDiscrepancyDetectedTime;                         // 0x0EBC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeBetweenDiscrepancyDetected;                          // 0x0EC0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J1ZZ[0x4];                                   // 0x0EC4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    bAllowPositionError;                                     // 0x0EC8(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bResetSmoothing;                                         // 0x0EE0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y22P[0x3];                                   // 0x0EE1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             LastVelocity;                                            // 0x0EE4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             LastUpdatedLocation;                                     // 0x0EF0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IXRB[0x4];                                   // 0x0EFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FQuat                                               LastUpdatedRotation;                                     // 0x0F00(0x0010) IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		TArray<struct FServerCorrection>                           LastServerCorrections;                                   // 0x0F10(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             LastCorrectionLocation;                                  // 0x0F20(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_USIL[0x4];                                   // 0x0F2C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FQuat                                               LastCorrectionRotation;                                  // 0x0F30(0x0010) IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		struct FRotator                                            LastControlRotation;                                     // 0x0F40(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8LBF[0xC];                                   // 0x0F4C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FMovementAnimationEvent                 MovementAnimationEvent;                                  // 0x0F58(0x0028) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FReplicated_FAutorunParams                          AutorunParams;                                           // 0x0F80(0x0038) Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FAutorunParams                                      LastAutorunParams;                                       // 0x0FB8(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6MWN[0x1];                                   // 0x0FE0(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLockIntoForcedAutorun;                                  // 0x0FE1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPendingEndForcedAutorun;                                // 0x0FE2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L2EF[0x1];                                   // 0x0FE3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AutorunStartTime;                                        // 0x0FE4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        InitialAutorunHorizontalLock;                            // 0x0FE8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInitialAutorunExpired;                                  // 0x0FEC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UK5G[0x3];                                   // 0x0FED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        InitialAutorunTimerHandle;                               // 0x0FF0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutorunInitialized;                                     // 0x0FF8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UDZZ[0x3];                                   // 0x0FF9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        NoStopAutorunHorizontalLock;                             // 0x0FFC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        NoStopAutorunTimerHandle;                                // 0x1000(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsInNoStopAutorun;                                      // 0x1008(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6R9U[0x7];                                   // 0x1009(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDebugVelocityGraphEntry>                    DebugVelocityGraph;                                      // 0x1010(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FServerMoveParams                                   ServerMoveParams;                                        // 0x1020(0x0038) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass*                                              OccupiedNavAreaClass;                                    // 0x1058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        NavAreaUpdateTimer;                                      // 0x1060(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        ForcedMoveTimerHandle;                                   // 0x1068(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             ForcedMoveDirection;                                     // 0x1070(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G1UM[0x4];                                   // 0x107C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetAllowPositionError(bool InAllowPositionError);
		void ServerAckMovement(unsigned char SyncMovementId, float ClientTimeStamp);
		void OnRep_MovementAnimationEvent();
		void OnRep_AutorunParams();
		void OnAutorunParamsChanged();
		void NoStopAutorunExpired();
		void LockForcedAutorun(bool bLock);
		bool IsInitialAutorun();
		void InitialAutorunExpired();
		bool HasMovementAction(class UMovementSequence* Sequence);
		Engine_EMovementMode GetMovementMode();
		float GetAutorunStartTime();
		bool DidHitBottomOfCapsule(const struct FHitResult& Hit);
		void ClientStopForcedAutorun(unsigned char SyncMovementId);
		void ClientStartMovement(const struct FMovementActionInitiationParams& InitParams, unsigned char SyncMovementId);
		void ClientStartForcedAutorun(const struct FAutorunParams& Params, unsigned char SyncMovementId);
		void ClientSetAutorunMovementMode(TBL_EAutorunMovementMode InMovementMode, unsigned char SyncMovementId);
		void ClientCinematicRestrictControl(unsigned char SyncMovementId);
		void ClientCinematicAllowControl(unsigned char SyncMovementId);
		void BroadcastStopMovement(class UMovementSequence* Sequence, bool bExecuteClientFirst);
		void BroadcastStartMovement(const struct FMovementActionInitiationParams& InitParams);
		void BroadcastSetDowned(bool bDowned);
		void BroadcastPlaySpawnAnimation(const class FName& Animation);
		void AuthorityStopForcedAutorun();
		void AuthoritySetAutorunMovementMode(TBL_EAutorunMovementMode InMovementMode);
		void AuthorityForceAutorun(const struct FAutorunParams& Params, class ATBLCharacterBase* Leader);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SiegeEngineMovement
	 * Size -> 0x0000 (FullSize[0x1080] - InheritedSize[0x1080])
	 */
	class USiegeEngineMovement : public UTBLCharacterMovementBaseComponent
	{
	public:
		void OnDriverMount(class ATBLCharacter* Driver);
		void OnDriverDismount(class ATBLCharacter* Driver, TBL_EDismountType DismountType);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HorseMovement
	 * Size -> 0x0420 (FullSize[0x14A0] - InheritedSize[0x1080])
	 */
	class UHorseMovement : public USiegeEngineMovement
	{
	public:
		class FScriptMulticastDelegate                             OnLanded;                                                // 0x1080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWantsToGallop;                                         // 0x1090(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FHorseMovementData                                  CurrentMovementState;                                    // 0x10A0(0x0038) NativeAccessSpecifierPublic
		float                                                      CurrentForwardSpeed;                                     // 0x10D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_91HW[0x4];                                   // 0x10DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Float                                   ReplicatedCurrentForwardSpeed;                           // 0x10E0(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ModifiedForwardSpeed;                                    // 0x10F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentStrafeSpeed;                                      // 0x10FC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentMovementModifier;                                 // 0x1100(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentTurnRate;                                         // 0x1104(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   ReplicatedCurrentTurnRate;                               // 0x1108(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentForwardAccel;                                     // 0x1120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentStrafeAccel;                                      // 0x1124(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentTurnRateAccel;                                    // 0x1128(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GBAH[0x4];                                   // 0x112C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Float                                   ReplicatedCurrentTurnRateAccel;                          // 0x1130(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentStrafeDistance;                                   // 0x1148(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PendingTargetSpeed;                                      // 0x114C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetSpeed;                                             // 0x1150(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_23VR[0x4];                                   // 0x1154(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Float                                   ReplicatedTargetSpeed;                                   // 0x1158(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantsToGallop;                                          // 0x1170(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceRun;                                               // 0x1171(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YU7S[0x2];                                   // 0x1172(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ForceRunTime;                                            // 0x1174(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugAutoRun;                                           // 0x1178(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4SG7[0x3];                                   // 0x1179(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHorseMovementScale                                 AccelerationScale;                                       // 0x117C(0x000C) NoDestructor, NativeAccessSpecifierPublic
		struct FHorseMovementScale                                 TurnRateScale;                                           // 0x1188(0x000C) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4EZ4[0x4];                                   // 0x1194(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMovementModifierComponent*                          MovementModifiers;                                       // 0x1198(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BaseTurnRate;                                            // 0x11A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CKM4[0x4];                                   // 0x11A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         SpeedToTurnRateCurve;                                    // 0x11A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SpeedToTurnAccelCurve;                                   // 0x11B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         StrafeToTurnRateCurve;                                   // 0x11B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         StrafeToTurnAccelCurve;                                  // 0x11C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SpeedToForwardDecelCurve;                                // 0x11C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         SpeedToForwardDecelWhileStrafingCurve;                   // 0x11D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MovementTransitionTime;                                  // 0x11D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InputTapThreshold;                                       // 0x11DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InputDoubleTapThreshold;                                 // 0x11E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNeedToRepressKeyForReverse;                             // 0x11E4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V0Y4[0x3];                                   // 0x11E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          MovementDataTable;                                       // 0x11E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                MaxMovementState;                                        // 0x11F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ImpactCooldown;                                          // 0x11F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnAgainstWallResistance;                               // 0x11FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseBreakingState;                                       // 0x1200(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1UWJ[0x3];                                   // 0x1201(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BreakingToReverseDelay;                                  // 0x1204(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MinimumOrientationOffset;                                // 0x1208(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FHorseToCharacterImpactSettings                     HorseToCharacterImpactSettings;                          // 0x120C(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FHorseToHorseImpactSettings                         HorseToHorseImpactSettings;                              // 0x1214(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FHorseToWorldImpactSettings                         HorseToWorldImpactSettings;                              // 0x121C(0x0008) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FHorseImpactSpeedSettings                           HorseImpactSpeedSettings;                                // 0x1224(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FHorseImpactRules                                   HorseImpactRules;                                        // 0x1230(0x002D) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9JYY[0x3];                                   // 0x125D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                PreviousMovementState;                                   // 0x1260(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FHorseMovementBlend                                 BlendMovementState;                                      // 0x1268(0x0078) Protected, NativeAccessSpecifierProtected
		struct FHorseMovementInput                                 MovementInput;                                           // 0x12E0(0x0020) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FHorseMovementInput                                 PreviousMovementInput;                                   // 0x1300(0x0020) NoDestructor, Protected, NativeAccessSpecifierProtected
		class FName                                                LastHorizontalInput;                                     // 0x1320(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       BoostMode;                                               // 0x1328(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ControlMode;                                             // 0x1329(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsStrafing;                                             // 0x132A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UC44[0x1];                                   // 0x132B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MovementStateDeltaTime;                                  // 0x132C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDidImpact;                                              // 0x1330(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQYH[0x3];                                   // 0x1331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHitResult                                          ImpactHitResult;                                         // 0x1334(0x0088) IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2K6D[0x4];                                   // 0x13BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FHorseInputState>                 InputState;                                              // 0x13C0(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        StandardMovementStates;                                  // 0x1410(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                PreMovementState;                                        // 0x1420(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAdjustingFloorHeight;                                 // 0x1428(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_87I0[0x3];                                   // 0x1429(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FOverrideTurnRate                                   OverrideTurnRate;                                        // 0x142C(0x0008) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FOverrideForwardSpeed                               OverrideForwardSpeed;                                    // 0x1434(0x0008) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FOverrideMaxSpeed                                   OverrideMaxSpeed;                                        // 0x143C(0x0008) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F4U3[0x4];                                   // 0x1444(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TWeakObjectPtr<class AActor>, float>                  HitActors;                                               // 0x1448(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SHCC[0x8];                                   // 0x1498(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartJump();
		void ServerSetLeanDirection(const class FName& Direction);
		void OnRep_TargetSpeed();
		void OnRep_CurrentTurnRateAccel();
		void OnRep_CurrentTurnRate();
		void OnRep_CurrentForwardSpeed();
		void OnPushingOverlap(TArray<class ATBLCharacterBase*> Overlaps);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void ModifyTurnRateScale(float Target, float InterpSpeed);
		void ModifyTargetSpeed(float Target);
		void ModifyAccelerationScale(float Target, float InterpSpeed);
		bool IsStrafing();
		bool IsMovementStateLessThanEqual(const class FName& State);
		bool IsMovementStateGreaterThan(const class FName& State);
		bool IsMovementStateEqual(const class FName& State);
		void ImpactTurn(float Delta, float Time);
		void ImpactSlowdown(float Delta, float Time);
		void ImpactMaxSpeed(float MaxSpeed, float Time);
		float GetSpeedInState(const class FName& State, float Percent);
		float GetSettleSpeedInState(const class FName& State);
		class FName GetMovementStateFromSpeed(float Speed);
		float GetMinSpeedInState(const class FName& State);
		float GetMaxSpeedInState(const class FName& State);
		void GetInputTurn(float* InputTurn, float* HeldTime);
		void GetInputStrafe(float* InputStrafe, float* HeldTime);
		void GetInputForward(float* InputForward, float* HeldTime);
		void GetInputDirection(TBL_EHorseMovementInput* Direction, float* HeldTime);
		float GetCurrentForwardSpeed();
		bool GetControlMode();
		bool GetBoostMode();
		void ClientImpactTurn(float Delta, float Time);
		void ClientImpactSlowdown(float Delta, float Time);
		void ClientImpactMaxSpeed(float MaxSpeed, float Time);
		class FName ClampMovementState(const class FName& State);
		bool CheckHorseCollisionFromIdle(float Direction);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HorseMovementState
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UHorseMovementState : public UCombatState
	{
	public:
		class UHorseMovement*                                      movement;                                                // 0x0158(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void UpdateMovement();
		void StrafeGearUp();
		void StrafeGearDown();
		void ModifyTurnRateScale(float Target, float InterpSpeed);
		void ModifyTargetSpeed(float Target);
		void ModifyAccelerationScale(float Target, float InterpSpeed);
		float GetTurnInputScale(TBL_EHorseTurnInput TurnInput);
		float GetSpeed(const class FName& State, float Percent);
		float GetSettleSpeed(const class FName& State);
		float GetMinSpeed(const class FName& State);
		float GetMaxSpeed(const class FName& State);
		void GetInputTurn(float* InputTurn, float* HeldTime);
		void GetInputStrafe(float* InputStrafe, float* HeldTime);
		void GetInputForward(float* InputForwardOut, float* HeldTime);
		void GetInputDirection(TBL_EHorseMovementInput* Direction, float* HeldTime);
		class UHorseMovement* GetHorseMovement();
		float GetCurrentForwardSpeed();
		bool GetControlMode();
		bool GetBoostMode();
		void GearUp();
		void GearDown();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLUserWidget
	 * Size -> 0x00D8 (FullSize[0x0320] - InheritedSize[0x0248])
	 */
	class UTBLUserWidget : public UUserWidget
	{
	public:
		TArray<class UTBLUMGSequencePlayer*>                       ActiveTBLSequencePlayers;                                // 0x0248(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, TWeakObjectPtr<class UUMGSequencePlayer>> InterruptableSequencePlayers;                            // 0x0258(0x0050) Transient, UObjectWrapper, NativeAccessSpecifierPublic
		bool                                                       bIsInFocusPath;                                          // 0x02A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4VSR[0x7];                                   // 0x02A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             EventAddedToFocusPath;                                   // 0x02B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EventRemovedFromFocusPath;                               // 0x02C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bIsHighlighted;                                          // 0x02D0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7VKA[0x7];                                   // 0x02D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnHighlight;                                             // 0x02D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnhighlight;                                           // 0x02E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FButtonCallout>                              ButtonCallouts;                                          // 0x02F8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsWidgetDisabledInDemoMode;                              // 0x0308(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsWidgetDisabledInShippingWIP;                           // 0x0309(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KYYJ[0x16];                                  // 0x030A(0x0016) MISSED OFFSET (PADDING)

	public:
		void SetSelfAsRadioGroupSelection(const class FName& Group);
		void PlayInterruptableAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, const class FName& InterruptGroup, bool bPlayInReverse, bool bReverseExisting);
		void PlayAdvancedAnimation(class UWidgetAnimation* InAnimation, class UCurveFloat* InterpolationCurve, float StartAtTime, float LoopBackToTime, float EndAtTime, bool bIsNormalizedCurve, float AnimationSpeed, int NumLoopsToPlay, bool bResumeFromLastTime, float Duration, float MaxDuration);
		void NativeUnhighlight();
		void NativeHighlight();
		void K2_Unhighlight();
		void K2_OnFocusChanging();
		void K2_Highlight();
		void IsWidgetEnabled(TBL_EWidgetDisableType* Result);
		bool IsWidgetDisabled();
		void HandleGamepadNavigationModeChanged(TBL_EGamepadNavigationMode Mode);
		class UTBLScreenManager* GetScreenManager();
		class UTBLUserWidget* GetRadioGroupSelection(const class FName& Group);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDContainerWidget
	 * Size -> 0x01B0 (FullSize[0x04D0] - InheritedSize[0x0320])
	 */
	class UHUDContainerWidget : public UTBLUserWidget
	{
	public:
		TBL_EWidgetContainer                                       WidgetContainerType;                                     // 0x0320(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MGUR[0x7];                                   // 0x0321(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHUDContainerPoolInfo>                       PooledWidgets;                                           // 0x0328(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UActorComponent*, class UHUDContainerSubWidget*> Widgets;                                                 // 0x0338(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		TMap<class UActorComponent*, struct FWrappedStreamableHandle> PendingWidgets;                                          // 0x0388(0x0050) ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              AllActiveWidgets[0x50];                                  // 0x03D8(0x0050) UNKNOWN PROPERTY: SetProperty
		TMap<class UClass*, struct FHudContainerPoolEntry>         Pool;                                                    // 0x0428(0x0050) ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              LoadedSubWidgetClasses[0x50];                            // 0x0478(0x0050) UNKNOWN PROPERTY: SetProperty
		bool                                                       bRegisteredStaggeredUpdate;                              // 0x04C8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PNYC[0x7];                                   // 0x04C9(0x0007) MISSED OFFSET (PADDING)

	public:
		void Update();
		void SubwidgetReturnToPool(class UHUDContainerSubWidget* SubWidget);
		void SubwidgetInitFromPool(class UHUDContainerSubWidget* SubWidget);
		void RemoveSubwidget(class UHUDContainerSubWidget* SubWidget);
		void ManuallyUpdate();
		void AddSubwidget(class UHUDContainerSubWidget* SubWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDCrosshairContainerWidget
	 * Size -> 0x0000 (FullSize[0x04D0] - InheritedSize[0x04D0])
	 */
	class UHUDCrosshairContainerWidget : public UHUDContainerWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDContainerSubWidget
	 * Size -> 0x0020 (FullSize[0x0268] - InheritedSize[0x0248])
	 */
	class UHUDContainerSubWidget : public UUserWidget
	{
	public:
		class AActor*                                              AssignedActor;                                           // 0x0248(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UActorComponent*                                     AssignedComponent;                                       // 0x0250(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFocused;                                              // 0x0258(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QZAE[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FocusAlpha;                                              // 0x025C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FocusScale;                                              // 0x0260(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0JQB[0x4];                                   // 0x0264(0x0004) MISSED OFFSET (PADDING)

	public:
		void K2_UpdateFocusParams(float InAlpha, float InScale);
		void K2_OnReturnedToPool();
		void K2_OnFocusedChanged(bool bInIsFocused);
		void K2_OnAssignedToActor(class AActor* Actor, class UActorComponent* Component);
		class AActor* GetAssignedActor();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDMarkerActor
	 * Size -> 0x0018 (FullSize[0x0308] - InheritedSize[0x02F0])
	 */
	class AHUDMarkerActor : public ATBLActor
	{
	public:
		class UHudMarkerDisplayComponent*                          HUDMarkerComponent;                                      // 0x02F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObjectiveStatusDisplayComponent*                    ObjectiveStatusComponent;                                // 0x02F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UActorInfoDisplayComponent*                          ActorInfoComponent;                                      // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UObjectiveStatusDisplayComponent* GetObjectiveStatusComponent();
		class UHudMarkerDisplayComponent* GetHUDMarkerComponent();
		class UActorInfoDisplayComponent* GetActorInfoComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDMarkerContainerWidget
	 * Size -> 0x0110 (FullSize[0x05E0] - InheritedSize[0x04D0])
	 */
	class UHUDMarkerContainerWidget : public UHUDContainerWidget
	{
	public:
		TMap<class UWidget*, class UCanvasPanelSlot*>              OverridePanelSlots;                                      // 0x04D0(0x0050) BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       bClampMarkersToCircle;                                   // 0x0520(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F9F7[0x3];                                   // 0x0521(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           PinLocation;                                             // 0x0524(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PinInterpSpeed;                                          // 0x052C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnpinInterpSpeed;                                        // 0x0530(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LimitFadeSpeed;                                          // 0x0534(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UHUDContainerSubWidget*, float>                 PinnedWidgets;                                           // 0x0538(0x0050) ContainsInstancedReference, NativeAccessSpecifierPublic
		TMap<class UActorComponent*, class UHudMarkerDisplayComponent*> HudMarkerComponents;                                     // 0x0588(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UInteractableComponent*                              LastFocusedInteractable;                                 // 0x05D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDMarkerContainerSubWidget
	 * Size -> 0x0010 (FullSize[0x0278] - InheritedSize[0x0268])
	 */
	class UHUDMarkerContainerSubWidget : public UHUDContainerSubWidget
	{
	public:
		bool                                                       bPinned;                                                 // 0x0268(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S0Y8[0x3];                                   // 0x0269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HoverPercent;                                            // 0x026C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHovered;                                              // 0x0270(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsClamped;                                              // 0x0271(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisablePinned;                                          // 0x0272(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6LBX[0x5];                                   // 0x0273(0x0005) MISSED OFFSET (PADDING)

	public:
		void K2_OnUnPinned();
		void K2_OnUnHovered();
		void K2_OnUnClamped();
		void K2_OnPinned();
		void K2_OnHovered();
		void K2_OnClamped();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDMarkerContainerPlayerWidget
	 * Size -> 0x0018 (FullSize[0x0290] - InheritedSize[0x0278])
	 */
	class UHUDMarkerContainerPlayerWidget : public UHUDMarkerContainerSubWidget
	{
	public:
		class UWidget*                                             ContainerWidget;                                         // 0x0278(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       Pawn;                                                    // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsHovering;                                             // 0x0288(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C65Q[0x7];                                   // 0x0289(0x0007) MISSED OFFSET (PADDING)

	public:
		void AttemptThrottledCombatStateChangeCall(TBL_EFrameThrottleBranch* Branches);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HUDMarkerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UHUDMarkerInterface : public UInterface
	{
	public:
		float GetHUDMarkerProgress(class APlayerController* PlayerController);
		struct FVector GetHUDMarkerLocation(class APlayerController* PlayerController);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HudVisibilityVolume
	 * Size -> 0x0000 (FullSize[0x0290] - InheritedSize[0x0290])
	 */
	class AHudVisibilityVolume : public AVolume
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_InputAxis
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUtilityAI_InputAxis : public UObject
	{
	public:
		float                                                      RangeMin;                                                // 0x0028(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RangeMax;                                                // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		float ScaleToRange(float X);
		float CalculateValue(const struct FUtilityAI_Context& C);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_Blackboard_IsSet
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_Blackboard_IsSet : public UUtilityAI_InputAxis
	{
	public:
		class FName                                                KeyName;                                                 // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_BlackboardValue
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_BlackboardValue : public UUtilityAI_InputAxis
	{
	public:
		class FName                                                KeyName;                                                 // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_CanTargetPawn
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_CanTargetPawn : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_CanUseInteractable
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_CanUseInteractable : public UUtilityAI_InputAxis
	{
	public:
		bool                                                       bIgnoreIfNotAvailable;                                   // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M1CJ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_CompareForwardness
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_CompareForwardness : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_Distance
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_Distance : public UUtilityAI_InputAxis
	{
	public:
		bool                                                       bUseDist2D;                                              // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IVVH[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_DistanceRankAmongBotsTargettingActor
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_DistanceRankAmongBotsTargettingActor : public UUtilityAI_InputAxis
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             EnemyOrFriendly;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSameBehaviorOnly;                                       // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CHV1[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_DistanceToCollision
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_DistanceToCollision : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_DotMyCharacterToTarget
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_DotMyCharacterToTarget : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_DotTargetToMyCharacter
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_DotTargetToMyCharacter : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_HasAITag
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_HasAITag : public UUtilityAI_InputAxis
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0030(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_HaveLOSTo
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_HaveLOSTo : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_HowLongHaveIBeenDoingBehavior
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UI_HowLongHaveIBeenDoingBehavior : public UUtilityAI_InputAxis
	{
	public:
		float                                                      DecayRate;                                               // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CompletedBoostSeconds;                                   // 0x0034(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              Behaviors[0x50];                                         // 0x0038(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_IncomingAttackIs
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UI_IncomingAttackIs : public UUtilityAI_InputAxis
	{
	public:
		unsigned char                                              AllowedAttackNames[0x50];                                // 0x0030(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_Influence
	 * Size -> 0x0030 (FullSize[0x0060] - InheritedSize[0x0030])
	 */
	class UI_Influence : public UUtilityAI_InputAxis
	{
	public:
		bool                                                       bDrawDebugSparseGrid;                                    // 0x0030(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawDebugInfluenceQueries;                              // 0x0031(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIgnoreTargetActor;                                      // 0x0032(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EUtilityAI_EnemyOrFriendly                             FactionRestriction;                                      // 0x0033(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EUtilityAI_EnemyOrFriendly                             PositiveInfluenceFaction;                                // 0x0034(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_73OX[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInfluenceMapType>                           InfluenceTypes;                                          // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInfluenceMapFindMethod                                FindMethod;                                              // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OPPD[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxInfluenceDistance;                                    // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                SearchTag;                                               // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSearchAITargetLocations;                                // 0x0058(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0EZJ[0x7];                                   // 0x0059(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_InfluenceCurrent
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_InfluenceCurrent : public UUtilityAI_InputAxis
	{
	public:
		class UClass*                                              InfluenceInput;                                          // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_InfluenceVsCurrent
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UI_InfluenceVsCurrent : public UUtilityAI_InputAxis
	{
	public:
		class UClass*                                              InfluenceInput;                                          // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantTargetInfluenceToBeHigherThanCurrent;               // 0x0038(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PJ5L[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_MatchingBehaviour
	 * Size -> 0x0028 (FullSize[0x0058] - InheritedSize[0x0030])
	 */
	class UI_MatchingBehaviour : public UUtilityAI_InputAxis
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             EnemyOrFriendly;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G1BL[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              BehaviourClass;                                          // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      OtherBehaviourClasses;                                   // 0x0040(0x0010) Edit, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRangeAsPercent;                                         // 0x0050(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VEO1[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_MatchingLocation
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_MatchingLocation : public UUtilityAI_InputAxis
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             EnemyOrFriendly;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRangeAsPercent;                                         // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZWJQ[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_MatchingWeapon
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UI_MatchingWeapon : public UUtilityAI_InputAxis
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             EnemyOrFriendly;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MSPJ[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              WeaponClass;                                             // 0x0038(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRangeAsPercent;                                         // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GMVJ[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_NumActorsWithAITag
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_NumActorsWithAITag : public UUtilityAI_InputAxis
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_NumBotsTargettingActor
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_NumBotsTargettingActor : public UUtilityAI_InputAxis
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             EnemyOrFriendly;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bExcludeSelf;                                            // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_74HT[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_ObjectiveTimeRemaining
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_ObjectiveTimeRemaining : public UUtilityAI_InputAxis
	{
	public:
		bool                                                       bValueAsPercentRemaining;                                // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFactionOrAttackerDefender                             RelevantFaction;                                         // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UA39[0x2];                                   // 0x0032(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ValueIfNotRelevant;                                      // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_PathExists
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_PathExists : public UUtilityAI_InputAxis
	{
	public:
		bool                                                       bUseHierarchicalPathFinding;                             // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NZ81[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PointProjectionExtent;                                   // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_PathLength
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_PathLength : public UUtilityAI_InputAxis
	{
	public:
		float                                                      PullTowardsQuerierDistance;                              // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ERC8[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_Random
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_Random : public UUtilityAI_InputAxis
	{
	public:
		float                                                      PercentChance;                                           // 0x0030(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KK98[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_RecentlyReceivedDamageFrom
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_RecentlyReceivedDamageFrom : public UUtilityAI_InputAxis
	{
	public:
		float                                                      TimeSecondsToConsiderRecent;                             // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOutputIsPercentOfRecentDamage;                          // 0x0034(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HZS1[0x3];                                   // 0x0035(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_StatCurrent
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UI_StatCurrent : public UUtilityAI_InputAxis
	{
	public:
		TBL_EStat                                                  Stat;                                                    // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EStat                                                  StatMax;                                                 // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7CI8[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_TargetIsAIAndTargettingMe
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_TargetIsAIAndTargettingMe : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_TargetIsHuman
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_TargetIsHuman : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_TimeSinceLastDidBehavior
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UI_TimeSinceLastDidBehavior : public UUtilityAI_InputAxis
	{
	public:
		bool                                                       bUseMaxIfActionStillUnderway;                            // 0x0030(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseMaxOnlyIfSameTarget;                                 // 0x0031(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GUV6[0x6];                                   // 0x0032(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              Behaviors[0x50];                                         // 0x0032(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_TimeUntilIDieFromBeingOutOfCombat
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_TimeUntilIDieFromBeingOutOfCombat : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.I_VerticalDistance
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UI_VerticalDistance : public UUtilityAI_InputAxis
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InputReplay
	 * Size -> 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
	 */
	class UInputReplay : public UObject
	{
	public:
		class FString                                              DebugString;                                             // 0x0028(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FInputReplayValues>                          FrameData;                                               // 0x0038(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        Version;                                                 // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S15P[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInputReplayValues                                  NullFrame;                                               // 0x0050(0x0048) Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InputReplayComponent
	 * Size -> 0x00A0 (FullSize[0x01A8] - InheritedSize[0x0108])
	 */
	class UInputReplayComponent : public UActorComponent
	{
	public:
		bool                                                       bValidRotation;                                          // 0x0108(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I6OX[0x3];                                   // 0x0109(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            TargetRotation;                                          // 0x010C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TBL_EInputReplayState                                      ReplayState;                                             // 0x0118(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5GNE[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInputReplayValues                                  InputFrame;                                              // 0x0120(0x0048) Protected, NativeAccessSpecifierProtected
		class UInputReplay*                                        InputReplay;                                             // 0x0168(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        CurrentFrame;                                            // 0x0170(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            LastControlRotation;                                     // 0x0174(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FString                                              ReplayName;                                              // 0x0180(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<unsigned char>                                      PlaybackPressed;                                         // 0x0190(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlaybackFrameTime;                                       // 0x01A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNewReplayFrame;                                         // 0x01A4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDoObjective;                                            // 0x01A5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoInputRec;                                           // 0x01A6(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WXOK[0x1];                                   // 0x01A7(0x0001) MISSED OFFSET (PADDING)

	public:
		void UpdateReplay(float DeltaTime);
		void SetReplayState(TBL_EInputReplayState NewReplayState);
		void SaveAutoInputRecord();
		void InputStop();
		void InputRec(const class FString& ReplayName);
		void InputPlay(const class FString& ReplayName);
		void InputCopyToOtherChars(const class FString& ReplayName);
		void InputAppend(const class FString& ReplayName, const class FString& ReplayName2);
		struct FVector GetRelativeLocation(class AActor* Actor);
		float GetRelativeFacingAngle(class AActor* Actor);
		int GetNumFrames();
		class UInputReplay* GetInputReplay();
		int GetCurrentFrame();
		struct FReplayCharacterState GetCharacterState(class ATBLCharacter* Character);
		void DoKeyEvent(unsigned char KeyBind, Engine_EInputEvent KeyEvent);
		void DoFrame(float DeltaTime);
		void ClearInput();
		void AutoInputRec();
		void AdvanceFrame();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InstancedObjectContainer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInstancedObjectContainer : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InteractableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInteractableInterface : public UInterface
	{
	public:
		void OnUse(class APawn* Pawn);
		void OnInteractableUnreachable(class APawn* Pawn);
		void OnInteractableCaptured(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Inventory
	 * Size -> 0x03C0 (FullSize[0x04C8] - InheritedSize[0x0108])
	 */
	class UInventory : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_HD2G[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnEquippedItemsChanged;                                  // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              WeaponFists;                                             // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              WeaponKnife;                                             // 0x0130(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          InventoryPenaltyTable;                                   // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          EquippedPenaltyTable;                                    // 0x0140(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BattleCryHeldTime;                                       // 0x0148(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadBattleCryHeldTime;                                // 0x014C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadJabHeldTime;                                      // 0x0150(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadInputDoubleTapWaitTime;                           // 0x0154(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadInputWaitTime;                                    // 0x0158(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YBLA[0x4];                                   // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ProjectileStarted;                                       // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ProjectileStopped;                                       // 0x0170(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemDamaged;                                  // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemDamageStateChanged;                       // 0x0190(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemStackChanged;                                      // 0x01A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddedToInventoryChanged;                               // 0x01B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMountingHorse;                                         // 0x01C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventorySlotsUpdated;                                 // 0x01D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleCryStarted;                                      // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleCryFinished;                                     // 0x01F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryActionFailed;                                 // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProjectileHitPassiveShield;                            // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AInventoryItem*                                      ItemToUse;                                               // 0x0220(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLoadoutSpawned;                                         // 0x0228(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AY4W[0x7];                                   // 0x0229(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLoadout                                            SpawnedLoadout;                                          // 0x0230(0x0038) Net, NoDestructor, NativeAccessSpecifierPublic
		class UObject*                                             ObjectForItemLoad;                                       // 0x0268(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bDisableAttackInputs : 1;                                // 0x0270(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8ECO[0x7];                                   // 0x0271(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDisabledAttackInput;                                   // 0x0278(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      BattleCryHeldStartTime;                                  // 0x0288(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadBattleCryHeldStartTime;                           // 0x028C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGamepadBattleCryState                                 GamepadBattleCryState;                                   // 0x0290(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2GTC[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        GamepadBattleCryPressedCount;                            // 0x0294(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadHorseBattleCryHeldStartTime;                      // 0x0298(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGamepadBattleCryState                                 GamepadHorseBattleCryState;                              // 0x029C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5LZT[0x3];                                   // 0x029D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        GamepadHorseBattleCryPressedCount;                       // 0x02A0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadWaitStabStartTime;                                // 0x02A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadWaitOverheadStartTime;                            // 0x02A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadJabHeldStartTime;                                 // 0x02AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadWaitRightDPadStartTime;                           // 0x02B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadRightDPadPressedCount;                            // 0x02B4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicatedArray_AInventoryItemPtr                  InventorySlots;                                          // 0x02B8(0x0020) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FReplicatedArray_AInventoryItemPtr                  AmmoItems;                                               // 0x02D8(0x0020) Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<class AInventoryItem*>                              EquippedItems;                                           // 0x02F8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AInventoryItem*>                              ItemsToEquip;                                            // 0x0308(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AInventoryItem*                                      ItemToReload;                                            // 0x0318(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FWeaponAbilityGrant>                         AbilitySlots;                                            // 0x0320(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AInventoryItem*                                      CustomizationItemToEquip;                                // 0x0330(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWantsToEquipShield;                                     // 0x0338(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWantsToSuicide;                                         // 0x0339(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EKillReason                                            SuicideReason;                                           // 0x033A(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KMDD[0x5];                                   // 0x033B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    bIsUnequippingOnMount;                                   // 0x0340(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsEquippingItem;                                        // 0x0358(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAddingItem;                                           // 0x0359(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPickingUpItem;                                        // 0x035A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWasKilled;                                              // 0x035B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsReloading;                                            // 0x035C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EWeaponAbilitySlotKey                                  DashPressed_Ability;                                     // 0x035D(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EWeaponAbilitySlotKey                                  HorseDashPressed_Ability;                                // 0x035E(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EWeaponAbilitySlotKey                                  ShovePressed_Ability;                                    // 0x035F(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              KnifeClass;                                              // 0x0360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<TBL_EWeaponAbilitySlotKey, class FName>               Keybinds;                                                // 0x0368(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class FName, TBL_EWeaponAbilitySlotKey>               KeybindToSlot;                                           // 0x03B8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class FName, TBL_EInventoryItemSlot>                  InventoryKeybindToSlot;                                  // 0x0408(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<TBL_EEquippedHand>                                  HandPriority;                                            // 0x0458(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TBL_EInventoryItemSlot>                             EquipPriority;                                           // 0x0468(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TBL_EInventoryItemSlot>                             NextPrevEquipExclusions;                                 // 0x0478(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TBL_EInventoryItemSlot>                             PreviousEquippedSlots;                                   // 0x0488(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FKeyPressedParams>                           KeyPressedAbility;                                       // 0x0498(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              NoveltyItemClass;                                        // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EFaction                                               Faction;                                                 // 0x04B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EInventoryItemSlot                                     OffHandEquippedOnDrop;                                   // 0x04B1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KOJE[0xE];                                   // 0x04B2(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastTriedBandageWorldTimeSeconds;                        // 0x04C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BandageRefillDisplayDuration;                            // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UnequipCustomizationItem();
		void UnequipAllItems(bool bImmediately, bool bPlayUnequip);
		void SwitchToBrokenItem(class AInventoryItem* Item);
		void SwitchInventoryItem();
		void StabPressed();
		void SlashPressed();
		bool ShowBandageRefillActors();
		void SetObjectForItemLoad(class UObject* Object);
		void ServerSetObjectForItemLoad(class UObject* Object);
		void ServerDebugSetAmmo(int Ammo);
		class AInventoryItem* RemoveItem(TBL_EInventoryItemSlot Slot, bool bEndAttack);
		void RefillItems(TArray<class AInventoryItem*>* OutGrantedItems, TArray<class UClass*> ItemsToRefill, bool RefillAllAmmoItems, bool UseStackCountFromItem, int StacksToAdd, TBL_EPickupEquipOptions EquipOptions);
		void QueueWeaponFlourish();
		void PickupTornOffItem(class UClass* ItemClass);
		void PickupItem(class AInventoryItem* Item, int StackCountToAdd, TBL_EPickupEquipOptions EquipOptions, class AActor* Initiator, bool bIgnoreStateCheck, bool bGiveWeapon);
		void OverheadPressed();
		void OnRep_IsUnequippingOnMount();
		void OnRep_InventorySlots();
		void OnRep_AmmoItems();
		void OnRemoveCondition(class AActor* Actor, TBL_EConditionType Condition);
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnCombatStateEvent(class AActor* Actor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnCombatStateEnd(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnApplyCondition(class AActor* Actor, TBL_EConditionType Condition);
		bool IsShieldEquipped();
		void InventoryPrimary();
		void InventoryPrevious();
		void InventoryNext();
		void InventoryKeyPressed(TBL_EInventoryItemSlot Slot);
		void HorseBattleCryPressed();
		bool HasMissingItemsToRefill(TArray<class UClass*> ItemsToRefill);
		float GetTimeSinceLastTriedBandage();
		void GetRefillItemsToGrant(TMap<class UClass*, int>* ItemsToGrant, TArray<class UClass*> ItemsToRefill, bool RefillAllAmmoItems, bool UseStackCountFromItem, int StacksToAdd);
		class UClass* GetNoveltyItemClass();
		class FName GetKeybindName(TBL_EInventoryItemSlot Slot);
		TArray<class AInventoryItem*> GetInventoryItemsBySlot(TBL_EInventoryItemSlot Slot);
		class AInventoryItem* GetInventoryItemBySlot(TBL_EInventoryItemSlot Slot);
		class AInventoryItem* GetEquippedWeapon();
		TArray<class AInventoryItem*> GetEquippedItems();
		class AInventoryItem* GetEquippedItemByHand(TBL_EEquippedHand Hand);
		float GetBattleCryHeldProgress();
		class AInventoryItem* GetAmmoItem(class AInventoryItem* Item);
		TArray<class AInventoryItem*> GetAmmoInventoryItems();
		void EquipCustomizationItem(class AInventoryItem* Item);
		void DropItemOnKilled(class AInventoryItem* Item, const struct FDeathDamageTakenEvent& DamageEvent);
		void DropItem(TBL_EInventoryItemSlot Slot, const struct FDropItemParams& Params, bool bDuringParryEvent);
		void DropAllItems();
		void DoBattlecryAbility();
		void DoBattlecry();
		void ClientUsedItem(class AInventoryItem* Item);
		void ClientIsUnequippingOnMount(bool OnMount);
		bool CanSwitchInventoryItem(const class FName& KeyBind);
		void BroadcastProjectileHitPassiveShield(class AInventoryItem* Shield, class AInventoryItem* Projectile);
		void BroadcastInventoryItemDamaged(class AInventoryItem* Item, const struct FInventoryItemDamagedParams& Params);
		void ApplyBlockedDamage(const struct FInventoryItemDamagedParams& Params, class AInventoryItem* BlockingItem);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InventoryItem
	 * Size -> 0x0CF0 (FullSize[0x0FE0] - InheritedSize[0x02F0])
	 */
	class AInventoryItem : public ATBLActor
	{
	public:
		unsigned char                                              UnknownData_N350[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        Version;                                                 // 0x02F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9O4G[0x4];                                   // 0x02FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     ProjectileRoot;                                          // 0x0300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     ProjectileSmoothing;                                     // 0x0308(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                StaticMesh;                                              // 0x0310(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                StaticMesh1PShadow;                                      // 0x0318(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       ProjectileCollision;                                     // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     StickPoint;                                              // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLProjectileMovementComponent*                     ProjectileMovement;                                      // 0x0330(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              Interactable;                                            // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent*                                        AudioComponent;                                          // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLParticleSystemComponent*                         WeaponSwipeParticleComponent;                            // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLParticleSystemComponent*                         WeaponThrowParticleComponent;                            // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EInventoryItemSlot>                             CompatibleSlots;                                         // 0x0358(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EEquippedHand>                                  CanBeEquipped;                                           // 0x0368(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FAimAssistAttackData>                        AllowedAimAssistAttacks;                                 // 0x0378(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysEnableFriction;                                   // 0x0388(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysPrioritizeCloserTargets;                          // 0x0389(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyTargetAllies;                                       // 0x038A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysScalingDistanceFrictionEnabled;                   // 0x038B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysFrictionInnerOnly;                                // 0x038C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EDQL[0x3];                                   // 0x038D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAimAssistFrictionData                              InnerBoxFrictionData;                                    // 0x0390(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FAimAssistFrictionData                              OuterBoxFrictionData;                                    // 0x03A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ActivationMinDistanceOverride;                           // 0x03B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActivationMaxDistanceOverride;                           // 0x03B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysEnableInnerBoxForgiveness;                        // 0x03B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QRM4[0x3];                                   // 0x03B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MagnetismMoveSpeedModifierSelf;                          // 0x03BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MagnetismMoveSpeedModifierTarget;                        // 0x03C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAimAssistTargetBoxData                             AimAssistTargetBoxOverrides;                             // 0x03C4(0x0020) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bCannotEquipOnHorse : 1;                                 // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bPlayEquipAnimation : 1;                                 // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bDisableJump : 1;                                        // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsShield : 1;                                           // 0x03E4(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bTrackKillAchievement : 1;                               // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bPlayPickupAnimation : 1;                                // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseItemOnEquip : 1;                                     // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseRangedSignificance : 1;                              // 0x03E4(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              hasHealth : 1;                                           // 0x03E5(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsBreakable : 1;                                        // 0x03E5(0x0001) BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CanBeDisarmed : 1;                                       // 0x03E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bPlaceOnGroundWhenSwapped : 1;                           // 0x03E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bDoNotAutoEquip : 1;                                     // 0x03E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bShouldScaleDrawStrength : 1;                            // 0x03E5(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bClickToFire : 1;                                        // 0x03E5(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAutomaticReload : 1;                                    // 0x03E5(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bLoaded : 1;                                             // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanProjectileStick : 1;                                 // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanProjectileStickToShield : 1;                         // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAlignProjectilePitchToSurfaceOnStick : 1;               // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UseRangedCrossHair : 1;                                  // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bTearOffOnMovementFinished : 1;                          // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseOverrideLifespan : 1;                                // 0x03E6(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DisabledInLoadout : 1;                                   // 0x03E6(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              EquipOnPickup : 1;                                       // 0x03E7(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bAlwaysAutoPickup : 1;                                   // 0x03E7(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bNeedsUpdateVisualization : 1;                           // 0x03E7(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ThwackOnHit : 1;                                         // 0x03E7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bQuickThrowSpecial : 1;                                  // 0x03E7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanAttackWhileUnequipped : 1;                           // 0x03E7(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UseFirstAndThirdPersonTransformSetup : 1;                // 0x03E7(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsFakeItem : 1;                                         // 0x03E7(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bUseFireAmmo : 1;                                        // 0x03E8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsCarryableNPCItem : 1;                                 // 0x03E8(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M0WK[0x7];                                   // 0x03E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EEquippedHand, struct FInventoryAttachPointInfo>  AttachPoints;                                            // 0x03F0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FInventoryItemAnimation>                     Animation;                                               // 0x0440(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FInventoryItemAnimation>                     CustomizationAnimation;                                  // 0x0450(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInventoryType                                         ItemType;                                                // 0x0460(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K0W7[0x3];                                   // 0x0461(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      EquipTime;                                               // 0x0464(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UnequipTime;                                             // 0x0468(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KVVN[0x4];                                   // 0x046C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FWeaponAbilitySlots                                 Abilities;                                               // 0x0470(0x0230) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UWeaponTracersBlueprint*                             TracerType;                                              // 0x06A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWeaponTracersBlueprint*                             AltTracerType;                                           // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EWeaponType                                            WeaponType;                                              // 0x06B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LTA6[0x3];                                   // 0x06B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DamageModifier;                                          // 0x06B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Damage;                                                  // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SiegeDamage;                                             // 0x06BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ShieldDamageModifier;                                    // 0x06C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O0TL[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttackType*                                         ThrownAttackType;                                        // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       DamageSource;                                            // 0x06D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   Knockback;                                               // 0x06D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         TurnLimitCurve;                                          // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         VerticalTurnLimitCurve;                                  // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         TurnLimitScaleByDegreesTurned;                           // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnLimitStrength;                                       // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VerticalTurnLimitStrength;                               // 0x06FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ReverseTurnLimitCurve;                                   // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReverseTurnLimitStrength;                                // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ESpeedPenalty                                          SpeedPenalty;                                            // 0x070C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FShieldSettings                                     ShieldSettings;                                          // 0x070D(0x0001) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		TBL_EMeleeAttackCategory                                   MeleeAttackCategory;                                     // 0x070E(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ERangedAttackCategory                                  RangedAttackCategory;                                    // 0x070F(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EBlockingCategory                                      BlockingCategory;                                        // 0x0710(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F7FK[0x7];                                   // 0x0711(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MountedItemClass;                                        // 0x0718(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      MountedItemParent;                                       // 0x0720(0x0008) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              BrokenItemClass;                                         // 0x0728(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              InheritAnimTimings;                                      // 0x0730(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnimationSpeedModifier;                                  // 0x0738(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FPickupItemSettings                                 PickupItemSettings;                                      // 0x073C(0x000C) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FUseItemSettings                                    UseItemSettings;                                         // 0x0748(0x0018) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              ConstructableLimit;                                      // 0x0760(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8VSN[0x7];                                   // 0x0761(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              SpecialItemAbility;                                      // 0x0768(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<TBL_EFaction, class UClass*>                          OverrideItemClassByTeam;                                 // 0x0770(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic
		float                                                      HealthValue;                                             // 0x07C0(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamagedPercent;                                          // 0x07C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         DamagedMesh;                                             // 0x07C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         DestroyedMesh;                                           // 0x07D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInventoryItemDamagedState                             DamagedState;                                            // 0x07D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R0KL[0x3];                                   // 0x07D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RiposteTime;                                             // 0x07DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   WindupLunge;                                             // 0x07E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   Lunge;                                                   // 0x07E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   LungeLeft;                                               // 0x07F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   LungeRight;                                              // 0x07F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   HorseLunge;                                              // 0x0800(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   ParrySuccess;                                            // 0x0808(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   Blocked;                                                 // 0x0810(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementSequence*                                   WasHitEarly;                                             // 0x0818(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RagdollImpulse;                                          // 0x0820(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GDGK[0x4];                                   // 0x0824(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWeaponGoreSlot>                             GoreActions;                                             // 0x0828(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bProjectileAttachedViaReplication : 1;                   // 0x0838(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T41H[0x7];                                   // 0x0839(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDamageSource*                                       FireDamage;                                              // 0x0840(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       RangedDamageSource;                                      // 0x0848(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DrawStrength;                                            // 0x0850(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDrawStrength;                                         // 0x0854(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDrawPowerTime;                                        // 0x0858(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDrawPowerTime;                                        // 0x085C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAmmoStackType                                         AmmoStackType;                                           // 0x0860(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              MaxStackCount;                                           // 0x0861(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              StackCount;                                              // 0x0862(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QDIG[0x5];                                   // 0x0863(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              OverrideMaxStackCount[0x50];                             // 0x0863(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              OverrideStackCount[0x50];                                // 0x08B8(0x0050) UNKNOWN PROPERTY: MapProperty
		float                                                      LowAmmoPercent;                                          // 0x0908(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ReloadCombatState;                                       // 0x090C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReloadTime;                                              // 0x0914(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AmmoItemClass;                                           // 0x0918(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              FireAmmoItemClass;                                       // 0x0920(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              QuiverItemClass;                                         // 0x0928(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AttachAmmoSocket;                                        // 0x0930(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ProjectileSpawnPoint;                                    // 0x0938(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ThirdPersonProjectileSpawnPointOverride;                 // 0x0940(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseThirdPersonProjectileSpawnPointOverride;             // 0x0948(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HDQL[0x3];                                   // 0x0949(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             ProjectileSpawnOffset;                                   // 0x094C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                FakeClientSpawnPoint;                                    // 0x0958(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileInitialRotation;                               // 0x0960(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileRotationRate;                                  // 0x0964(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRotateProjectileCollision;                              // 0x0968(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KHE8[0x7];                                   // 0x0969(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         ProjectileRotationCurve;                                 // 0x0970(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileDrag;                                          // 0x0978(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3FN2[0x4];                                   // 0x097C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         ProjectileDrawDamageScale;                               // 0x0980(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ProjectileDistanceDamageScale;                           // 0x0988(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceVelocityModifier;                                  // 0x0990(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceDamageWorld;                                       // 0x0994(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BounceDamageParried;                                     // 0x0998(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AimPenaltyModifier;                                      // 0x099C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanStickPlayersToWall : 1;                              // 0x09A0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O6IM[0x3];                                   // 0x09A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      StickPlayersToWallDistance;                              // 0x09A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FArrowCamSettings                                   ArrowCamSettings;                                        // 0x09A8(0x0024) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FWorldHitAngleRange                                 WorldHitAngleRange;                                      // 0x09CC(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      WorldHitStartPercentage;                                 // 0x09DC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WorldHitStopPercentage;                                  // 0x09E0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAIRanges                                           AIRanges;                                                // 0x09E4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		TBL_ECharacterSignificanceLevel                            Significance;                                            // 0x09F0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FInventoryItemState                                 State;                                                   // 0x09F1(0x0003) BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TBL_EInventoryItemSlot                                     Slot;                                                    // 0x09F4(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UWIJ[0x3];                                   // 0x09F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FName                                   TornOffName;                                             // 0x09F8(0x0018) Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Int32                                   InvocationId;                                            // 0x0A10(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     FirstPersonTransformRoot;                                // 0x0A28(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     ThirdPersonTransformRoot;                                // 0x0A30(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      bDropOffOnCharacterHitTime;                              // 0x0A38(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HYWS[0x4];                                   // 0x0A3C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInventoryItemDisplayInfo                           DisplayInfo;                                             // 0x0A40(0x0040) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       InventoryItemAKEvent_Action;                             // 0x0A80(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       InventoryItemAKEvent_Impact;                             // 0x0A88(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       InventoryItemAKEvent_ImpactThrown;                       // 0x0A90(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       BattleCryOverrideAkEvent;                                // 0x0A98(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       PickupItemSound;                                         // 0x0AA0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       PickupManyItemSound;                                     // 0x0AA8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FProjectileSounds                                   ProjectileSounds;                                        // 0x0AB0(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FWeaponMaterialSoundConfig                          WeaponActionMaterials;                                   // 0x0AD8(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimationSetChanged;                                   // 0x0B30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAddedToInventoryChanged;                               // 0x0B40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOwnerChanged;                                          // 0x0B50(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDropped;                                               // 0x0B60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnThrown;                                                // 0x0B70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpawnFakeClient;                                       // 0x0B80(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetAttached;                                           // 0x0B90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBattleCryTriggered;                                    // 0x0BA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProjectileHitEvent;                                    // 0x0BB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      GlobalLifespan;                                          // 0x0BC0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SwingWindDistance;                                       // 0x0BC4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OverrideLifespan;                                        // 0x0BC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EWeaponTag                                             CustomizationWeaponTag;                                  // 0x0BCC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EItemSoundPolicy                                       ItemSoundPolicy;                                         // 0x0BCD(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsCustomizationApplied : 1;                             // 0x0BCE(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X7ZC[0x1];                                   // 0x0BCF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FParryHitLocation                                   ParryHitLocation;                                        // 0x0BD0(0x000C) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bCanBeLitOnFire : 1;                                     // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bShouldStartOnFire : 1;                                  // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsOnFire : 1;                                           // 0x0BDC(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsSlashCounteredByStab : 1;                             // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsSpecialStabAnimation : 1;                             // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsSpecialVerticalAnimation : 1;                         // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bShouldSpecialIgnoreIsFacingTarget : 1;                  // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCanFistsParry : 1;                                      // 0x0BDC(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9BEG[0x3];                                   // 0x0BDD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFakeClientBlendParams                              FakeClientBlendParams;                                   // 0x0BE0(0x0070) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P9FX[0x10];                                  // 0x0C50(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               ProjectileMovementInitiator;                             // 0x0C60(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoundSwitchEntry                                   RecentAttackReleaseWeaponActionSwitch;                   // 0x0C68(0x0020) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class AInventoryItem*                                      AttachedAmmoItem;                                        // 0x0C88(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetOnFire;                                             // 0x0C90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetOffFire;                                            // 0x0CA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L81S[0x8];                                   // 0x0CB0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowSelection                              NoveltyScore;                                            // 0x0CB8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RLX3[0x8];                                   // 0x0CD0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FResetToTransform                       ResetToTransform;                                        // 0x0CD8(0x0028) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FReplicated_FReplicateDrop                          ReplicateDrop;                                           // 0x0D00(0x0038) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FReplicated_FProjectileHitParams                    ReplicatedProjectileHit;                                 // 0x0D38(0x0040) Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		int                                                        LastStackCount;                                          // 0x0D78(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DebugPreviousLocation;                                   // 0x0D7C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInventory*                                          Inventory;                                               // 0x0D88(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInventoryAttachPointInfo                           NoAttachPoint;                                           // 0x0D90(0x0024) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FInventoryAttachPointInfo                           DefaultPrimaryAttachPoint;                               // 0x0DB4(0x0024) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FInventoryAttachPointInfo                           DefaultOffHandAttachPoint;                               // 0x0DD8(0x0024) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_07R3[0x4];                                   // 0x0DFC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWeaponTracers*                                      CurrentWeaponTracers;                                    // 0x0E00(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bPendingHiddenInGame : 1;                                // 0x0E08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bMatchStateHidden : 1;                                   // 0x0E08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsAnimating : 1;                                        // 0x0E08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bAttachAmmo : 1;                                         // 0x0E08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              AddedToInventory : 1;                                    // 0x0E08(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bWasThrown : 1;                                          // 0x0E08(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bPlacedInWorld : 1;                                      // 0x0E08(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bShouldAttachRagdoll : 1;                                // 0x0E08(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bFakeClientStickPoint : 1;                               // 0x0E09(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CA7D[0x2];                                   // 0x0E0A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             AttachRadollLocation;                                    // 0x0E0C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KYMC[0x8];                                   // 0x0E18(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          PreviousArmBase;                                         // 0x0E20(0x0030) Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          PreviousComponentTrs;                                    // 0x0E50(0x0030) Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      PreviousAimPitch;                                        // 0x0E80(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PrevAnimPercent;                                         // 0x0E84(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnEquipped;                                              // 0x0E88(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnStartUseItem;                                          // 0x0E98(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnUseItem;                                               // 0x0EA8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              BlacklistedPlayers[0x50];                                // 0x0EB8(0x0050) UNKNOWN PROPERTY: SetProperty
		TArray<class FName>                                        AnimTimingProperties;                                    // 0x0F08(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AInventoryItem*                                      FireAmmoItem;                                            // 0x0F18(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSimulatedProjectile                                SimulatedProjectile;                                     // 0x0F20(0x0018) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4E48[0x18];                                  // 0x0F38(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          SkeletalMeshTransform;                                   // 0x0F50(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FTransform                                          DefaultShieldCollisionRelativeTransform;                 // 0x0F80(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class ATBLCharacterBase*>                           FakeClientCollisionEnabled;                              // 0x0FB0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class ATBLCharacterBase>                    CarriedCharacter;                                        // 0x0FC0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RN8N[0x18];                                  // 0x0FC8(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateVisualization(float DeltaTime);
		void StartSimulatedProjectile(int AttackID);
		bool ShouldDropOnDowned();
		bool ShouldCustomizePlacedInWorldItem(class ATBLCharacter* OwningCharacter);
		bool ShouldAttachRagdoll();
		void SetupHapticsForPS5OnSpawningAttachment(class AController* InController);
		void SetUnequipped();
		void SetStackCount(int Count);
		void SetRecentAttackReleaseWeaponActionSwitch(const struct FSoundSwitchEntry& Entry);
		void SetPendingHiddenInGame(bool bPendingHiddenInGame);
		void SetOverrideLifeSpan(bool EnableOverride, float NewOverrideLifespan);
		void SetOnFire();
		void SetOffFire();
		void SetInactive();
		void SetHealth(float Health);
		void SetDamagedState(TBL_EInventoryItemDamagedState NewDamagedState);
		void SetAddedToInventory(bool inAddedToInventory);
		void ResetMaxStackCount();
		void ResetItemToTransform(const struct FTransform& Transform);
		void RemoveBlacklistedPawn(class ATBLCharacter* Player);
		void ReloadThrownWeapon();
		void PlayImpactEvent(const struct FSoundSwitchEntry& SoundSwitch);
		void PlayEquipAnimation();
		int PlayActionEvent(const struct FSoundSwitchEntry& SoundSwitch);
		bool OverridePickupEvent(class ATBLCharacter* Character, bool bGiveWeapon, bool bIsAutoPickup);
		void OnWasParried(class ATBLCharacter* ParryingCharacter);
		void OnUseItemEnded(class AActor* Actor, const class FName& CombatState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatStateBP);
		void OnUnequipComplete(class ATBLCharacter* Character);
		void OnUnequipCombatStateEnd(class AActor* Actor, const class FName& CombatState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatStateBP);
		void OnRep_UseFireAmmo();
		void OnRep_TornOffName();
		void OnRep_State();
		void OnRep_StackCount();
		void OnRep_ResetToTransform();
		void OnRep_ProjectileHit();
		void OnRep_MountedItemParent();
		void OnRep_IsOnFire();
		void OnRep_HealthValue();
		void OnRep_Drop();
		void OnRep_AddedToInventory();
		void OnReloadCombatStateEnd(class AActor* Actor, const class FName& CombatState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatStateBP);
		void OnProjectileHitTarget(const struct FHitResult& Hit);
		void OnProjectileHit(const struct FHitResult& HitResult);
		void OnProjectileBounce(const struct FHitResult& Hit, bool bParried);
		void OnPlayerMeshChanged(class USkeletalMeshComponent* OldMesh, class USkeletalMeshComponent* NewMesh);
		void OnPlayActionEvent(const struct FSoundSwitchEntry& SoundSwitch);
		void OnPickupEnded(class AActor* Actor, const class FName& CombatState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatStateBP);
		void OnMovementStarted();
		void OnMovementFinished();
		void OnMeleeSuccess(class ATBLCharacter* DamagedCharacter);
		void OnLocalPlayerStateReplicated(class APlayerState* PlayerState);
		void OnInitialize();
		void OnFakeClientProjectileHit(const struct FHitResult& HitResult);
		void OnEquipComplete();
		void OnEquipCombatStateEnd(class AActor* Actor, const class FName& CombatState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatStateBP);
		void OnDamaged(const struct FInventoryItemDamagedParams& Params);
		void OnAttackInterrupted(int AttackID);
		void OnAttachedActorKilled(const struct FDeathDamageTakenEvent& Event);
		void OnAttachedActorDestroyed(class AActor* DestroyedActor);
		void OnAnimNotifyWeaponDetach(class UTBLCharacterAnimInstance* AnimBP);
		void OnAnimNotifyWeaponAttach(class UTBLCharacterAnimInstance* AnimBP);
		void OnAnimNotifyUseItem(class UTBLCharacterAnimInstance* AnimBP);
		void NetMulticastOnAddToInventoryItemPool();
		void NetMulticastFastSharedReplication(const struct FFastSharedProperties_InventoryItem& Properties);
		bool IsSimulatingPhysics();
		bool IsLowAmmo();
		bool IsAddedToInventory();
		void InitializeStackCountOnSpawn(class ATBLCharacter* CharacterOwner);
		void InitializeProjectileMovement(class AActor* Initiator, float InitialSpeed, bool bFakeClient);
		void InitializeGoreHead(class ATBLCharacter* Character, const struct FGoreHeadParams& Params, const struct FVector& Impulse);
		void InitDebugPreviousLocation();
		class UShapeComponent* GetTeamProjectileCollision();
		int GetStackCount();
		void GetSpecialAttackWindupSwitchOverride(class FString* SwitchState);
		class USkeletalMeshComponent* GetSkeletalMesh();
		class UPrimitiveComponent* GetShieldCollision();
		class UPrimitiveComponent* GetPhysicsMesh();
		class ATBLCharacter* GetOwningPawn();
		class UStaticMeshComponent* GetMesh();
		float GetMaxHealth();
		TBL_EWeaponMaterial GetMaterialByWeaponAction(bool IsAttacking, bool IsDefending, const class FName& AttackName);
		float GetHealthPercent();
		float GetHealth();
		struct FInventoryItemDisplayInfo GetDisplayInfoForFaction(TBL_EFaction Faction);
		float GetDamageSourcePenetration();
		class FString GetDamageSourceName(class FText* NameText);
		class ATBLCharacterBase* GetCarriedCharacter();
		void GetAttachRagdollParams(struct FAttachRagdollParams* AttachRagdollParams, class ATBLCharacter* Character, const struct FDeathDamageTakenEvent& DamageEvent);
		class USceneComponent* GetAttachRagdollComponent();
		void FinishUnequippingOnAnimNotify(class ATBLCharacter* Character);
		void EventUsePressed(class APawn* Pawn, class UInteractableComponent* InteractableComponent);
		void EnableCollisionForFakeClient(class ATBLCharacterBase* Character);
		void DisableCollisionForFakeClient();
		void DestroyFakeClient();
		void ClientToBeEquipped();
		void ClientOnItemUnequipped();
		void ClientOnItemEquipped(class AActor* NewOwner);
		void CheckStickPlayersToWall(class ATBLCharacter* KilledChar);
		bool CanUseItem();
		bool CanPickup(class APawn* Pawn);
		bool CannotAutoPickup(class APawn* Pawn);
		void BroadcastAttachRagdoll(const struct FVector& AttachLocation);
		void BounceOnProjectileHit(const struct FHitResult& HitResult, class AInventoryItem* BlockingItem, float InBounceVelocityModifier);
		void AttachSimulatedProjectileOnKill(const struct FHitResult& HitResult);
		void ApplyImpulseToGoreHead(const struct FVector& Impulse);
		void ApplyDamage(float InDamage);
		void AddToStackCount(int Delta);
		void AddIgnoreActors(class AActor* Initiator);
		void AddBlacklistedPawn(class ATBLCharacter* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InvocationActorComponent
	 * Size -> 0x0040 (FullSize[0x0148] - InheritedSize[0x0108])
	 */
	class UInvocationActorComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_I3LN[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FInvocationInfo                         Info;                                                    // 0x0118(0x0030) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic

	public:
		void OnRep_Info();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.InvocationComponentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UInvocationComponentInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsActiveRiposte
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsActiveRiposte : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsAlive
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsAlive : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsAttackType
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UIsAttackType : public UCondition
	{
	public:
		class FName                                                AttackTypeName;                                          // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsCombatState
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UIsCombatState : public UCondition
	{
	public:
		class FName                                                CombatState;                                             // 0x0148(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsCounter
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsCounter : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsCounterSuccess
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsCounterSuccess : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsCrouched
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsCrouched : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsEnemy
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UIsEnemy : public UCondition
	{
	public:
		bool                                                       bDeadPawnsAreEnemy;                                      // 0x0148(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZQU3[0x7];                                   // 0x0149(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsHorseMovementState
	 * Size -> 0x0010 (FullSize[0x0158] - InheritedSize[0x0148])
	 */
	class UIsHorseMovementState : public UCondition
	{
	public:
		TBL_EHorseMovementStateOp                                  Operator;                                                // 0x0148(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZN7N[0x3];                                   // 0x0149(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                MovementState;                                           // 0x014C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3FD1[0x4];                                   // 0x0154(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsLookingDown
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsLookingDown : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsMovementDirection
	 * Size -> 0x0018 (FullSize[0x0160] - InheritedSize[0x0148])
	 */
	class UIsMovementDirection : public UCondition
	{
	public:
		TArray<TBL_EMovementDirection>                             ValidDirections;                                         // 0x0148(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseInputDirection;                                      // 0x0158(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseLastNonZero;                                         // 0x0159(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZMCP[0x6];                                   // 0x015A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsMovementMode
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UIsMovementMode : public UCondition
	{
	public:
		Engine_EMovementMode                                       MovementMode;                                            // 0x0148(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3Q20[0x7];                                   // 0x0149(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsMoving
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsMoving : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsNot
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UIsNot : public UCondition
	{
	public:
		class UCondition*                                          Not;                                                     // 0x0148(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsRiposte
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsRiposte : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsSelf
	 * Size -> 0x0000 (FullSize[0x0148] - InheritedSize[0x0148])
	 */
	class UIsSelf : public UCondition
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsStat
	 * Size -> 0x0008 (FullSize[0x0150] - InheritedSize[0x0148])
	 */
	class UIsStat : public UCondition
	{
	public:
		TBL_EStat                                                  Stat;                                                    // 0x0148(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EComparisonType                                        ComparisonType;                                          // 0x0149(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DMOG[0x2];                                   // 0x014A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Value;                                                   // 0x014C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.IsType
	 * Size -> 0x0040 (FullSize[0x0188] - InheritedSize[0x0148])
	 */
	class UIsType : public UCondition
	{
	public:
		int                                                        Version;                                                 // 0x0148(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GV2W[0x4];                                   // 0x014C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        TypeNames;                                               // 0x0150(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      CachedTypes;                                             // 0x0160(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Types;                                                   // 0x0170(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              Type;                                                    // 0x0180(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ItemPreVisualizationInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UItemPreVisualizationInterface : public UInterface
	{
	public:
		void EnablePreVisualization();
		void DisablePreVisualization();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ItemPreVisualizationInterfaceHelper
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UItemPreVisualizationInterfaceHelper : public UObject
	{
	public:
		TMap<TWeakObjectPtr<class UObject>, class UClass*>         VisualizerListeners;                                     // 0x0028(0x0050) UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		void RemoveItemVisualizerListener(class UObject* WorldContextObject, class UObject* NewListener);
		void PlayerPossessedPawn(class APawn* NewPawn);
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		void CharacterEquippedItemsChanged();
		void AddItemVisualizerListener(class UObject* WorldContextObject, class UObject* NewListener, class UClass* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ItemReward
	 * Size -> 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
	 */
	class UItemReward : public UProgressionReward
	{
	public:
		TArray<struct FItemReference>                              Items;                                                   // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Quantity;                                                // 0x0058(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CC5N[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ItemTableReward
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UItemTableReward : public UProgressionReward
	{
	public:
		bool                                                       bMarketable;                                             // 0x0048(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTradeable;                                              // 0x0049(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RGRU[0x6];                                   // 0x004A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ItemTableRewardByAppId
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UItemTableRewardByAppId : public UProgressionReward
	{
	public:
		TArray<struct FItemReference>                              Items;                                                   // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMarketable;                                             // 0x0058(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTradeable;                                              // 0x0059(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EGF0[0x2];                                   // 0x005A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        AppId;                                                   // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EOnlineItemUnlockType                                  ItemUnlockType;                                          // 0x0060(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0C7J[0x7];                                   // 0x0061(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KeybindingWidgetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKeybindingWidgetInterface : public UInterface
	{
	public:
		void SetKeybinding(const struct FKey& Key, float Height, const struct FVector2D& IconSize);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KeyboardFocusInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UKeyboardFocusInterface : public UInterface
	{
	public:
		class UWidget* K2_GetFocusWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DestinationGeneratorVolume
	 * Size -> 0x0058 (FullSize[0x02E8] - InheritedSize[0x0290])
	 */
	class ADestinationGeneratorVolume : public AVolume
	{
	public:
		struct FGameplayTagContainer                               AITagsToAddWhenActivated;                                // 0x0290(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsActive;                                               // 0x02B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_63G1[0x3];                                   // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DestinationDensity;                                      // 0x02B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DestinationVariance;                                     // 0x02B8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EGenerationMode                                        GenerationMode;                                          // 0x02BC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JMFA[0x3];                                   // 0x02BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      NavMeshProjectionDepenetrationDistance;                  // 0x02C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H8IS[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FVector>                                     DestinationList;                                         // 0x02C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     DestinationListRelative;                                 // 0x02D8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ProjectDestinationListToNavMesh();
		struct FVector GetRandomDestination();
		TArray<struct FVector> GetDestinationsInGridDistance(const struct FVector& QueryLocation, int GridDistance);
		TArray<struct FVector> GetDestinationList();
		struct FVector GetDestinationByIndex(int Index);
		void GeneratePoints();
		void Deactivate();
		void Activate();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DestinationRenderingComponent
	 * Size -> 0x0040 (FullSize[0x04B0] - InheritedSize[0x0470])
	 */
	class UDestinationRenderingComponent : public UPrimitiveComponent
	{
	public:
		unsigned char                                              UnknownData_OWW5[0x40];                                  // 0x0470(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DestroyableByPushableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDestroyableByPushableInterface : public UInterface
	{
	public:
		void OnPushableBeginOverlap(class UPushableComponent* Pushable);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DestroyableComponent
	 * Size -> 0x0008 (FullSize[0x0468] - InheritedSize[0x0460])
	 */
	class UDestroyableComponent : public UInteractableComponent
	{
	public:
		TWeakObjectPtr<class UStatsComponent>                      StatsComponent;                                          // 0x0460(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DieFromFireWorker
	 * Size -> 0x0018 (FullSize[0x0058] - InheritedSize[0x0040])
	 */
	class UDieFromFireWorker : public UTBLAchievementWorker
	{
	public:
		class FString                                              AchievementID;                                           // 0x0040(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VHXY[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnTakenDamage(const struct FDamageTakenEvent& DamageEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DisplayComponent
	 * Size -> 0x0048 (FullSize[0x0150] - InheritedSize[0x0108])
	 */
	class UDisplayComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_PTDG[0x18];                                  // 0x0108(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              WidgetClass[0x28];                                       // 0x0108(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		TBL_EWidgetContainer                                       WidgetContainerType;                                     // 0x0148(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F2ZQ[0x7];                                   // 0x0149(0x0007) MISSED OFFSET (PADDING)

	public:
		TBL_EFaction STATIC_GetFactionFromRelevantFactionStatic(class UObject* WorldContextObject, TBL_EFactionOrAttackerDefender RelevantFaction);
		TBL_EFaction GetFactionFromRelevantFaction(TBL_EFactionOrAttackerDefender RelevantFaction);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ActorInfoDisplayComponent
	 * Size -> 0x0020 (FullSize[0x0170] - InheritedSize[0x0150])
	 */
	class UActorInfoDisplayComponent : public UDisplayComponent
	{
	public:
		TArray<struct FActorDisplayInfo>                           PerTeamDisplayInfo;                                      // 0x0150(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnPerTeamDisplayInfoChanged;                             // 0x0160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetPerTeamDisplayInfo(TArray<struct FActorDisplayInfo> InPerTeamDisplayInfo);
		struct FActorDisplayInfo GetRelevantDisplayInfo(TBL_EFaction Faction, bool bFlip);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ObjectiveStatusDisplayComponent
	 * Size -> 0x0158 (FullSize[0x02A8] - InheritedSize[0x0150])
	 */
	class UObjectiveStatusDisplayComponent : public UDisplayComponent
	{
	public:
		unsigned char                                              UnknownData_1G9N[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ConfigWidgetClass[0x28];                                 // 0x0150(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		bool                                                       ShowProgress;                                            // 0x0180(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLocalPlayerInsideZone;                                  // 0x0181(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EObjectiveState                                        DefaultObjectiveState;                                   // 0x0182(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7586[0x1];                                   // 0x0183(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultProgress;                                         // 0x0184(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               DefaultOwningTeam;                                       // 0x0188(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5EZJ[0x7];                                   // 0x0189(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                DefaultAgathaText;                                       // 0x0190(0x0018) Edit, NativeAccessSpecifierPublic
		class FText                                                DefaultMasonText;                                        // 0x01A8(0x0018) Edit, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   ActiveObjectiveIcon;                                     // 0x01C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   ContestedObjectiveIcon;                                  // 0x01C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_EObjectiveState                         ObjectiveState;                                          // 0x01D0(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   Progress;                                                // 0x01E8(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_EFaction                                OwningTeam;                                              // 0x0200(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		struct FReplicated_FText                                   AgathaText;                                              // 0x0218(0x0028) Net, RepNotify, NativeAccessSpecifierPublic
		struct FReplicated_FText                                   MasonText;                                               // 0x0240(0x0028) Net, RepNotify, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveStateChanged;                                 // 0x0268(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgressChanged;                                       // 0x0278(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOwningTeamChanged;                                     // 0x0288(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnObjectiveStateTextChanged;                             // 0x0298(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		void SetProgress(float Value);
		void SetOwningTeam(TBL_EFaction Value);
		void SetObjectiveStateText(TBL_EFaction Faction, const class FText& Value);
		void SetObjectiveState(TBL_EObjectiveState Value);
		void SetActiveIcon(class UMaterialInstance* NewIcon);
		void OnRep_Progress();
		void OnRep_OwningTeam();
		void OnRep_ObjectiveStateText();
		void OnRep_ObjectiveState();
		float GetProgress();
		TBL_EFaction GetOwningTeam();
		class FText GetObjectiveStateText(TBL_EFaction Faction);
		TBL_EObjectiveState GetObjectiveState();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SimpleDisplayComponent
	 * Size -> 0x0000 (FullSize[0x0150] - InheritedSize[0x0150])
	 */
	class USimpleDisplayComponent : public UDisplayComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ZoneDisplayComponent
	 * Size -> 0x0010 (FullSize[0x0160] - InheritedSize[0x0150])
	 */
	class UZoneDisplayComponent : public UDisplayComponent
	{
	public:
		unsigned char                                              UnknownData_IFHE[0x8];                                   // 0x0150(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLocalPlayerInsideZone;                                  // 0x0158(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2LS4[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.HudMarkerDisplayComponent
	 * Size -> 0x00E0 (FullSize[0x0230] - InheritedSize[0x0150])
	 */
	class UHudMarkerDisplayComponent : public UDisplayComponent
	{
	public:
		struct FReplicated_AActorPtr                               ActorToDisplayInfoFor;                                   // 0x0150(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              DefaultActorToDisplayInfoFor;                            // 0x0168(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             RelativeLocation;                                        // 0x0170(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseRelativeAsWorldOffset;                               // 0x017C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MCUA[0x3];                                   // 0x017D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    Visible;                                                 // 0x0180(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       StartVisible;                                            // 0x0198(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               VisibleToTeam;                                           // 0x0199(0x0001) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EMarkerType                                            MarkerType;                                              // 0x019A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7HUW[0x1];                                   // 0x019B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VisibleRadius;                                           // 0x019C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinVisibleDistance;                                      // 0x01A0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxVisibleDistance;                                      // 0x01A4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseActorLocation;                                       // 0x01A8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFocusMarker;                                          // 0x01A9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyRenderInLos;                                        // 0x01AA(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyFocusInLos;                                         // 0x01AB(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinFocusDist;                                            // 0x01AC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxFocusDist;                                            // 0x01B0(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5NG6[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         PercentFromCenterDistanceModifier;                       // 0x01B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         PercentFromCenterAlphaCurve;                             // 0x01C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         PercentFromCenterScaleCurve;                             // 0x01C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         DistAlphaCurve;                                          // 0x01D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         DistScaleCurve;                                          // 0x01D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       VisibleEvenOnOwnPawn;                                    // 0x01E0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LZ3I[0x3];                                   // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumFriendPartyMemberScale;                           // 0x01E4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseItemVisibility;                                      // 0x01E8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               ItemVisibilityRelevantFaction;                           // 0x01E9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y8LI[0x6];                                   // 0x01EA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              InventoryItemClass;                                      // 0x01F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EInventoryVisibilityCondition                          VisibilityCondition;                                     // 0x01F8(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseMountVisibility;                                     // 0x01F9(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JXQQ[0x6];                                   // 0x01FA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              MountClass;                                              // 0x0200(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EMountVisibilityCondition                              MountVisibilityCondition;                                // 0x0208(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LERX[0x3];                                   // 0x0209(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UWidgetVisibilityComponent>           WidgetVisibilityComponent;                               // 0x020C(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J84A[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnReceivedWidgetVisibilityComponent;                     // 0x0218(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bClampToScreen;                                          // 0x0228(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWantsToBeReplicated;                                    // 0x0229(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OQVY[0x6];                                   // 0x022A(0x0006) MISSED OFFSET (PADDING)

	public:
		bool ShouldClampToScreen();
		void SetWidgetVisibilityComponent(class UWidgetVisibilityComponent* InWidgetVisibilityComponent);
		void SetVisible(bool Value);
		void SetActorToDisplayInfoFor(class AActor* Actor);
		bool IsVisibleFor(class APlayerController* PlayerController, bool bCheckVisiblityComponent);
		bool IsVisible();
		class UWidgetVisibilityComponent* GetWidgetVisibilityComponent();
		bool GetVisible();
		struct FVector GetScreenLocation(class APlayerController* PlayerController, const struct FVector2D& WidgetSize, bool* bIsOnScreen, bool* bWasClamped);
		class AActor* GetActorToDisplayInfoFor();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UnderCrosshairDisplayComponent
	 * Size -> 0x0008 (FullSize[0x0158] - InheritedSize[0x0150])
	 */
	class UUnderCrosshairDisplayComponent : public UDisplayComponent
	{
	public:
		TBL_EFaction                                               VisibleToTeam;                                           // 0x0150(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GRFK[0x3];                                   // 0x0151(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxVisibleDistance;                                      // 0x0154(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.SubObjectiveZoneDisplayComponent
	 * Size -> 0x0058 (FullSize[0x0288] - InheritedSize[0x0230])
	 */
	class USubObjectiveZoneDisplayComponent : public UHudMarkerDisplayComponent
	{
	public:
		unsigned char                                              UnknownData_F2QJ[0x8];                                   // 0x0230(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bLocalPlayerInsideZone;                                  // 0x0238(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2UQB[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLocalPlayerInsideChanged;                              // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<struct FActorDisplayInfo>                           PerTeamDisplayInfo;                                      // 0x0250(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ConfigWidgetClass[0x28];                                 // 0x0260(0x0028) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ObjectiveZoneDisplayComponent
	 * Size -> 0x0000 (FullSize[0x0288] - InheritedSize[0x0288])
	 */
	class UObjectiveZoneDisplayComponent : public USubObjectiveZoneDisplayComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WidgetVisibilityComponent
	 * Size -> 0x0028 (FullSize[0x0130] - InheritedSize[0x0108])
	 */
	class UWidgetVisibilityComponent : public UActorComponent
	{
	public:
		class FScriptMulticastDelegate                             OnVisibilityChanged;                                     // 0x0108(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWidgetVisibilityComponentDestroyed;                    // 0x0118(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       bVisible;                                                // 0x0128(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCompletedFadeOut;                                       // 0x0129(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YIAZ[0x6];                                   // 0x012A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetVisibile(bool bInVisibility);
		void NotifyWidgetCompletedFadeOut(bool bInCompletedFadeOut);
		bool IsVisible();
		bool HasWidgetCompletedFadeOut();
		void ErrorNotifyTimer();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DisplayComponentInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UDisplayComponentInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DisplayDebugFileWriter
	 * Size -> 0x0010 (FullSize[0x02E0] - InheritedSize[0x02D0])
	 */
	class UDisplayDebugFileWriter : public UCanvas
	{
	public:
		unsigned char                                              UnknownData_6OTX[0x8];                                   // 0x02D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastY;                                                   // 0x02D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CSMV[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DrainStamina
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UDrainStamina : public UObject
	{
	public:
		TArray<class FName>                                        CombatStates;                                            // 0x0028(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DrainRate;                                               // 0x0038(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GR4G[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         DrainRateModifier;                                       // 0x0040(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      Time;                                                    // 0x0048(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastTickTime;                                            // 0x004C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        DisabledId;                                              // 0x0050(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bEnabled;                                                // 0x0054(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KKPF[0xB];                                   // 0x0055(0x000B) MISSED OFFSET (PADDING)

	public:
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnDestroyed(class AActor* DestroyedActor);
		void OnCombatStateEvent(class AActor* InActor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DropItem
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UDropItem : public UAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnableInteractableComponent
	 * Size -> 0x0008 (FullSize[0x0178] - InheritedSize[0x0170])
	 */
	class UEnableInteractableComponent : public UAction
	{
	public:
		bool                                                       bRestoreOnUndo;                                          // 0x0170(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSavedEnabled;                                           // 0x0171(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J7ST[0x6];                                   // 0x0172(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnvQueryGen_DestinationVolume
	 * Size -> 0x0048 (FullSize[0x00C8] - InheritedSize[0x0080])
	 */
	class UEnvQueryGen_DestinationVolume : public UEnvQueryGenerator_ProjectedPoints
	{
	public:
		class UClass*                                              Center;                                                  // 0x0080(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        Tag;                                                     // 0x0088(0x0008) Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAIDataProviderIntValue                             GridDistance;                                            // 0x0090(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnvQueryTest_InCombatArea
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_InCombatArea : public UEnvQueryTest
	{
	public:
		class UClass*                                              Context;                                                 // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnvQueryTest_IsAlive
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_IsAlive : public UEnvQueryTest
	{
	public:
		class UClass*                                              Context;                                                 // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnvQueryTest_IsEnemy
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_IsEnemy : public UEnvQueryTest
	{
	public:
		class UClass*                                              Context;                                                 // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnvQueryTest_OtherBotsTargetting
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_OtherBotsTargetting : public UEnvQueryTest
	{
	public:
		bool                                                       bSameTeamAsQuerier;                                      // 0x01F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GQ7E[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EnvQueryTest_TimesTargettedBy
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UEnvQueryTest_TimesTargettedBy : public UEnvQueryTest
	{
	public:
		class UClass*                                              TargettedBy;                                             // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TriggeredAction
	 * Size -> 0x0020 (FullSize[0x0190] - InheritedSize[0x0170])
	 */
	class UTriggeredAction : public UAction
	{
	public:
		TArray<class UAction*>                                     Actions;                                                 // 0x0170(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bTriggerOnce : 1;                                        // 0x0180(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bTriggerMustOccur : 1;                                   // 0x0180(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIgnoreTerminate : 1;                                    // 0x0180(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9YX2[0x3];                                   // 0x0181(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AActor>                               TargetActor;                                             // 0x0184(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8HFW[0x4];                                   // 0x018C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnInvocationComplete(class AAbilityInvocation* Invocation, class UAbilitySpec* AbilitySpec);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.EventCombatStateChanged
	 * Size -> 0x0018 (FullSize[0x01A8] - InheritedSize[0x0190])
	 */
	class UEventCombatStateChanged : public UTriggeredAction
	{
	public:
		class FName                                                CombatState;                                             // 0x0190(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatStateTag;                                          // 0x0198(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bTriggerOnEnd : 1;                                       // 0x01A0(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_63AO[0x3];                                   // 0x01A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        AttackID;                                                // 0x01A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FireArrowsWorker
	 * Size -> 0x0038 (FullSize[0x0078] - InheritedSize[0x0040])
	 */
	class UFireArrowsWorker : public UTBLAchievementWorker
	{
	public:
		int                                                        ArrowsFiredRequired;                                     // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B0U6[0xC];                                   // 0x0044(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AchievementIdString;                                     // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                RequiredState;                                           // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      EligibleWeapons;                                         // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnCombatStateEnd(const class FName& State, class AInventoryItem* AttackingWeapon, class UCombatState* InCombatState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FireSourceComponent
	 * Size -> 0x0010 (FullSize[0x0118] - InheritedSize[0x0108])
	 */
	class UFireSourceComponent : public UActorComponent
	{
	public:
		TArray<class FName>                                        CollisionComponents;                                     // 0x0108(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnLookAtFireSource(class ATBLCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FirstPersonCineCameraActor
	 * Size -> 0x0000 (FullSize[0x0830] - InheritedSize[0x0830])
	 */
	class AFirstPersonCineCameraActor : public ACineCameraActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FirstPersonCineCameraComponent
	 * Size -> 0x0050 (FullSize[0x0980] - InheritedSize[0x0930])
	 */
	class UFirstPersonCineCameraComponent : public UCineCameraComponent
	{
	public:
		float                                                      SecondsBeforeTakingOverCameraMax;                        // 0x092C(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SecondsSpentOutOfRange;                                  // 0x0930(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraTakeoverMinAngle;                                  // 0x0934(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraTakeoverMaxAngle;                                  // 0x0938(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SnapBackRotationRate;                                    // 0x093C(0x0004) Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlendAlpha;                                              // 0x0940(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCanLockRotation;                                        // 0x0944(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1LNO[0x3];                                   // 0x0945(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            CameraRotationOffset;                                    // 0x0948(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bAlwaysUsePawnPitch;                                     // 0x0954(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAlwaysUsePawnYaw;                                       // 0x0955(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bToldPCToIgnoreLook;                                     // 0x0956(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableThirdPersonMesh;                                  // 0x0957(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CameraLocationOffset;                                    // 0x0958(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             InterpCameraRotationOffset;                              // 0x0964(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECinematicCameraTargetLockMode                         CameraLockMode;                                          // 0x0970(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHorizontalLock;                                         // 0x0971(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VSRV[0x2];                                   // 0x0972(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      HorizontalLockYaw;                                       // 0x0974(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UD5K[0x8];                                   // 0x0978(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLStaticMeshComponent
	 * Size -> 0x0000 (FullSize[0x0500] - InheritedSize[0x0500])
	 */
	class UTBLStaticMeshComponent : public UStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FlammableStaticMeshComponent
	 * Size -> 0x0000 (FullSize[0x0500] - InheritedSize[0x0500])
	 */
	class UFlammableStaticMeshComponent : public UTBLStaticMeshComponent
	{
	public:
		void BurningApplied(const struct FVector& HitRelativeLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillWithWeaponWorker
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class UKillWithWeaponWorker : public UBaseKillWorker
	{
	public:
		TMap<class FString, struct FKillWithWeaponEntry>           KillAchivements;                                         // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillLowHealthWorker
	 * Size -> 0x0058 (FullSize[0x0098] - InheritedSize[0x0040])
	 */
	class UKillLowHealthWorker : public UBaseKillWorker
	{
	public:
		TMap<class FString, struct FKillHealthAchievementEntry>    KillHealthAchievements;                                  // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FNCE[0x8];                                   // 0x0090(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPawnHealthChanged(float Amount, class AActor* Initiator);
		void OnPawnChanged(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillXAsClassWorker
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class UKillXAsClassWorker : public UBaseKillWorker
	{
	public:
		TMap<class FString, struct FKillClassAchievementEntry>     KillAchivements;                                         // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2YQV[0x10];                                  // 0x0090(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillXFromDistanceWorker
	 * Size -> 0x0060 (FullSize[0x00A0] - InheritedSize[0x0040])
	 */
	class UKillXFromDistanceWorker : public UBaseKillWorker
	{
	public:
		TMap<class FString, struct FKillFromDistAchievementEntry>  KillFromDistAchievements;                                // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LKG9[0x10];                                  // 0x0090(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillXInMatchWorker
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UKillXInMatchWorker : public UBaseKillWorker
	{
	public:
		unsigned char                                              UnknownData_XTRU[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        RequiredKillCount;                                       // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RTZX[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AchievementString;                                       // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillXSiegeWeaponWorker
	 * Size -> 0x0028 (FullSize[0x0068] - InheritedSize[0x0040])
	 */
	class UKillXSiegeWeaponWorker : public UBaseKillWorker
	{
	public:
		int                                                        RequiredKills;                                           // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_B4Z9[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              AchievementIdString;                                     // 0x0048(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5NJS[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAIController
	 * Size -> 0x0428 (FullSize[0x0788] - InheritedSize[0x0360])
	 */
	class ATBLAIController : public AAIController
	{
	public:
		class UInputReplayComponent*                               InputReplayComponent;                                    // 0x0360(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAIControlHandler*                                   ControlHandler;                                          // 0x0368(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUtilityAI_DecisionMaker*                            GeneralDecisionMakerComponent;                           // 0x0370(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPossessedPawn;                                         // 0x0378(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPossessedPawnPendingDestroy;                           // 0x0388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartedBehaviorTree;                                   // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UBehaviorTree*                                       DefaultBehaviorTree;                                     // 0x03A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseCrowdManager;                                        // 0x03B0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverrideRotation;                                       // 0x03B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCreatePlayerState;                                      // 0x03B2(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W1NO[0x1];                                   // 0x03B3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      IdleTime;                                                // 0x03B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             MoveToNavMeshTarget;                                     // 0x03B8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SS0Z[0x4];                                   // 0x03C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLPlayerController*                                OverridePlayerController;                                // 0x03C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              CurrentlyUsedInteractable;                               // 0x03D0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsInteractableUseBeingHeld;                              // 0x03D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O1TX[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnInteractableStartedToBeHeld;                           // 0x03E0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableUsed;                                      // 0x03F0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableStoppedBeingHeld;                          // 0x0400(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFailedToSpawn;                                         // 0x0410(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FAIEventLog>                                 AIEventLog;                                              // 0x0420(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AAIPlayerStart*                                      SpawnPoint;                                              // 0x0430(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        BotId;                                                   // 0x0438(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FN9I[0x4];                                   // 0x043C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BotName;                                                 // 0x0440(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsLevelSpawnedBot;                                      // 0x0450(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPlayerCustomizedBot;                                  // 0x0451(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V8XO[0x6];                                   // 0x0452(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class AActor*, int>                                   NumTimesTargetted;                                       // 0x0458(0x0050) NativeAccessSpecifierPublic
		struct FAIPersonality                                      Personality;                                             // 0x04A8(0x0260) NativeAccessSpecifierPublic
		TArray<TBL_EAudioPersonalityType>                          PossiblePersonalities;                                   // 0x0708(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PersonalityTable;                                        // 0x0718(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOverridePersonalityRow;                                 // 0x0720(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6EYK[0x3];                                   // 0x0721(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                PersonalityRowOverride;                                  // 0x0724(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveInputTime;                                           // 0x072C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAllowPathingWithMoveInput;                              // 0x0730(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDummyBot;                                               // 0x0731(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bNullBot;                                                // 0x0732(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bBackfillBot;                                            // 0x0733(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           MoveInputDirection;                                      // 0x0734(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             PreviousLocation;                                        // 0x073C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             SpawnLocation;                                           // 0x0748(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            SpawnRotation;                                           // 0x0754(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class FName>                                        LoggedErrorTypes;                                        // 0x0760(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TargetMaxDistance;                                       // 0x0770(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FH1W[0x14];                                  // 0x0774(0x0014) MISSED OFFSET (PADDING)

	public:
		void UseInteractable(class UInteractableComponent* Interactable, bool bHold);
		void Suicide();
		void StopUsingInteractable();
		void SetTargetMaxDistance(float MaxDistance);
		void SetNullBot(bool bNull);
		void SetDummyBot(bool bDummy);
		void SetBackfillBot(bool bBackfill);
		void ResetError(const class FName& ErrorType);
		bool MoveToTargetLocation(const struct FVector& Target);
		bool MoveToNavMesh(const struct FVector& PathGoal, class AActor* PathGoalActor);
		void MoveInput(const struct FVector2D& InputDir, float Time, bool bAllowPathing);
		void LogEvent(const class FName& EventName, class AActor* Target, const class FString& DebugStr);
		void LogError(const class FName& ErrorType, const class FString& Message, bool bError);
		void Jump();
		bool IsOnNavMesh();
		bool IsLevelSpawnedBot();
		bool IsDummyBot();
		bool IsBackfillBot();
		void GiveWeapon(const class FName& Weapon);
		float GetTargetMaxDistance();
		class AActor* GetTarget();
		void Dismount();
		void STATIC_DestroyControllerAndPawn(class AController* Controller, class APawn* TargetPawn);
		void STATIC_DestroyController(class AController* Controller);
		bool CanPathFollow();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAICombatController
	 * Size -> 0x0178 (FullSize[0x0900] - InheritedSize[0x0788])
	 */
	class ATBLAICombatController : public ATBLAIController
	{
	public:
		TBL_EAiMeleeCombatMode                                     MeleeCombatMode;                                         // 0x0788(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QU8R[0x3];                                   // 0x0789(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Advantage;                                               // 0x078C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              CombatTarget;                                            // 0x0790(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MPEX[0x60];                                  // 0x0798(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UUtilityAI_CombatDecisionMaker*                      CombatDecisionMakerComponent;                            // 0x07F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0U05[0x18];                                  // 0x0800(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<float>                                              RecentBlockedHits;                                       // 0x0818(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LGLE[0x44];                                  // 0x0828(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeLastAttack;                                          // 0x086C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y4Q8[0x4];                                   // 0x0870(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CombatTargetDesiredDistance;                             // 0x0874(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAiCombatDistance                                      DesiredDistance;                                         // 0x0878(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAiCombatStrafing                                      DesiredStrafing;                                         // 0x0879(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1EG3[0x2];                                   // 0x087A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttackDistanceMultiplier;                                // 0x087C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EngageSprintStartOkayMin;                                // 0x0880(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EngageSprintStopMax;                                     // 0x0884(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintAttackOkayMax;                                     // 0x0888(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintAttackOkayMin;                                     // 0x088C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttackOkayMax;                                           // 0x0890(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      EngagementMin;                                           // 0x0894(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DisengagementMax;                                        // 0x0898(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DefaultDistanceToKeep;                                   // 0x089C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacehugRange;                                            // 0x08A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CloseAttackRange;                                        // 0x08A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MediumAttackRange;                                       // 0x08A8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FarAttackRange;                                          // 0x08AC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OutsideAttackRange;                                      // 0x08B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CombatMovementMaxDistance;                               // 0x08B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StuckMaxTime;                                            // 0x08B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CorneringDistance;                                       // 0x08BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      OffsetFromCornersDistance;                               // 0x08C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSprinting;                                              // 0x08C4(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CY9H[0x23];                                  // 0x08C5(0x0023) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        EdgeDetectionTimer;                                      // 0x08E8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             NearestNavWallNormal;                                    // 0x08F0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_99KG[0x4];                                   // 0x08FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void StrafeAndKeepDistance(TBL_EAiCombatDistance Distance, TBL_EAiCombatStrafing Strafing);
		void ReleaseBlock();
		void OnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void HoldBlock();
		void HandleTookDamage(const struct FDamageTakenEvent& Event);
		void HandleDamageCaused(const struct FDamageTakenEvent& DamageEvent);
		TBL_EAiMeleeCombatMode GetMeleeCombatMode();
		void Engage(const struct FEngageParams& InEngageParams);
		void EnemyOnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void Dodge(TArray<TBL_EMovementDirection> AllowedDirections);
		void Disengage(const struct FDisengageParams& InDisengageParams);
		void Attack(const struct FCombatAiAttackParams& InParams);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAILibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLAILibrary : public UBlueprintFunctionLibrary
	{
	public:
		class ATBLCharacter* STATIC_SpawnTBLAIFromClass(class UObject* WorldContextObject, class UClass* CharacterClass, TBL_EFaction Faction, class UClass* ControllerClass, class UBehaviorTree* BehaviorTree, const struct FVector& Location, const struct FRotator& Rotation, bool bNoCollisionFail);
		class ATBLAIController* STATIC_SpawnTBLAIControllerFromClass(class UObject* WorldContextObject, TBL_EFaction Faction, class UClass* ControllerClass, class UClass* NextSpawnCharacterClass, class UBehaviorTree* BehaviorTree, bool IsPlayerBot);
		void STATIC_PlayEmote(class ATBLCharacter* Character, const class FName& EmoteName);
		float STATIC_InfluenceAtLocation(class UClass* InfluenceInput, class AAIController* Controller, const struct FVector& Location);
		bool STATIC_GetPerceivedLocationOfActor(class AAIController* Controller, class AActor* Actor, struct FVector* OutVector);
		void STATIC_GetActorsByAITag(class UObject* WorldContextObject, const struct FGameplayTag& Tag, TBL_EFaction Faction);
		struct FGameplayTagContainer STATIC_GetActorAITags(class AActor* Actor, TBL_EFaction Faction);
		void STATIC_ClearAllAITagsForFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		void STATIC_AIUntagManyActors(TArray<class AActor*> Actor, const struct FGameplayTagContainer& TagsToRemove, TBL_EFaction Faction);
		void STATIC_AIUntagAllActorsForFaction(class UObject* WorldContextObject, const struct FGameplayTagContainer& TagsToRemove, TBL_EFaction Faction);
		void STATIC_AIUntagActor(class AActor* Actor, const struct FGameplayTagContainer& TagsToRemove, TBL_EFaction Faction);
		void STATIC_AITagManyActors(TArray<class AActor*> Actors, const struct FGameplayTagContainer& TagsToAdd, TBL_EFaction Faction, bool bUntagWhenActorDies);
		void STATIC_AITagActor(class AActor* Actor, const struct FGameplayTagContainer& TagsToAdd, TBL_EFaction Faction, bool bUntagWhenActorDies);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAISystem
	 * Size -> 0x03D8 (FullSize[0x0508] - InheritedSize[0x0130])
	 */
	class UTBLAISystem : public UAISystem
	{
	public:
		TMap<class ATBLAIController*, class AActor*>               CurrentTargets;                                          // 0x0130(0x0050) NativeAccessSpecifierPublic
		TMap<class AActor*, struct FControllerArray>               CurrentTargeters;                                        // 0x0180(0x0050) NativeAccessSpecifierPublic
		TMap<class ATBLAIController*, class UClass*>               ControllerWeaponMap;                                     // 0x01D0(0x0050) UObjectWrapper, NativeAccessSpecifierPublic
		TMap<class UClass*, struct FControllerArray>               WeaponMap;                                               // 0x0220(0x0050) NativeAccessSpecifierPublic
		TMap<class ATBLAIController*, class UClass*>               ControllerBehaviourMap;                                  // 0x0270(0x0050) UObjectWrapper, NativeAccessSpecifierPublic
		TMap<class UClass*, struct FControllerArray>               BehaviourMap;                                            // 0x02C0(0x0050) NativeAccessSpecifierPublic
		TMap<class ATBLAIController*, struct FVector>              ControllerLocationMap;                                   // 0x0310(0x0050) NativeAccessSpecifierPublic
		TMap<struct FVector, struct FControllerArray>              LocationMap;                                             // 0x0360(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QAJS[0x50];                                  // 0x03B0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      BotNames;                                                // 0x0400(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              BotsWithSpecialNames[0x50];                              // 0x0410(0x0050) UNKNOWN PROPERTY: SetProperty
		class UAITagSystem*                                        TagSystem;                                               // 0x0460(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YP2N[0xA0];                                  // 0x0468(0x00A0) MISSED OFFSET (PADDING)

	public:
		void OnPlayerPossessed(class AController* Controller, class ATBLCharacter* Character);
		void NotifyControllerTargetLocation(class ATBLAIController* Controller, const struct FVector& NewTargetLocation);
		void NotifyControllerTarget(class ATBLAIController* Controller, class AActor* NewTarget);
		struct FVector GetSpawnCenter(TBL_EFaction Faction);
		int GetNumControllersWithWeapon(class UClass* Weapon);
		int GetNumControllersWithBehaviour(class UClass* Behaviour);
		int GetNumControllersTargettingLocation(const struct FVector& TargetLocation);
		int GetNumControllersTargetting(class AActor* Target);
		int GetNumControllersRegistered(TBL_EFaction Faction);
		void GetControllersWithWeapon(class UClass* Weapon);
		void GetControllersWithBehaviour(class UClass* Behaviour);
		void GetControllersTargettingLocation(const struct FVector& TargetLocation);
		void GetControllersTargetting(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAnimal
	 * Size -> 0x00C0 (FullSize[0x0730] - InheritedSize[0x0670])
	 */
	class ATBLAnimal : public ATBLCharacterBase
	{
	public:
		unsigned char                                              UnknownData_PJQG[0x8];                                   // 0x0670(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStatsComponent*                                     Stats;                                                   // 0x0678(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPawnNoiseEmitterComponent*                          NoiseEmitter;                                            // 0x0680(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLAnimalAnimInstance*                              AnimInstance;                                            // 0x0688(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSet;                                            // 0x0690(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       AnimalHolder;                                            // 0x0698(0x0008) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBeingThrown;                                          // 0x06A0(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBeingHeld;                                            // 0x06A1(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPanicking;                                              // 0x06A2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZJ9N[0x1];                                   // 0x06A3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PanicDuration;                                           // 0x06A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bReplicatePanicking;                                     // 0x06A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TV6X[0x3];                                   // 0x06A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxWalkSpeed;                                            // 0x06AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxPanicWalkSpeed;                                       // 0x06B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxHealth;                                               // 0x06B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicationPredictionState                         PredictionState;                                         // 0x06B8(0x0070) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6PDN[0x8];                                   // 0x0728(0x0008) MISSED OFFSET (PADDING)

	public:
		void StopPanicking();
		void StartPanicking();
		void Ragdoll();
		void OnRep_bPanicking();
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnDamageTaken(const struct FDamageTakenEvent& DamageEvent);
		void K2_TornOff();
		void CarryableAnimalEvent(const class FName& EventName, class ATBLCharacter* ParentCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAnimInstance
	 * Size -> 0x0240 (FullSize[0x04B0] - InheritedSize[0x0270])
	 */
	class UTBLAnimInstance : public UAnimInstance
	{
	public:
		struct FRandomStream                                       RandStream;                                              // 0x026C(0x0008) ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic
		float                                                      LastUpdateAnimationTime;                                 // 0x0274(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastUpdateAnimationInterval;                             // 0x0278(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_744K[0x4];                                   // 0x027C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              SkeletalMesh;                                            // 0x0280(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x0288(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        LODLevel;                                                // 0x0290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FarFromCameraDistance;                                   // 0x0294(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsFarFromCamera;                                         // 0x0298(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PREO[0x17];                                  // 0x0299(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        HideLowLodBones;                                         // 0x02B0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGatherDebugNodeVisit;                                   // 0x02C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDumpAnimationInfoToFile;                                // 0x02C1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_02A1[0x6];                                   // 0x02C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DebugNodeVisitFilter;                                    // 0x02C8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22UM[0x10];                                  // 0x02D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FAnimDebugMontage>                MontageDebug;                                            // 0x02E8(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FAnimDebugStateMachine>           StateMachineDebug;                                       // 0x0338(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<int>                                                DebugAnimNodes;                                          // 0x0388(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        DefaultDebugCategories;                                  // 0x0398(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        StateMachineNames;                                       // 0x03A8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, class FName>                             CrowdControlVariant1;                                    // 0x03B8(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, class FName>                             CrowdControlVariant2;                                    // 0x0408(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, class FName>                             CrowdControlVariant3;                                    // 0x0458(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UIIL[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetLODLevel(int NewLodLevel);
		void SetIsFarFromCamera(bool bIsFar);
		void Montage_StopAll(float InBlendOutTime);
		float Montage_PlaySection(class UAnimMontage* MontageToPlay, const class FName& StartingSection, float InPlayRate, float StartSectionPercent, float InBlendTime, Engine_EMontagePlayReturnType ReturnValueType);
		TArray<class FString> GetDebugNodeVisit_Blend();
		TArray<class FString> GetDebugNodeVisit();
		TArray<struct FAnimDebugMontageInstance> GetDebugMontageInstances();
		void GatherDebugNodeVisit();
		void EventOnLODLevelChanged();
		void EventFarFromCameraChanged();
		void DumpAnimationInfoToFile();
		void AnimNotify_EndWeaponTracers();
		void AnimNotify_ActivateAbility();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAnimalAnimInstance
	 * Size -> 0x0050 (FullSize[0x0500] - InheritedSize[0x04B0])
	 */
	class UTBLAnimalAnimInstance : public UTBLAnimInstance
	{
	public:
		float                                                      TimeSinceLastHit;                                        // 0x04AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TimeStartedPanicking;                                    // 0x04B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KO0F[0x4];                                   // 0x04B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLAnimal*                                          Animal;                                                  // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveSpeedSq;                                             // 0x04C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsMoving;                                               // 0x04C4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsDead;                                                 // 0x04C5(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBeingHeld;                                            // 0x04C6(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBeingHeld_Combat;                                     // 0x04C7(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsBeingThrown;                                          // 0x04C8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6STL[0x7];                                   // 0x04C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PreviewAnimationSet;                                     // 0x04D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase;                                        // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStatsComponent*                                     Stats;                                                   // 0x04E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1L62[0x18];                                  // 0x04E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnAnimationSetChanged(class UClass* AnimationSet);
		void NotifyTookDamage();
		void NotifyStartedPanicking();
		void NotifyLanded();
		void NotifyKilled();
		void EventOnTookDamage();
		void EventOnStartedPanicking();
		void EventOnLanded();
		void EventOnKilled();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAssetManager
	 * Size -> 0x02D0 (FullSize[0x0708] - InheritedSize[0x0438])
	 */
	class UTBLAssetManager : public UAssetManager
	{
	public:
		unsigned char                                              UnknownData_U75W[0x2D0];                                 // 0x0438(0x02D0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillXWithDamage
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class UKillXWithDamage : public UBaseKillWorker
	{
	public:
		TMap<class FString, struct FKillWithDamageAchievementEntry> KillWithDamageAchievements;                              // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void PlayerCausedFallDamage(const struct FDeathDamageTakenEvent& DeathEvent);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KillXWorker
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class UKillXWorker : public UBaseKillWorker
	{
	public:
		TMap<class FString, struct FKillAchievementEntry>          KillAchivements;                                         // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Ladder
	 * Size -> 0x0160 (FullSize[0x0450] - InheritedSize[0x02F0])
	 */
	class ALadder : public ATBLActor
	{
	public:
		unsigned char                                              UnknownData_0XGO[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnLadderStateChanged;                                    // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FBlendParams                                        LadderMountBlend;                                        // 0x0308(0x0024) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FBlendParams                                        LadderDismountBlend;                                     // 0x032C(0x0024) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bStartEnabled;                                           // 0x0350(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4J90[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    bLadderEnabled;                                          // 0x0358(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        LadderMontage;                                           // 0x0370(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LadderHeight;                                            // 0x0378(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             AttachOffset;                                            // 0x037C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            AttachRotation;                                          // 0x0388(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      MoveDownAngle;                                           // 0x0394(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnLimit;                                               // 0x0398(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxMountAngle;                                           // 0x039C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxMountDist;                                            // 0x03A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MountPointBottom;                                        // 0x03A4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             MountPointTop;                                           // 0x03B0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DismountPointBottom;                                     // 0x03BC(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             DismountPointTop;                                        // 0x03C8(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LadderBottom;                                            // 0x03D4(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LadderTop;                                               // 0x03E0(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U9HX[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     SceneComponent;                                          // 0x03F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInteractableComponent*                              Interactable;                                            // 0x03F8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       JumpCollider;                                            // 0x0400(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class ATBLCharacter*>                               JumpOverlappingCharacters;                               // 0x0408(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class APawn*>                                       PawnList;                                                // 0x0418(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNavLinkCustomComponent*                             SmartLinkComp;                                           // 0x0428(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSmartLinkIsRelevant;                                    // 0x0430(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KYXV[0x7];                                   // 0x0431(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     SmartLinkTop;                                            // 0x0438(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     SmartLinkBottom;                                         // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		Engine_ENavLinkDirection                                   SmartLinkDirection;                                      // 0x0448(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UJ11[0x7];                                   // 0x0449(0x0007) MISSED OFFSET (PADDING)

	public:
		void UsePressed(class APawn* Pawn, class UInteractableComponent* InteractableComponent);
		void OnUseSyncFailed(class APawn* Pawn, class UInteractableComponent* InteractableComponent);
		void OnRep_LadderEnabled();
		void OnMovementChangedInJumpCollider(const class FName& MovementState);
		void MountLadder(class APawn* Pawn, bool bIsJumping);
		bool IsLadderEnabled();
		void EventMountLadder(class APawn* Pawn);
		void EndJumpOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
		void EnableLadder();
		void DisableLadder();
		bool CanMountLadder(class APawn* Pawn);
		void BeginJumpOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LineTracers
	 * Size -> 0x0090 (FullSize[0x00F0] - InheritedSize[0x0060])
	 */
	class ULineTracers : public UTracerShape
	{
	public:
		class FName                                                EndSocket;                                               // 0x0060(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsValid;                                                // 0x0068(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TYML[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTracerSocketInfo                                   EndSocketInfo;                                           // 0x0070(0x0060) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		int                                                        NumFrames;                                               // 0x00D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X0U9[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTransform>                                  WeaponTransforms;                                        // 0x00D8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q946[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LoadItem
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class ULoadItem : public UAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LoadItemInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class ULoadItemInterface : public UInterface
	{
	public:
		void OnLoadItem(class AInventoryItem* Item, class ATBLCharacter* Initiator);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LoadoutSelection
	 * Size -> 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
	 */
	class ULoadoutSelection : public UObject
	{
	public:
		TArray<class UClass*>                                      Primary;                                                 // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Secondary;                                               // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Shield;                                                  // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Knife;                                                   // 0x0058(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Item;                                                    // 0x0068(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Bandage;                                                 // 0x0078(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      Special;                                                 // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSpawnFists;                                             // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4R8O[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TBL_EInventoryItemSlot>                             DisabledSlots;                                           // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UClass*, int>                                   OverrideStackCount;                                      // 0x00B0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<TBL_EInventoryItemSlot>                             StartingSlots;                                           // 0x0100(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AQ5C[0x8];                                   // 0x0110(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      CachedItems;                                             // 0x0118(0x0010) ZeroConstructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UClass* GetRandomItemForSlot(TBL_EInventoryItemSlot Slot);
		TArray<class UClass*> GetItemSelectionBySlot(TBL_EInventoryItemSlot Slot, bool bOnPickup);
		class UClass* GetItemForSlot(TBL_EInventoryItemSlot Slot, int Index);
		TArray<TBL_EWeaponTag> GetAllItemWeaponTagsFromLoadout();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LoadoutVolume
	 * Size -> 0x0060 (FullSize[0x0390] - InheritedSize[0x0330])
	 */
	class ALoadoutVolume : public ACaptureVolume
	{
	public:
		bool                                                       bIsActive;                                               // 0x0330(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LQ7E[0x5F];                                  // 0x0331(0x005F) MISSED OFFSET (PADDING)

	public:
		void SetActive(bool Active);
		void OnIsActiveChanged();
		void LocalPCPossessedPawn(class APawn* NewPawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LockTurnAngle
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class ULockTurnAngle : public UObject
	{
	public:
		bool                                                       bEnabled;                                                // 0x0028(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y4A3[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        HorizLockId;                                             // 0x002C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        VertLockId;                                              // 0x0030(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DelayTimerHandle;                                        // 0x0034(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        EndTimerHandle;                                          // 0x0038(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTurnLockParams                                     TurnLock;                                                // 0x003C(0x0024) Transient, NoDestructor, NativeAccessSpecifierPublic

	public:
		void OnRootMotionChanged(bool bRootMotion);
		void OnEndTimer(float OverTime);
		void OnDelayTimer(float OverTime);
		void OnCombatStateEvent(class AActor* InActor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LTSGameMode
	 * Size -> 0x0018 (FullSize[0x11A8] - InheritedSize[0x1190])
	 */
	class ALTSGameMode : public AArenaGameMode
	{
	public:
		unsigned char                                              UnknownData_L7E9[0x18];                                  // 0x1190(0x0018) MISSED OFFSET (PADDING)

	public:
		void PlayRoundStartCommanderVO();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LTSGameModeSettings
	 * Size -> 0x0038 (FullSize[0x0120] - InheritedSize[0x00E8])
	 */
	class ULTSGameModeSettings : public UArenaGameModeSettings
	{
	public:
		int                                                        NumPlayerHudMarkersThreshold;                            // 0x00E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        RoundsFromVictoryMusicTrigger;                           // 0x00EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              LTSPlayerHudComponent[0x28];                             // 0x00F0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		float                                                      TriggerCommanderVOAfterRoundStartTime;                   // 0x0118(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TriggerCommanderVOMatchPointDuration;                    // 0x011C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LTSGameState
	 * Size -> 0x0030 (FullSize[0x0AA0] - InheritedSize[0x0A70])
	 */
	class ALTSGameState : public AArenaGameState
	{
	public:
		int                                                        HudMarkerThreshold;                                      // 0x0A70(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IMOR[0x4];                                   // 0x0A74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              LTSHudMarkerComponentClass;                              // 0x0A78(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X6HM[0x10];                                  // 0x0A80(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TBL_EFaction>                                       PendingHudMarkersForFaction;                             // 0x0A90(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_LTSHudMarkerComponentClass();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MatchStateListenerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMatchStateListenerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MatchStateListenerInterfaceHelpers
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UMatchStateListenerInterfaceHelpers : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MatchWinWorker
	 * Size -> 0x0050 (FullSize[0x0090] - InheritedSize[0x0040])
	 */
	class UMatchWinWorker : public UTBLAchievementWorker
	{
	public:
		TMap<class FString, struct FMatchWinEntry>                 MatchWinEntries;                                         // 0x0040(0x0050) Edit, Protected, NativeAccessSpecifierProtected

	public:
		void OnVictory(TBL_EFaction InVictor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MeleeTargetMethod
	 * Size -> 0x0000 (FullSize[0x01B0] - InheritedSize[0x01B0])
	 */
	class UMeleeTargetMethod : public UAbilityTargetMethod
	{
	public:
		void OnRagdollHitEventCosmetic(class AActor* HitTaker, class AActor* HitCauser, class AInventoryItem* Weapon, const struct FHitResult& HitResult);
		void OnCombatStateEventCosmetic(class AActor* Actor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MovementAction
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UMovementAction : public UTBLObject
	{
	public:
		TBL_EMovementFrameOfReference                              FrameOfReference;                                        // 0x0040(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_67P0[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                AnimationEvent;                                          // 0x0044(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentTime;                                             // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiActorHUDMarkerBase
	 * Size -> 0x0190 (FullSize[0x03E8] - InheritedSize[0x0258])
	 */
	class AMultiActorHUDMarkerBase : public AActor
	{
	public:
		unsigned char                                              UnknownData_T4E3[0x18];                                  // 0x0258(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UHudMarkerDisplayComponent*                          HUDMarkerComponent;                                      // 0x0270(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UObjectiveStatusDisplayComponent*                    ObjectiveStatusComponent;                                // 0x0278(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UActorInfoDisplayComponent*                          ActorInfoComponent;                                      // 0x0280(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DotProductScoreMultiplier;                               // 0x0288(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_41TQ[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AActor>>                       LastDisplayedActorList;                                  // 0x0290(0x0010) ZeroConstructor, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<uint64_t, TWeakObjectPtr<class AActor>>               ManagedActorMap;                                         // 0x02A0(0x0050) Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TMap<uint64_t, TWeakObjectPtr<class UWidgetVisibilityComponent>> ManagedComponentMap;                                     // 0x02F0(0x0050) ExportObject, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       bUseLegacyMode;                                          // 0x0340(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseMarkedRadius;                                        // 0x0341(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bStartEnabled;                                           // 0x0342(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsEnabled;                                              // 0x0343(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I1XO[0x4];                                   // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ReplicatedActorList;                                     // 0x0348(0x0010) Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I3QD[0x50];                                  // 0x0358(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        NumberOfMarkersToDisplay;                                // 0x03A8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        CurrentNumberOfMarkers;                                  // 0x03AC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EObjectiveZoneVisibilityMode                           ObjectiveZoneVisibilityMode;                             // 0x03B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z4JR[0x7];                                   // 0x03B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ObjectiveZoneActor;                                      // 0x03B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        NumberOfMarkersToDisplayOnZoneVisible;                   // 0x03C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExtraMarkerDisplayDuration;                              // 0x03C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UObjectiveZoneDisplayComponent>       OwningObjectiveZoneComponent;                            // 0x03C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPlayerIsInOwningZone;                                   // 0x03D0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J4ZD[0x7];                                   // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        ExtraMarkerDisplayHandle;                                // 0x03D8(0x0008) Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        InitialVisibilityHandle;                                 // 0x03E0(0x0008) Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetMarkedActors(TArray<class AActor*> InMarkedActors);
		void RemoveMarkedActor(class AActor* Actor);
		void OnRep_ReplicatedActorList();
		void OnRep_bIsEnabled();
		void OnPlayerEnteredZoneChanged(bool bLocalPlayerInsideZone);
		void OnPawnPossessed(class APawn* Pawn);
		void OnInitialVisibilityExpired();
		void OnExtraMarkerDisplayExpired();
		void OnAuthorityAddedActorDestroyed(class AActor* Actor);
		bool K2_ShouldIgnoreMarkedActor(class AActor* Actor);
		bool IsVisible();
		bool IsActive();
		TArray<class UWidgetVisibilityComponent*> GetWidgetVisibilityComponents();
		class UObjectiveStatusDisplayComponent* GetObjectiveStatusComponent();
		TArray<class UHudMarkerDisplayComponent*> GetMarkedActorHUDMarkerComponents();
		class UHudMarkerDisplayComponent* GetHUDMarkerComponent();
		class UActorInfoDisplayComponent* GetActorInfoComponent();
		void DeactivateMarker();
		void BindToObjectiveZone();
		void AuthorityRemoveMarkedActor(class AActor* Actor);
		void AuthorityAddMarkedActor(class AActor* Actor);
		void AddMarkedActor(class AActor* Actor);
		void ActivateMarker();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiActorHUDMarkerInteractable
	 * Size -> 0x0010 (FullSize[0x03F8] - InheritedSize[0x03E8])
	 */
	class AMultiActorHUDMarkerInteractable : public AMultiActorHUDMarkerBase
	{
	public:
		TArray<struct FMarkedActorEntryInteractable>               MarkedActors;                                            // 0x03E8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MovementDebugger
	 * Size -> 0x03A0 (FullSize[0x04A8] - InheritedSize[0x0108])
	 */
	class UMovementDebugger : public UActorComponent
	{
	public:
		TArray<struct FMovementDebugFrame>                         RecordedFrames;                                          // 0x0108(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FMovementDebugFrame>                         ServerFramesFromFile;                                    // 0x0118(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DebugPositionIndex;                                      // 0x0128(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PlayDirection;                                           // 0x012C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PlayDirectionDelay;                                      // 0x0130(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRecording;                                              // 0x0134(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IIBL[0x3];                                   // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       TargetCharacter;                                         // 0x0138(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMovementDebugFrame                                 ServerFrame;                                             // 0x0140(0x0318) NativeAccessSpecifierPublic
		int                                                        ServerSyncFrame;                                         // 0x0458(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZAR3[0x4];                                   // 0x045C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        BoneNames;                                               // 0x0460(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawServer;                                             // 0x0470(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawClient;                                             // 0x0471(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DYWP[0x6];                                   // 0x0472(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     InputComponent;                                          // 0x0478(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        FrameOffset;                                             // 0x0480(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WKXW[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              LastSavedFileName;                                       // 0x0488(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DisplayDebugScrollDir;                                   // 0x0498(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DisplayDebugScrollY;                                     // 0x049C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        OtherCharacterIndex;                                     // 0x04A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EDCP[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void ToggleRecord();
		void ToggleDrawServer();
		void ToggleDrawClient();
		void StopRecord();
		void StartRecord();
		void SetTargetCharacter(class ATBLCharacter* Character);
		void ServerSetTargetCharacter(class ATBLCharacter* DebugTarget);
		void ServerSetClientTimeStamp(float ClientTimeStamp, int Direction);
		void ServerSetClientIndex(int Index);
		void ServerSaveToFile(const class FString& Filename);
		void SaveToFile(const class FString& Filename);
		void RecordPose(struct FDebugDrawShapes* DebugDraw, class ACharacter* Pawn, const struct FColor& Color);
		void RecordOtherCharacter(struct FMovementDebugSimualated* OtherCharacter, class ATBLCharacterBase* OtherChar, class UNetConnection* Connection);
		void RecordCapsule(struct FMovementDebugFrame* DebugFrame, class ACharacter* Pawn, const struct FColor& Color);
		void RecordBoneChain(struct FDebugDrawShapes* DebugDraw, class ACharacter* Pawn, const class FName& BoneName, const struct FColor& Color);
		void PreviousCharacter();
		void PlayReleased();
		void OnRep_Recording();
		void OnPossessed(class APawn* NewPawn);
		void OnMovementSync(float ClientTimeStamp, float DeltaTime);
		void NextCharacter();
		void LoadFromFile(const class FString& Filename);
		void IncreaseFrameOffset();
		struct FMovementDebugFrame GetServerFrame();
		int GetClientIndex();
		struct FMovementDebugFrame GetClientFrame();
		void ForwardPressed();
		bool FindServerFrame(TArray<struct FMovementDebugFrame>* SearchFrames, struct FMovementDebugFrame* ReturnFrame, float ClientTimeStamp, int Direction);
		void DrawStatLine(const struct FVector& Start, const struct FVector& End, const struct FColor& Clr);
		void DrawPose(struct FDebugDrawShapes* DebugDraw, const struct FColor& Clr);
		void DrawFrame(struct FMovementDebugFrame* DebugFrame, const struct FColor& Clr);
		void DrawDebug(class UCanvas* Canvas);
		void DisplayDebugScrollUp();
		void DisplayDebugScrollReleased();
		void DisplayDebugScrollDown();
		void DecreaseFrameOffset();
		void CloseDebugger();
		void ClientSendFrame(const struct FMovementDebugFrame& DebugFrame, bool bSyncTimeStamp);
		void ClientLoadFromFile(const class FString& Filename);
		void BackwardPressed();
		void AutoSaveToFile(bool bSendToServer, const class FString& Directory);
		void Animate(float Scale);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MovementInstance
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UMovementInstance : public UAssemblyInstance
	{
	public:
		class FScriptMulticastDelegate                             OnStartMovement;                                         // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFinishMovement;                                        // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UMovementSequence*                                   Sequence;                                                // 0x0048(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              TargetActor;                                             // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FMovementActionInitiationParams                     InitParams;                                              // 0x0058(0x0028) NoDestructor, NativeAccessSpecifierPublic
		float                                                      InitTime;                                                // 0x0080(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ScalingFactor;                                           // 0x0084(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementAction*                                     CurrentMovement;                                         // 0x0088(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFinished;                                             // 0x0090(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QJJV[0x3];                                   // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FinishTime;                                              // 0x0094(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UTBLObject*>                                  InstancedObjects;                                        // 0x0098(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void Stop();
		void StartMovement(class UMovementSequence* MovementSeq);
		void OnWallHit(class AActor* Owner, class AActor* HitActor, float HitAngle);
		void OnCharacterHit(class AActor* Owner, class ATBLCharacter* HitCharacter);
		void OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		class ATBLCharacterBase* GetCharacterOwner();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MovementModifierComponent
	 * Size -> 0x00D0 (FullSize[0x01D8] - InheritedSize[0x0108])
	 */
	class UMovementModifierComponent : public UActorComponent
	{
	public:
		class UDataTable*                                          MovementModifierDataTable;                               // 0x0108(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UPhysicalMaterial*, class FName>                PhysMaterialModifiers;                                   // 0x0110(0x0050) Edit, NativeAccessSpecifierPublic
		TMap<class FName, struct FMovementModifier>                MovementModifiers;                                       // 0x0160(0x0050) Transient, NativeAccessSpecifierPublic
		float                                                      SlopeAngle;                                              // 0x01B0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TotalModifier;                                           // 0x01B4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableSprint;                                          // 0x01B8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KON6[0x3];                                   // 0x01B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CurrentSlopeState;                                       // 0x01BC(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2M0O[0x4];                                   // 0x01C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPhysicalMaterial*                                   PreviousPhysMaterial;                                    // 0x01C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      UphillMinAngle;                                          // 0x01D0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DownhillMinAngle;                                        // 0x01D4(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void RemoveModifier(const class FName& Modifier);
		bool HasModifier(const class FName& Modifier);
		void AddModifier(const class FName& Modifier);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MovementSequence
	 * Size -> 0x0010 (FullSize[0x00B8] - InheritedSize[0x00A8])
	 */
	class UMovementSequence : public UAssemblyBlueprint
	{
	public:
		class UMovementAction*                                     movement;                                                // 0x00A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        Priority;                                                // 0x00B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bStopOnCharacterHit;                                     // 0x00B4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NML9[0x3];                                   // 0x00B5(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiActorHUDMarker
	 * Size -> 0x0010 (FullSize[0x03F8] - InheritedSize[0x03E8])
	 */
	class AMultiActorHUDMarker : public AMultiActorHUDMarkerBase
	{
	public:
		TArray<struct FMarkedActorEntry>                           MarkedActors;                                            // 0x03E8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiActorHUDMarkerBurnable
	 * Size -> 0x0010 (FullSize[0x03F8] - InheritedSize[0x03E8])
	 */
	class AMultiActorHUDMarkerBurnable : public AMultiActorHUDMarkerBase
	{
	public:
		TArray<struct FMarkedActorEntryBurnable>                   MarkedActors;                                            // 0x03E8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiActorHUDMarkerStatsComponent
	 * Size -> 0x0010 (FullSize[0x03F8] - InheritedSize[0x03E8])
	 */
	class AMultiActorHUDMarkerStatsComponent : public AMultiActorHUDMarkerBase
	{
	public:
		TArray<struct FMarkedActorEntryStatsComponent>             MarkedActors;                                            // 0x03E8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiActorHUDMarkerAmmoRefill
	 * Size -> 0x0040 (FullSize[0x0428] - InheritedSize[0x03E8])
	 */
	class AMultiActorHUDMarkerAmmoRefill : public AMultiActorHUDMarkerBase
	{
	public:
		TArray<struct FMarkedActorEntryAmmoRefill>                 MarkedActors;                                            // 0x03E8(0x0010) ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EFaction                                               CachedFaction;                                           // 0x03F8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HM99[0x7];                                   // 0x03F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AInventoryItem*>                              CachedAmmoInventory;                                     // 0x0400(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInventory*                                          CachedInventory;                                         // 0x0410(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxMarkerDistance;                                       // 0x0418(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SimultaneousMarkerOverride;                              // 0x041C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MaxMarkerDistanceSquared;                                // 0x0420(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9XH6[0x4];                                   // 0x0424(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.MultiTargetMethod
	 * Size -> 0x0010 (FullSize[0x0210] - InheritedSize[0x0200])
	 */
	class UMultiTargetMethod : public UCompositeTargetMethod
	{
	public:
		TArray<class UAbilityTargetMethod*>                        TargetMethods;                                           // 0x0200(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NameGenerator
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UNameGenerator : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NativeAnimationSet_Base
	 * Size -> 0x0220 (FullSize[0x0378] - InheritedSize[0x0158])
	 */
	class UNativeAnimationSet_Base : public UAnimationSet
	{
	public:
		class UBlendSpace*                                         Crouch;                                                  // 0x0158(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         StrafeWounded;                                           // 0x0160(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Strafe_F;                                                // 0x0168(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Strafe_B;                                                // 0x0170(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         hop;                                                     // 0x0178(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         AimOffset;                                               // 0x0180(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Strafe_1P;                                               // 0x0188(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Combat_AimOffset_Lft;                                    // 0x0190(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Combat_AimOffset_Rgt;                                    // 0x0198(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Turn;                                                    // 0x01A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Hop_3P;                                                  // 0x01A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Dash_3P;                                                 // 0x01B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         AimOffset_Combat;                                        // 0x01B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         strafeStart_F;                                           // 0x01C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         strafeStart_B;                                           // 0x01C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         MountAimOffset_Combat;                                   // 0x01D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         strafeStop_F;                                            // 0x01D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         strafeStop_B;                                            // 0x01E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Downed_Loop;                                             // 0x01E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Downed_Loop_InSpot;                                      // 0x01F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         interrupt_step;                                          // 0x01F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         jog_F;                                                   // 0x0200(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         jog_B;                                                   // 0x0208(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         parry_pose;                                              // 0x0210(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         StrafeCombat_F;                                          // 0x0218(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         StrafeCombat_B;                                          // 0x0220(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         parry_weak_pose;                                         // 0x0228(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         Duck;                                                    // 0x0230(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace1D*                                       Strafe_1D;                                               // 0x0238(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlendSpace*                                         sprintTap;                                               // 0x0240(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAlert;                                               // 0x0248(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintCharge;                                            // 0x0250(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdlePose;                                                // 0x0258(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       WorldHit_Normal;                                         // 0x0260(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       WorldHit_Alt;                                            // 0x0268(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAdditive;                                            // 0x0270(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAdditive_2;                                          // 0x0278(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAdditive_3;                                          // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAdditive_4;                                          // 0x0288(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintStart;                                             // 0x0290(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintLoop;                                              // 0x0298(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintFast;                                              // 0x02A0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintStop;                                              // 0x02A8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAlert_Crouch;                                        // 0x02B0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       parry_loop;                                              // 0x02B8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       downed_sprint;                                           // 0x02C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       mount_basePose;                                          // 0x02C8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       mount_idleAdditive;                                      // 0x02D0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       mount_gallop;                                            // 0x02D8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdlePose_Wounded;                                        // 0x02E0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintStart_Wounded;                                     // 0x02E8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintLoop_Wounded;                                      // 0x02F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintFast_Wounded;                                      // 0x02F8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintStop_Wounded;                                      // 0x0300(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleWounded;                                             // 0x0308(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       parry_loop_weak;                                         // 0x0310(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       mount_gallopStart;                                       // 0x0318(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       parry_sprint;                                            // 0x0320(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleBase;                                                // 0x0328(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       CrouchAlertPose;                                         // 0x0330(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAlertPose;                                           // 0x0338(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAlert_3;                                             // 0x0340(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleWounded_basePose;                                    // 0x0348(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       IdleAlert_4;                                             // 0x0350(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       parry_loop_strafe;                                       // 0x0358(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintFast_v2;                                           // 0x0360(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintFast_v3;                                           // 0x0368(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimSequence*                                       SprintFast_v4;                                           // 0x0370(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NativeCombatState_Release
	 * Size -> 0x0080 (FullSize[0x01E8] - InheritedSize[0x0168])
	 */
	class UNativeCombatState_Release : public UBaseCombatState
	{
	public:
		TMap<class FName, float>                                   DelayCounterTime;                                        // 0x0168(0x0050) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		float                                                      DelayCounterTimeOnHit;                                   // 0x01B8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DelayCounterTimeOnBlocked;                               // 0x01BC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAttackType*                                         DashJumpAttackType;                                      // 0x01C0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ClearAttackQueueTime;                                    // 0x01C8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                PreviousCombatState;                                     // 0x01CC(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousStateTime;                                       // 0x01D4(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HasHitTime;                                              // 0x01D8(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousHasHitTime;                                      // 0x01DC(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              HasHit : 1;                                              // 0x01E0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              HitWasBlocked : 1;                                       // 0x01E0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PreviousHasHit : 1;                                      // 0x01E0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PreviousHitWasBlocked : 1;                               // 0x01E0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AllowCounters : 1;                                       // 0x01E0(0x0001) BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9UWE[0x7];                                   // 0x01E1(0x0007) MISSED OFFSET (PADDING)

	public:
		void ShouldDelayCounter(bool* Delay, float* DelayTime);
		void OnAllowCounters(float OverTime);
		void HandleQueuedParryCounter();
		bool AllowSprinting();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NativePartyWidget
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class UNativePartyWidget : public UTBLUserWidget
	{
	public:
		unsigned char                                              UnknownData_MAJR[0x8];                                   // 0x0320(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTextBlock*                                          PartyText;                                               // 0x0328(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NavArea_Constricted
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UNavArea_Constricted : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NavArea_ForceDefault
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UNavArea_ForceDefault : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NavArea_Jump
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UNavArea_Jump : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NavBlockingVolume
	 * Size -> 0x0008 (FullSize[0x0298] - InheritedSize[0x0290])
	 */
	class ANavBlockingVolume : public AVolume
	{
	public:
		class UTBLNavModifierComponent*                            NavModifier;                                             // 0x0290(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NetValidation
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UNetValidation : public UObject
	{
	public:
		struct FVector                                             ServerStartFire_Offset1P_Min;                            // 0x0028(0x000C) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             ServerStartFire_Offset1P_Max;                            // 0x0034(0x000C) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        DisableValidationCheck;                                  // 0x0040(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NewSpawnSystemQueuer
	 * Size -> 0x0070 (FullSize[0x00F0] - InheritedSize[0x0080])
	 */
	class UNewSpawnSystemQueuer : public USpawnQueuer
	{
	public:
		class ASpawnWave*                                          PlayFromHereWave;                                        // 0x0080(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PlayedFromHere[0x50];                                    // 0x0088(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_CM81[0x8];                                   // 0x00D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AAIController*>                               BotsWaitingToSpawn;                                      // 0x00E0(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NPCReplicatedDataComponent
	 * Size -> 0x0018 (FullSize[0x0120] - InheritedSize[0x0108])
	 */
	class UNPCReplicatedDataComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WL7E[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsScared;                                               // 0x0118(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M4F4[0x7];                                   // 0x0119(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetIsScared(bool InIsScared);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.NPCSpawnManagerBase
	 * Size -> 0x0010 (FullSize[0x0300] - InheritedSize[0x02F0])
	 */
	class ANPCSpawnManagerBase : public ATBLActor
	{
	public:
		class FScriptMulticastDelegate                             OnBehaviorTreeStarted;                                   // 0x02F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AsyncActionNPCSpawnManagerBase
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UAsyncActionNPCSpawnManagerBase : public UBlueprintAsyncActionBase
	{
	public:
		TWeakObjectPtr<class ANPCSpawnManagerBase>                 OwningNPCSpawnManager;                                   // 0x0030(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnNPCSpawnManagerDestroyed(class AActor* DestroyedActor);
		void BindToNPCSpawnManager(class ANPCSpawnManagerBase* NPCSpawnManager);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.AsyncActionNPCSpawnManagerBehaviourTree
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UAsyncActionNPCSpawnManagerBehaviourTree : public UAsyncActionNPCSpawnManagerBase
	{
	public:
		class FScriptMulticastDelegate                             OnBehaviorTreeStarted;                                   // 0x0038(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void NotifyBehaviorTreeStarted(class ATBLAIController* Controller);
		class UAsyncActionNPCSpawnManagerBehaviourTree* STATIC_AsyncWaitForBehaviourTree(class UObject* WorldContextObject, class ANPCSpawnManagerBase* NPCSpawnManager);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ObjectsByClassList
	 * Size -> 0x0048 (FullSize[0x0150] - InheritedSize[0x0108])
	 */
	class UObjectsByClassList : public UWidget
	{
	public:
		float                                                      ItemHeight;                                              // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G1BH[0x14];                                  // 0x010C(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		Slate_ESelectionMode                                       SelectionMode;                                           // 0x0120(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q4JC[0x7];                                   // 0x0121(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              ClassToList;                                             // 0x0128(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateRowEvent;                                      // 0x0130(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CZLK[0x10];                                  // 0x0140(0x0010) MISSED OFFSET (PADDING)

	public:
		void RefreshList();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OnlineConfig
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UOnlineConfig : public UObject
	{
	public:
		TArray<TBL_EInventoryType>                                 WeaponAchievements;                                      // 0x0028(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FLevelSet>                                   LevelWinAchievements;                                    // 0x0038(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EGameModeType>                                  GameModeWinAchievements;                                 // 0x0048(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          TitleProgressionTable;                                   // 0x0058(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		struct FTitleProgressionRow GetTitleProgression(int Level);
		void EventGetAchievementCategory(const struct FAchievementProgress& InAchievement, class FText* Category, class FText* Subcategory, int* DisplayPriority);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OnOffActivationMethod
	 * Size -> 0x0050 (FullSize[0x00E0] - InheritedSize[0x0090])
	 */
	class UOnOffActivationMethod : public UAbilityActivationMethod
	{
	public:
		TArray<class UAction*>                                     InitiatorActionsPerSecond;                               // 0x0090(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     InitiatorActionsOn;                                      // 0x00A0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAction*>                                     InitiatorActionsOff;                                     // 0x00B0(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QGP3[0x10];                                  // 0x00C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bKeyPressed;                                             // 0x00D0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TZRX[0xF];                                   // 0x00D1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DropDownListItem
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UDropDownListItem : public UObject
	{
	public:
		class FText                                                Text;                                                    // 0x0028(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		int                                                        Index;                                                   // 0x0040(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DDPU[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsDropDownList
	 * Size -> 0x0038 (FullSize[0x0140] - InheritedSize[0x0108])
	 */
	class UOptionsDropDownList : public UWidget
	{
	public:
		float                                                      ItemHeight;                                              // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IN9J[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDropDownListItem*>                           Items;                                                   // 0x0110(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateRowEvent;                                      // 0x0120(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_64R0[0x10];                                  // 0x0130(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetItemSelection(class UDropDownListItem** InItem, bool bSelected, SlateCore_ESelectInfo Type);
		void RemoveAllItems();
		class UWidget* GetSelectedWidget();
		int AddItem(const class FText& Text, int Index);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsList
	 * Size -> 0x00A0 (FullSize[0x01A8] - InheritedSize[0x0108])
	 */
	class UOptionsList : public UWidget
	{
	public:
		float                                                      ItemHeight;                                              // 0x0108(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DG39[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOptionsScreenCategory*                              Category;                                                // 0x0110(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UObject*>                                     Items;                                                   // 0x0118(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                TableRowStyleName;                                       // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateSubcategoryHeaderEvent;                        // 0x0130(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateCheckboxEvent;                                 // 0x0140(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateSliderEvent;                                   // 0x0150(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateComboBoxEvent;                                 // 0x0160(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateKeybindEvent;                                  // 0x0170(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemSelected;                                          // 0x0180(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTBLScrollBarStyleDataAsset*                         ScrollBarStyle;                                          // 0x0190(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_43DR[0x10];                                  // 0x0198(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetCategory(class UOptionsScreenCategory* InCategory);
		void SelectWidget(class UObject* Item);
		bool IsFirstEntryInSubcategory(class UObject* Object);
		bool IsFirstEntry(class UObject* Object);
		class UWidget* GetSelectedWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsListEntry
	 * Size -> 0x0000 (FullSize[0x0248] - InheritedSize[0x0248])
	 */
	class UOptionsListEntry : public UUserWidget
	{
	public:
		void BP_OnSelected(SlateCore_ESelectInfo SelectInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OrCondition
	 * Size -> 0x0010 (FullSize[0x0158] - InheritedSize[0x0148])
	 */
	class UOrCondition : public UCondition
	{
	public:
		TArray<class UCondition*>                                  Conditions;                                              // 0x0148(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OutOfCombatZoneAuthority
	 * Size -> 0x02D8 (FullSize[0x0530] - InheritedSize[0x0258])
	 */
	class AOutOfCombatZoneAuthority : public AActor
	{
	public:
		unsigned char                                              UnknownData_MOCX[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AOutOfCombatZoneVolume*>                      ActiveVolumes;                                           // 0x0260(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class ATBLCharacter*, struct FVolumeSet>              Overlaps;                                                // 0x0270(0x0050) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       bInverted;                                               // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9ZHC[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimerDelaySeconds;                                       // 0x02C4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorseTimerDelaySeconds;                                  // 0x02C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      RecentSpawnForgivenessSeconds;                           // 0x02CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HorseRecentSpawnForgivenessSeconds;                      // 0x02D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3TH7[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              CharactersThatSpawnedInMe[0x50];                         // 0x02D4(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              CharactersThatLeftMe[0x50];                              // 0x0328(0x0050) UNKNOWN PROPERTY: SetProperty
		bool                                                       bIsLocalPlayerOverlapping;                               // 0x0378(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CSU9[0x7];                                   // 0x0379(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class ACharacter*, struct FTimerHandle>               ActionTimerHandles;                                      // 0x0380(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class ACharacter*, struct FTimerHandle>               ForgivenessTimerHandles;                                 // 0x03D0(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              ConsideredCharacters[0x50];                              // 0x0420(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              IgnoredCharacters[0x50];                                 // 0x0470(0x0050) UNKNOWN PROPERTY: SetProperty
		bool                                                       bDisabled;                                               // 0x04C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_84EV[0x7];                                   // 0x04C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnActionTriggeredEvent;                                  // 0x04C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBeginOverlapEvent;                                     // 0x04D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnEndOverlapEvent;                                       // 0x04E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerBeginOverlapEvent;                          // 0x04F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLocalPlayerEndOverlapEvent;                            // 0x0508(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnActiveVolumesChanged;                                  // 0x0518(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2LRA[0x8];                                   // 0x0528(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartForgivenessTimer(class ATBLCharacter* Character, struct FTimerHandle* TimerHandle);
		bool ShouldIgnoreCharacter(class ATBLCharacter* Character);
		void OnLocalPlayerEndOverlap(class ATBLCharacter* Character);
		void OnLocalPlayerBeginOverlap(class ATBLCharacter* Character);
		void OnForgivenessTimerElapsed(class ATBLCharacter* Character);
		void OnEndOverlap(class ATBLCharacter* Character);
		void OnBeginOverlap(class ATBLCharacter* Character);
		void OnActionTriggered(class ATBLCharacter* Character);
		bool K2_ShouldIgnoreCharacter(class ATBLCharacter* Character);
		bool IsInForgivenessTime(class ACharacter* Character);
		void HandleOnPlayerKilled(const struct FDeathEvent& DeathEvent);
		void HandleOnArenaRoundWon(TBL_EFaction Winner);
		void HandleLocalControllerPossessedPawn(class APawn* Pawn);
		void HandleLocalControllerPlayerStateReplicated(class APlayerState* PS);
		void HandleEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void HandleCharacterSpawned(class ATBLCharacter* Character);
		void HandleCharacterDestroyed(class AActor* DestroyedActor);
		void HandleBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void HandleActionTimerFired(class ATBLCharacter* Character);
		float GetTimerDelaySeconds(class ATBLCharacter* Character, bool* OutIsInForgivenessTime);
		float GetForgivenessTime(class ATBLCharacter* Character);
		float STATIC_GetCurrentLowestTimeLeft(TArray<class AOutOfCombatZoneAuthority*> Authorities, class ATBLCharacter* Character);
		bool CanHaveForgivenessTime(class ATBLCharacter* Character);
		void CancelForgivenessTimer(class ATBLCharacter* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OutOfCombatZoneVolume
	 * Size -> 0x0060 (FullSize[0x02B8] - InheritedSize[0x0258])
	 */
	class AOutOfCombatZoneVolume : public AActor
	{
	public:
		class UClass*                                              AuthorityClass;                                          // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EFaction                                               Faction;                                                 // 0x0260(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BUW2[0x7];                                   // 0x0261(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     DefaultSceneComponent;                                   // 0x0268(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                PreviewMeshComponent;                                    // 0x0270(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCombatZoneVolumeSizeParam>                  ZoneSizeThresholdArray;                                  // 0x0278(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldShrinkZoneAccordingToThresholds;                  // 0x0288(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PEBK[0xB];                                   // 0x0289(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              bIsActive : 1;                                           // 0x0294(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_71H1[0x23];                                  // 0x0295(0x0023) MISSED OFFSET (PADDING)

	public:
		void ResizeCombatZoneBasedOnNextThreshold();
		void ResetCombatZoneThreshold();
		void OnStateChanged(TBL_EOutOfCombatZoneVolumeActivateDeactivateAction StateChanged);
		void OnRep_IsActive();
		bool IsInCombatZone(const struct FVector& Point);
		bool IsActive();
		void InitCombatZoneThresholds();
		struct FCombatZoneVolumeSizeParam GetNextZoneThreshold();
		void ClientSetVisualizationFade(class ATBLPlayerController* LocalController, bool bShouldFade);
		bool CanResizeToNextThreshold(float NewPlayerRatio, float NewTimeRatio);
		void ActivateDeactivate(TBL_EOutOfCombatZoneVolumeActivateDeactivateAction Action);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OutOfCombatZoneVolume_Box
	 * Size -> 0x0010 (FullSize[0x02C8] - InheritedSize[0x02B8])
	 */
	class AOutOfCombatZoneVolume_Box : public AOutOfCombatZoneVolume
	{
	public:
		struct FVector                                             BoxParams;                                               // 0x02B8(0x000C) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YIYN[0x4];                                   // 0x02C4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_BoxParams();
		void OnBoxParamsUpdated();
		void GetOverlappingCharacters(TArray<class ATBLCharacter*>* OutChars);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OutOfCombatZoneVolume_Ellipse
	 * Size -> 0x0010 (FullSize[0x02C8] - InheritedSize[0x02B8])
	 */
	class AOutOfCombatZoneVolume_Ellipse : public AOutOfCombatZoneVolume
	{
	public:
		struct FVector2D                                           EllipseParams;                                           // 0x02B8(0x0008) Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7ZC5[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void RecheckCollisions();
		void OnRep_EllipseParams();
		void OnEllipseParamsUpdated();
		void GetOverlappingCharacters(TArray<class ATBLCharacter*>* OutChars);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ParryComponent
	 * Size -> 0x0050 (FullSize[0x04F0] - InheritedSize[0x04A0])
	 */
	class UParryComponent : public UBoxComponent
	{
	public:
		float                                                      PitchTranslation;                                        // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PitchRotation;                                           // 0x04A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CrouchOffset;                                            // 0x04A8(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrouchInterpSpeed;                                       // 0x04B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             DefaultTranslation;                                      // 0x04B8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CurrentCrouchOffset;                                     // 0x04C4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     ParentComponent;                                         // 0x04D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JMCH[0x18];                                  // 0x04D8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ParryTracers
	 * Size -> 0x0008 (FullSize[0x00A8] - InheritedSize[0x00A0])
	 */
	class UParryTracers : public UTracerType
	{
	public:
		bool                                                       bHitTeammates;                                           // 0x00A0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z0VM[0x3];                                   // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              DebugColor;                                              // 0x00A4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PartyList
	 * Size -> 0x00A0 (FullSize[0x03C0] - InheritedSize[0x0320])
	 */
	class UPartyList : public UTBLUserWidget
	{
	public:
		class UOverlay*                                            InviteButtonOverlay;                                     // 0x0320(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        PartyWidgetContainer;                                    // 0x0328(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UVerticalBox*                                        PartyList;                                               // 0x0330(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_09CF[0x10];                                  // 0x0338(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              PartyListEntryClass;                                     // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UPartyListEntry*                                     SelfPartyEntry;                                          // 0x0350(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPartyListEntry*>                             EntryWidgets;                                            // 0x0358(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, class UPartyListEntry*>                IdToEntryMap;                                            // 0x0368(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              MaxPartySize;                                            // 0x03B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JYRS[0x7];                                   // 0x03B9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnVOIPTick();
		void OnPostLoadMap(class UWorld* LoadedWorld);
		void OnPartyMemberRemove(const class FString& UserId, const class FString& DisplayName);
		void OnPartyMemberLeave(const class FString& UserId, const class FString& DisplayName);
		void OnPartyMemberKick(const class FString& UserId);
		void OnPartyMemberJoin(const class FString& UserId, const class FString& DisplayName);
		void OnPartyLeave(bool bResult);
		void OnPartyLeaderChange(const class FString& UserId, const class FString& DisplayName);
		void OnPartyInviteSendResult(bool bResult);
		void OnPartyInviteAccept(const class FString& PartyId);
		void OnPartyDisband();
		bool IsPlayingMenu();
		void InitPartyWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PartyListEntry
	 * Size -> 0x0040 (FullSize[0x0360] - InheritedSize[0x0320])
	 */
	class UPartyListEntry : public UTBLUserWidget
	{
	public:
		class UWidgetSwitcher*                                     IconSwitcher;                                            // 0x0320(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              LeaderIcon;                                              // 0x0328(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              TalkingIcon;                                             // 0x0330(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              MemberIcon;                                              // 0x0338(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTBLTextBlock*                                       PlayerName;                                              // 0x0340(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5MML[0x18];                                  // 0x0348(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PendingLevelPlayerController
	 * Size -> 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
	 */
	class APendingLevelPlayerController : public APlayerController
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PerksComponent
	 * Size -> 0x00A8 (FullSize[0x01B0] - InheritedSize[0x0108])
	 */
	class UPerksComponent : public UActorComponent
	{
	public:
		class UDataTable*                                          PerksDataTable;                                          // 0x0108(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      HealSpeed;                                               // 0x0110(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HT1Y[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         HealCurve;                                               // 0x0118(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BackstabAngle;                                           // 0x0120(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VHEH[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EPerkType, class FName>                           EnumToName;                                              // 0x0128(0x0050) Protected, NativeAccessSpecifierProtected
		class ATBLCharacter*                                       OwnerCharacter;                                          // 0x0178(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CurrentSubclass;                                         // 0x0180(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CurrentClass;                                            // 0x0188(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EagerBonusDamage;                                        // 0x0190(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SneakyBonusDamage;                                       // 0x0194(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SapperBonusDamage;                                       // 0x0198(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SniperBonusDamage;                                       // 0x019C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      OneHandWeaponSpeedBonus;                                 // 0x01A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HelperHealthBonus;                                       // 0x01A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasSprintShove : 1;                                     // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasSprintAttack : 1;                                    // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasSprintCharge : 1;                                    // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasEagerBonus : 1;                                      // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasSneakyBonus : 1;                                     // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasSapperBonus : 1;                                     // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bHasSniperBonus : 1;                                     // 0x01A8(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QN00[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnStartHeal(class AActor* HealedActor);
		void OnPawnRevived(class APawn* RevivedPlayer, class APawn* RevivorPlayer);
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		void ApplyHelperBonus();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PlayerClassData
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UPlayerClassData : public UDataAsset
	{
	public:
		TArray<struct FCharacterTypeToCharacterAsset>              CharacterTypeToCharacterAssetMap;                        // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		int STATIC_GetCustomizationClassIndexFromClassEnum(TBL_EAudioClassType ClassType);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PlayerInHudMarkerZoneInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlayerInHudMarkerZoneInterface : public UInterface
	{
	public:
		bool IsLocalPlayerInHudMarkerZone();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PlayerScoreList
	 * Size -> 0x01D8 (FullSize[0x02E0] - InheritedSize[0x0108])
	 */
	class UPlayerScoreList : public UWidget
	{
	public:
		unsigned char                                              UnknownData_RPSI[0x8];                                   // 0x0108(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Lifetime;                                                // 0x0110(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LevelUpLifeTime;                                         // 0x0114(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FGameplayTag                                        DefaultTag;                                              // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateRowEvent;                                      // 0x0120(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		class FScriptDelegate                                      OnGenerateLevelUpRowEvent;                               // 0x0130(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KMNF[0xF0];                                  // 0x0140(0x00F0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class ATBLPlayerState*, class UWidget*>               PlayerKilledWidgetMap;                                   // 0x0230(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UWidget*                                             ObjectiveScoreWidget;                                    // 0x0280(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UWidget*                                             HealingScoreWidget;                                      // 0x0288(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ED97[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       LoadedPlayerController;                                  // 0x02A0(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSuccessfulPlayerStateReplicated;                        // 0x02A1(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7VD3[0x6];                                   // 0x02A2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        CheckForPlayerStateReplication;                          // 0x02A8(0x0008) Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BKXQ[0x30];                                  // 0x02B0(0x0030) MISSED OFFSET (PADDING)

	public:
		void PlayerStateReplicated(class APlayerState* PlayerState);
		void OnPlayerScoreEvent(const struct FScoreEventStruct& ScoreEvent);
		void OnPlayerLevelUpEvents(TArray<struct FLevelUpResult> LevelUpEvents);
		void OnInitialized(class ATBLPlayerController* PlayerOwner);
		void CheckForPlayerState();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PlayerScoreUiInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UPlayerScoreUiInterface : public UInterface
	{
	public:
		void OnRemoved();
		void AddSubScoreEvent(const struct FScoreEventStruct& ScoreEvent);
		void AddScore(int Score);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PlayerTask
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UPlayerTask : public UGameplayTask
	{
	public:
		class ATBLPlayerController*                                PlayerController;                                        // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.PodiumLocationComponent
	 * Size -> 0x0010 (FullSize[0x04A0] - InheritedSize[0x0490])
	 */
	class UPodiumLocationComponent : public UCapsuleComponent
	{
	public:
		int                                                        Place;                                                   // 0x0490(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsWinner;                                               // 0x0494(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K1EL[0xB];                                   // 0x0495(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLAutoNavLink
	 * Size -> 0x0010 (FullSize[0x02B8] - InheritedSize[0x02A8])
	 */
	class ATBLAutoNavLink : public ANavLinkProxy
	{
	public:
		TArray<struct FVector>                                     FoundLinkPoints;                                         // 0x02A8(0x0010) ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLBallistaAnimInstance
	 * Size -> 0x0040 (FullSize[0x04F0] - InheritedSize[0x04B0])
	 */
	class UTBLBallistaAnimInstance : public UTBLAnimInstance
	{
	public:
		class ABallista*                                           BallistaActor;                                           // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       MountedCharacter;                                        // 0x04B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BallistaPitch;                                           // 0x04B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BallistaYaw;                                             // 0x04BC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLoaded;                                                // 0x04C0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsActive;                                                // 0x04C1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GUHI[0x6];                                   // 0x04C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLCharacterAnimInstance_Playable*                  CharacterAnimBP;                                         // 0x04C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatState;                                             // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Is3p;                                                    // 0x04D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BNNH[0x17];                                  // 0x04D9(0x0017) MISSED OFFSET (PADDING)

	public:
		void OnRepaired();
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* NewCombatState);
		void OnBallistaRepaired();
		void OnBallistaMounted(class ATBLCharacter* Character);
		void OnBallistaDismounted(class ATBLCharacter* Character, TBL_EDismountType DismountType);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLBatteringRamAnimInstance
	 * Size -> 0x0040 (FullSize[0x04F0] - InheritedSize[0x04B0])
	 */
	class UTBLBatteringRamAnimInstance : public UTBLAnimInstance
	{
	public:
		class ABatteringRam*                                       BatteringRamActor;                                       // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       LeftCharacter;                                           // 0x04B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       RightCharacter;                                          // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              LeftCharacterMesh;                                       // 0x04C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              RightCharacterMesh;                                      // 0x04C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatState;                                             // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargePercent;                                           // 0x04D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_75V0[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLCharacterAnimInstance_Playable*                  LeftCharacterAnimBP;                                     // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLCharacterAnimInstance_Playable*                  RightCharacterAnimBP;                                    // 0x04E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void EventOnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void AnimNotify_ramRecovery_End();
		void AnimNotify_ramFire_Action();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLBlueprintCompilerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLBlueprintCompilerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCameraShake
	 * Size -> 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
	 */
	class UTBLCameraShake : public UCameraShake
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCatapultAnimInstance
	 * Size -> 0x0050 (FullSize[0x0500] - InheritedSize[0x04B0])
	 */
	class UTBLCatapultAnimInstance : public UTBLAnimInstance
	{
	public:
		class FScriptMulticastDelegate                             OnAnimNotifyCatapultFire;                                // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimNotifyCatapultFireEnd;                             // 0x04B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class ACatapult*                                           CatapultActor;                                           // 0x04C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       MountedCharacter;                                        // 0x04D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsActive;                                                // 0x04D8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TIRQ[0x7];                                   // 0x04D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLCharacterAnimInstance_Playable*                  CharacterAnimBP;                                         // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatState;                                             // 0x04E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Is3p;                                                    // 0x04F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I2JZ[0x3];                                   // 0x04F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ChargePercent;                                           // 0x04F4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bInteractable;                                           // 0x04F8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPacked;                                               // 0x04F9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantsToFire;                                            // 0x04FA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DMKP[0x5];                                   // 0x04FB(0x0005) MISSED OFFSET (PADDING)

	public:
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* NewCombatState);
		void OnCatapultStateChanged(unsigned char State, unsigned char PreviousState);
		void OnCatapultMounted(class ATBLCharacter* Character);
		void OnCatapultFireNoDriver();
		void OnCatapultDismounted(class ATBLCharacter* Character, TBL_EDismountType DismountType);
		void CatapultLaunchCharacters();
		void CatapultFireAction();
		void AnimNotify_catapultFireEnd_Action();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacter
	 * Size -> 0x0F70 (FullSize[0x15E0] - InheritedSize[0x0670])
	 */
	class ATBLCharacter : public ATBLCharacterBase
	{
	public:
		unsigned char                                              UnknownData_64WD[0x28];                                  // 0x0670(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCharacterDisplayInfo                               DisplayInfo;                                             // 0x0698(0x0078) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TBL_EAudioClassType                                        AudioClassType;                                          // 0x0710(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECharacterClass                                        PawnClassType;                                           // 0x0711(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R85P[0x2];                                   // 0x0712(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                OnlineXpStatName;                                        // 0x0714(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CD11[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UProgressionSpec*                                    ClassProgressionSpec;                                    // 0x0720(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAbilitiesComponent*                                 Abilities;                                               // 0x0728(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStatsComponent*                                     Stats;                                                   // 0x0730(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHeadlookComponent*                                  HeadlookComponent;                                       // 0x0738(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ReplicatedServerFrame;                                   // 0x0740(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YPTX[0x13];                                  // 0x0741(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        RandomSeed;                                              // 0x0754(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLockMeshRotationState                              LockMeshRotationState;                                   // 0x0758(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              RemoteViewYaw;                                           // 0x0770(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bUseRemoteViewYaw;                                       // 0x0771(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              bCinematicRestrictedControl : 1;                         // 0x0772(0x0001) BIT_FIELD Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TCZ7[0x1];                                   // 0x0773(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CinematicRestrictedControlCameraLockAngle;               // 0x0774(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        CinematicRestrictedControlCameraLockID;                  // 0x0778(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSpecialItemReplicated                              SpecialItemReplicated;                                   // 0x077C(0x0002) Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       bShouldCharacterBeHidden;                                // 0x077E(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OLF3[0x1];                                   // 0x077F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLPlayerState*                                     BeingRevivedBy;                                          // 0x0780(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnBeingRevivedByChangedDelegate;                         // 0x0788(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              Mesh1P;                                                  // 0x0798(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFollowMasterSkeletalMeshComponent*                  FollowMeshComponent;                                     // 0x07A0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPushingComponent*                                   PushingComponent;                                        // 0x07A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCustomizationComponent*                             CustomizationComponent;                                  // 0x07B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JH80[0x8];                                   // 0x07B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraComponent*                                    Camera1P;                                                // 0x07C0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraComponent*                                    Camera3P;                                                // 0x07C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                Camera1PSocket;                                          // 0x07D0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                Camera3PSocket;                                          // 0x07D8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             CameraOffset1P;                                          // 0x07E0(0x000C) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCamera1PBlendParams                                Camera1PBlendParams;                                     // 0x07EC(0x003C) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FReplicationPredictionState                         PredictionState;                                         // 0x0828(0x0070) NativeAccessSpecifierPublic
		struct FAKAudioStartStopStruct                             ActionEventAzar;                                         // 0x0898(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FAKAudioStartStopStruct                             ActionEventBashrahn;                                     // 0x08A8(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FAKAudioStartStopStruct                             BattlecryActionEventAzar;                                // 0x08B8(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FAKAudioStartStopStruct                             BattlecryActionEventBashrahn;                            // 0x08C8(0x0010) Edit, NoDestructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      CharacterSubclasses;                                     // 0x08D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              LoadoutSelection;                                        // 0x08E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              OverrideLoadoutSelection;                                // 0x08F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              EquippedCarryableOnSpawn;                                // 0x08F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BaseTurnRate;                                            // 0x0900(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BaseLookUpRate;                                          // 0x0904(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AttackFromBehindAngle;                                   // 0x0908(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6IQX[0x4];                                   // 0x090C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCombatStateComponent*                               CombatStateComponent;                                    // 0x0910(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateSynchronization*                         CombatStateSynchronization;                              // 0x0918(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCombatStateQueue*                                   CombatStateQueue;                                        // 0x0920(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CombatStateSet;                                          // 0x0928(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UConditionsComponent*                                ConditionsComponent;                                     // 0x0930(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInteractableComponent*                              InteractableComponent;                                   // 0x0938(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMovementModifierComponent*                          MovementModifiers;                                       // 0x0940(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPerksComponent*                                     PerksComponent;                                          // 0x0948(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallDamageStartingSpeed;                                 // 0x0950(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FallDamageScale;                                         // 0x0954(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDamageSource*                                       FallDamageSource;                                        // 0x0958(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPhysMatFallingDamageMultiplier>             FallingDamagePhysMatMultipliers;                         // 0x0960(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bKillUponLanding;                                        // 0x0970(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y0I1[0x3];                                   // 0x0971(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AInventoryItem>                       LastWeaponHitBy;                                         // 0x0974(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class ATBLCharacter>                        LastCharacterHitBy;                                      // 0x097C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TWeakObjectPtr<class AInventoryItem>                       WeaponAppliedBleed;                                      // 0x0984(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1SLO[0x4];                                   // 0x098C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPossessed;                                             // 0x0990(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHitWorld;                                              // 0x09A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMeleeSuccess;                                          // 0x09B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamage;                                                // 0x09C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDamageCaused;                                          // 0x09D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFallDamage;                                            // 0x09E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWasParried;                                            // 0x09F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnParrySuccess;                                          // 0x0A00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClash;                                                 // 0x0A10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartHeal;                                             // 0x0A20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStaminaCostFailed;                                     // 0x0A30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCameraChanged;                                         // 0x0A40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimationSetChanged;                                   // 0x0A50(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemEquipped;                                 // 0x0A60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemUnequipped;                               // 0x0A70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventoryItemToBeEquipped;                             // 0x0A80(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMount;                                                 // 0x0A90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             SetOnHorse;                                              // 0x0AA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDismount;                                              // 0x0AB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableFocused;                                   // 0x0AC0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInteractableLostFocus;                                 // 0x0AD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseableActorInteractableFocused;                       // 0x0AE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUseableActorInteractableLostFocused;                   // 0x0AF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatsComponentFocused;                                 // 0x0B00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStatsComponentLostFocused;                             // 0x0B10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetRagdollPhysics;                                     // 0x0B20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFreezeRagdollPhysics;                                  // 0x0B30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnUnfreezeRagdollPhysics;                                // 0x0B40(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetFirstPersonDeathCamera;                             // 0x0B50(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSetThirdPersonDeathCamera;                             // 0x0B60(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRootMotionChanged;                                     // 0x0B70(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDismountPressed;                                       // 0x0B80(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCarryableCharacterEvent;                               // 0x0B90(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCarryableAnimationEvent;                               // 0x0BA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PlayInventoryAnimation;                                  // 0x0BB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerMeshChanged;                                     // 0x0BC0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClientNotifySuicide;                                   // 0x0BD0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnClientNotifyKilled;                                    // 0x0BE0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayerStateReplicated;                                 // 0x0BF0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnWasHitEarly;                                           // 0x0C00(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayEmote;                                             // 0x0C10(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProjectileBeginPlay;                                   // 0x0C20(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowInGameMenu;                                        // 0x0C30(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      HitActors;                                               // 0x0C40(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AActor*>                                      HeadShotActors;                                          // 0x0C50(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class ATBLCharacter*, struct FArmHitInfo>             ArmHits;                                                 // 0x0C60(0x0050) NativeAccessSpecifierPublic
		int                                                        ClientTracerHitCount;                                    // 0x0CB0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J055[0x4];                                   // 0x0CB4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        ClientTracerHitBones;                                    // 0x0CB8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TWeakObjectPtr<class UPrimitiveComponent>>          ClientTracerHitComponents;                               // 0x0CC8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLSpectatorPawn*                                   SpectatingPawn;                                          // 0x0CD8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasAltAttack;                                           // 0x0CE0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AXEF[0x3];                                   // 0x0CE1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FThirdPersonCameraParams                            ThirdPersonCameraParams;                                 // 0x0CE4(0x0060) Edit, NoDestructor, NativeAccessSpecifierPublic
		struct FThirdPersonCameraParams                            CurrentCameraParams;                                     // 0x0D44(0x0060) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LL5W[0x4];                                   // 0x0DA4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMovementDebugger*                                   MovementDebugger;                                        // 0x0DA8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       SKMesh3P;                                                // 0x0DB0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<uint64_t, struct FLastSightCheckInfo>                 SightCacheMap;                                           // 0x0DB8(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QYWN[0x10];                                  // 0x0E08(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            GoreHeadRotationOffset;                                  // 0x0E18(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bSpawnedGoreHead : 1;                                    // 0x0E24(0x0001) BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bIsForCustomizationMenu : 1;                             // 0x0E24(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bCustomizationMenuComponentsSpawned;                     // 0x0E25(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J10V[0x2];                                   // 0x0E26(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCustomizationContext                               CustomizationContext;                                    // 0x0E28(0x0058) Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic
		class USkeletalMesh*                                       DefaultMesh1P;                                           // 0x0E80(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             Mesh1PLocation;                                          // 0x0E88(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            Mesh1PRotation;                                          // 0x0E94(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      FirstPossessedTimeSeconds;                               // 0x0EA0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasAttackedSuccessfully;                                // 0x0EA4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A386[0x3];                                   // 0x0EA5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GamepadUsePressedStartTime;                              // 0x0EA8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        GamepadUsePressedCount;                                  // 0x0EAC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      DebugProjectile;                                         // 0x0EB0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      DebugFakeClientProjectile;                               // 0x0EB8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AInventoryItem*                                      DebugDroppedItem;                                        // 0x0EC0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDebugIgnoreAI;                                          // 0x0EC8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCinematicsRelevant;                                   // 0x0EC9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7EOC[0x6];                                   // 0x0ECA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ASpawner*                                            SpawnedAtSpawner;                                        // 0x0ED0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     SpawnedAtSpawnComp;                                      // 0x0ED8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        SpawnerPosition;                                         // 0x0EE0(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPreventForwardSpawn;                                    // 0x0EE4(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MW0B[0x3];                                   // 0x0EE5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AInventoryItem*>                              AttachedItems;                                           // 0x0EE8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLockMeshBlendOutParams                             LockMeshBlendInParams;                                   // 0x0EF8(0x0054) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FLockMeshBlendOutParams                             LockMeshBlendOutParams;                                  // 0x0F4C(0x0054) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCinematicRestrictedControl;                            // 0x0FA0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCinematicAllowedControl;                               // 0x0FB0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FMountRootBlendParams                               MountRootBlendParams;                                    // 0x0FC0(0x0068) NoDestructor, NativeAccessSpecifierPublic
		struct FBlendParams                                        MountControlBlendParams;                                 // 0x1028(0x0024) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DI3Z[0x4];                                   // 0x104C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDamageSource*>                               VOFriendlyDamageSources;                                 // 0x1050(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UDamageSource*>                               AutoVONegativeDamageSources;                             // 0x1060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHelmetKnockedOff;                                       // 0x1070(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              DeadCharacterId;                                         // 0x1071(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BOZO[0x6];                                   // 0x1072(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EAudioAutoVOType, float>                          AutoVOProbabilty;                                        // 0x1078(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FTutorialLocationBlendParams                        TutorialLocationBlendParams;                             // 0x10C8(0x003C) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FDHE[0x4];                                   // 0x1104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTutorialLookAtParams                               TutorialLookAtParams;                                    // 0x1108(0x0020) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FHorseLookAtParams                                  HorseLookAtParams;                                       // 0x1128(0x0018) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FAttachedRagdoll                                    AttachedRagdoll;                                         // 0x1140(0x0030) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAttachRagdollBlendParams                           AttachRagdollBlendParams;                                // 0x1170(0x003C) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T2ZQ[0x4];                                   // 0x11AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USpecialItemAbility*                                 SpecialItemAbility;                                      // 0x11B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSpecialAbilitySet;                                     // 0x11B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FParryEventState                                    LastParryEvent;                                          // 0x11C8(0x0070) NoDestructor, NativeAccessSpecifierPublic
		class AInventoryItem*                                      LastFiredProjectile;                                     // 0x1238(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDebugMovementReplication                           DebugMovementReplication;                                // 0x1240(0x001C) NoDestructor, NativeAccessSpecifierPublic
		float                                                      TimeToVOExpiry;                                          // 0x125C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        NumberOfAllowedVOsWithinExpiry;                          // 0x1260(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VOCooldown;                                              // 0x1264(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BattleCryVOCooldown;                                     // 0x1268(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VOQueueEmoteWindow;                                      // 0x126C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UParryComponent*>                             CachedParryComponents;                                   // 0x1270(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInteractableComponent*                              ClosestInteractable;                                     // 0x1280(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatsComponent*                                     ClosestStatsComponent;                                   // 0x1288(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFireSourceComponent*                                ClosestFireSource;                                       // 0x1290(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInteractableComponent*                              UseableActorInteractable;                                // 0x1298(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInteractableSettings                               InteractableSettings;                                    // 0x12A0(0x0020) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      GamepadDismountPressedStartTime;                         // 0x12C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HBAE[0x4];                                   // 0x12C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInventory*                                          Inventory;                                               // 0x12C8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsDying : 1;                                            // 0x12D0(0x0001) BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RPAE[0x3];                                   // 0x12D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DeathTime;                                               // 0x12D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathAnimationLength;                                    // 0x12D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DeathAnimationToRagdollImpulse;                          // 0x12DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bShouldCrouchOverrideRecoveryAnimation;                  // 0x12E0(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldPlayDeathAnimation;                               // 0x12E1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F8TJ[0x2];                                   // 0x12E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                DeathAnimationMontageName;                               // 0x12E4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DeathAnimationSectionName1p;                             // 0x12EC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DeathAnimationSectionName3p;                             // 0x12F4(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CB2X[0x4];                                   // 0x12FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        AudioComponent;                                          // 0x1300(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U2NR[0x8];                                   // 0x1308(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          Camera3PRotation;                                        // 0x1310(0x0030) IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      RagdollStartTime;                                        // 0x1340(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRagdollTriggered;                                       // 0x1344(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRagdollCustomTick;                                      // 0x1345(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HP0R[0x7];                                   // 0x1346(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsCharacterPaused;                                      // 0x134D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2GI8[0x2];                                   // 0x134E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UActorComponent*>                             PausedComponents;                                        // 0x1350(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      PausedActors;                                            // 0x1360(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<float>                                              PausedActorLifespans;                                    // 0x1370(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTimerHandle>                                PausedTimerHandles;                                      // 0x1380(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UPrimitiveComponent*>                         PausedPhysics;                                           // 0x1390(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHasRandomSeed;                                          // 0x13A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDidPushRespawnState;                                    // 0x13A1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTapOutHeld;                                             // 0x13A2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DMPP[0x1];                                   // 0x13A3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAttachedSmoothing                                  AttachedSmoothing;                                       // 0x13A4(0x000C) NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       PreviousIsPlayingRootMotion;                             // 0x13B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EFaction                                               AutoPossessAIFaction;                                    // 0x13B1(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZQV5[0x6];                                   // 0x13B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBehaviorTree*                                       AutoPossessAIBehaviorTree;                               // 0x13B8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAutoPossessAIStartCinematicRestricted;                  // 0x13C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCanSuicide;                                             // 0x13C1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPreventSuicide;                                         // 0x13C2(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSuicideTried;                                           // 0x13C3(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRemovableBot;                                           // 0x13C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FFRG[0x3];                                   // 0x13C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      FellOutOfWorldKillTime;                                  // 0x13C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCountTowardsKillsAndKnockdowns;                         // 0x13CC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NC9S[0x3];                                   // 0x13CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      ConstructableActors;                                     // 0x13D0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4SWQ[0x8];                                   // 0x13E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AController*                                         LastController;                                          // 0x13E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLPlayerController*                                LastPlayerController;                                    // 0x13F0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLPlayerState*                                     LastPlayerState;                                         // 0x13F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVOTracker                                          VOTracker;                                               // 0x1400(0x0030) Protected, NativeAccessSpecifierProtected
		class UCurveFloat*                                         LipSyncVOCurve;                                          // 0x1430(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_EAudioAutoVOType                                       CurrentAutoVo;                                           // 0x1438(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQDQ[0x7];                                   // 0x1439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TBL_EAudioAutoVOType>                               DeathFriendlyAudoVO;                                     // 0x1440(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TBL_EAudioAutoVOType>                               AliveFriendlyAudoVO;                                     // 0x1450(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MW9M[0x60];                                  // 0x1460(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInteractableComponent*                              CachedInteractableUseHeldComponent;                      // 0x14C0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<unsigned char, TWeakObjectPtr<class AActor>>          ConditionsAppliedByActor;                                // 0x14C8(0x0050) Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JNYS[0x38];                                  // 0x1518(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EAudioAutoVOType, float>                          AutoVODistanceByType;                                    // 0x1550(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UTeamCapturePointComponent>           CapturePoint;                                            // 0x15A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7CTS[0x18];                                  // 0x15A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      WaitForAttachToProjectileTime;                           // 0x15C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FV3H[0x4];                                   // 0x15C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLTeam*                                            PreviousTeam;                                            // 0x15C8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsInitialAutorun;                                       // 0x15D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FSJV[0xF];                                   // 0x15D1(0x000F) MISSED OFFSET (PADDING)

	public:
		void WasHitEarly(const struct FHitResult& Hit);
		void WasHitAfterDeath(struct FHitResult* Hit, class ATBLCharacter* OtherCharacter);
		void UpdateThirdPersonCamera(float DeltaSeconds, bool bSpectator);
		void UpdateSpecialItemAbility(class AInventoryItem* SpecialItem);
		void UpdateRagdoll(float DeltaSeconds);
		void UpdatePlayingVO(float DeltaSeconds);
		void UpdateParryAim(float DeltaSeconds);
		void UpdateLockMeshRotation();
		void UpdateBlending(float DeltaSeconds);
		void UpdateAttachedSmoothing(float DeltaSeconds);
		void UnfreezeRagdoll();
		void TutorialPlayerControl(const struct FTutorialPlayerControlParams& Params);
		void TrapEvent(TBL_ETrapEventResult Result, class UObject* TrapObject);
		void SwitchAttachedItemMesh(class USkeletalMeshComponent* ParentMesh);
		void Suicide(TBL_EKillReason KillReason);
		void StopRevive(class ATBLCharacter* DownedCharacter);
		void StopLowPriorityCharacterActionEvent();
		void StopHighPriorityCharacterActionEvent();
		void StopCharacterActionEvent();
		void StartRevive(class ATBLCharacter* DownedCharacter);
		bool ShouldIgnoreAI();
		bool ShouldClash(class ATBLCharacter* InitiatorCharacter, class ATBLCharacter* TargetCharacter, const struct FVector& ClashLocation);
		bool ShouldBlockCharacter(class ATBLCharacter* AttackingCharacter, class ATBLCharacter* HitCharacter, struct FActionContext* Context);
		bool ShouldAttackBeCountered(class ATBLCharacter* AttackingCharacter, class AInventoryItem* AttackingItem, class AInventoryItem* DefenderItem);
		void SetupAI();
		void SetThirdPersonDeathCamera();
		void SetSpectatingPawn(class ATBLSpectatorPawn* SpectatingPawn);
		void SetRagdollPhysics();
		void SetPlayerDrunk(bool IsDrunk);
		void SetIsInitialAutorun();
		void SetIgnoreAI(bool bNewIgnoreAI);
		void SetFirstPersonDeathCamera();
		void SetDeathAnimationParameters(const struct FDamageTakenEvent& Event);
		void SetCinematicRestrictedControl(bool bRestricted);
		void ServerUseTornOffItem(class UClass* ItemClass, const class FName& TornOffName);
		void ServerUseHeldStart(class UInteractableComponent* Interactable);
		void ServerUseHeldRelease(class UInteractableComponent* Interactable);
		void ServerUseHeldComplete(class UInteractableComponent* Interactable);
		void ServerUse(class UInteractableComponent* Interactable, bool bIsAutoPickup);
		void ServerTrapEvent(TBL_ETrapEventResult Result, class UObject* TrapObject, float ClientTimeStamp);
		void ServerSetFireSource(class UFireSourceComponent* NewFireSource);
		void ServerPlayEmote(unsigned char EmoteRowNum, TBL_EAudioPersonalityType PersonalityType, unsigned char EmotePlayingSeqNum, unsigned char bIsOverrideEmote, unsigned char EmoteType);
		void ServerPlayChickenEmote();
		void ServerHitWorld(const struct FHitWorldParams& Params, float ClientTimeStamp);
		void ServerHandleOnCustomizationJobsEmptied();
		void ServerEnterPostGameState();
		void ServerDismountPressed();
		void Revive(class ATBLCharacter* DownedCharacter);
		void RemoveEmoteFromQueue(int EmoteId);
		void RemoveConstructableActor(class AActor* DestroyedActor);
		void PushRespawnState();
		void ProcessTurnAndLookInputRate(CoreUObject_EAxis Axis, float Rate);
		void ProcessTurnAndLookInput(CoreUObject_EAxis Axis, float Value);
		void PlayLowPriorityCharacterActionEvent(const struct FSoundSwitchEntry& SoundSwitch);
		void PlayHighPriorityCharacterActionEvent(const struct FSoundSwitchEntry& SoundSwitch);
		void PlayEmoteFromServer(const class FName& EmoteName);
		bool PlayEmote(const struct FPersonalityEmoteTableRow& Emote, TBL_ERadialVOMenuPage Page);
		void PlayChickenEmote();
		void PlayCharacterActionEvent(const struct FSoundSwitchEntry& SoundSwitch, bool IsLocalPlayerInvolved);
		void PlayAutoVOFromServer(TBL_EAudioAutoVOType AutoVoType, bool SkipLocalPlayer);
		void PlayAutoVO(TBL_EAudioAutoVOType AutoVoType);
		void PauseCharacter(bool bPaused);
		void OnTeamChanged(class ATBLTeam* OwnerTeam);
		void OnRep_SpecialItemCharge();
		void OnRep_SpawnedAtSpawnComp();
		void OnRep_ShouldCharacterBeHidden();
		void OnRep_RandomSeed(int PreviousRandomInt);
		void OnRep_LockMeshRotation();
		void OnRep_InventorySlots();
		void OnRep_CinematicRestrictedControl();
		void OnRep_BeingRevivedBy();
		void OnRep_AttachToProjectile(class AInventoryItem* Projectile);
		void OnMeleeHitSuccess(class AActor* HitActor);
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnInteractableUsePawnChanged(class APawn* Pawn);
		void OnInitializeAltWeightsState();
		void OnDamageTaken(const struct FDamageTakenEvent& DamageEvent);
		void OnCustomized();
		void OnConstructableActorKilled(const struct FDeathDamageTakenEvent& Event);
		void OnConstructableActorDestroyed(class AActor* DestroyedActor);
		void OnComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
		void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnCombatStateEnd(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnCausedDamage(const struct FDamageTakenEvent& DamageEvent);
		void OnAttachedRagdollActorDestroyed(class AActor* DestroyedActor);
		void OnApplyCondition(class AActor* Actor, TBL_EConditionType Condition);
		void NetMulticastFastSharedReplication(const struct FFastSharedProperties_TBLCharacter& Properties);
		void LoserEnterPostGameState();
		void KillWithHitParams(TBL_EKillReason KillReason, bool bSwitchedTeamsInLoadoutVolume, const struct FHitResult& HitResult, const struct FVector& HitDirection, class AActor* Killer);
		void Kill(TBL_EKillReason KillReason, bool bSwitchedTeamsInLoadoutVolume, class AActor* Killer);
		bool IsSprinting();
		bool IsSpecialPawnClass();
		bool IsSpawnFadeOutEnabled();
		bool IsRagdollCustomTick();
		bool IsPawnSubclass();
		bool IsInterpingToMountLocation();
		bool IsInRagdoll();
		bool IsInParryView(class UParryComponent* ParryComp, const struct FTransform& BoxTransform, const struct FVector& BoxExtents, float IgnoreParryDepth);
		bool IsInitialAutorun();
		bool IsHoldingAltAttack(float Tolerance);
		bool IsFollowAnimationEnabled();
		bool IsFacingTarget(const struct FHitResult& Hit, const struct FFacingTargetParams& Params);
		bool IsCinematicRestrictedControl();
		bool IsCharacterPaused();
		bool STATIC_IsCharacterClassArchetype(TBL_ECharacterClass Type);
		bool IsBlocking(class ATBLCharacter* AttackingCharacter);
		bool IsArrowCameraEnabled();
		void InterruptUse(const class FName& NextCombatState);
		void InitiateAbilityByName(const class FName& AbilityName);
		void HitWorldWithStats(const struct FHitResult& Hit, bool bParried);
		void HitWorld(const struct FHitResult& Hit);
		void HitClash(struct FHitResult* Hit, class ATBLCharacter* OtherCharacter);
		void HideCharacterAndEquipment(bool bHide);
		bool HasCondition(TBL_EConditionType Condition);
		void HandleOnCustomizationJobsEmptied();
		struct FThirdPersonCameraParams GetThirdPersonCameraParams();
		class USpecialItemAbility* GetSpecialItemAbility();
		TBL_EAudioPersonalityType GetPersonalityType();
		class USkeletalMeshComponent* GetPawnMesh(bool WantFirstPerson);
		TBL_ECharacterClass GetPawnClassType();
		TBL_ECharacterClass GetPawnClassArchetype();
		TArray<class UParryComponent*> GetParryComponents();
		class AController* GetLastController();
		class UInventory* GetInventory();
		class UInteractableComponent* GetFocusedInteractable();
		struct FVector GetFacingDirection();
		class AInventoryItem* GetEquippedWeapon();
		class AInventoryItem* GetEquippedItemByHand(TBL_EEquippedHand Hand);
		TArray<class AInventoryItem*> GetEquippedInventoryItems();
		float GetDeathTime();
		class USkeletalMeshComponent* GetCurrentMesh();
		TArray<class AInventoryItem*> GetCurrentAttackingWeapons();
		class UCombatStateComponent* GetCombatStateComponent();
		TBL_ECharacterClassType STATIC_GetCharacterClassType(TBL_ECharacterClass Type);
		class FString STATIC_GetCharacterClassAudioSwitch(TBL_EAudioClassType ClassType, TBL_EFaction Faction);
		TBL_ECharacterClass STATIC_GetCharacterClassArchetype(TBL_ECharacterClass Type);
		TBL_EAudioClassType GetCharacterAudioType();
		struct FVector GetCenterPlayArea();
		struct FVector GetCameraSocketLocation();
		class UClass* GetBlockingInventoryItem(class ATBLCharacter* AttackingCharacter);
		void GetBattlecryActionEvent(class UAkAudioEvent** StartEvent, class UAkAudioEvent** StopEvent);
		float GetAutoVODistanceSqrdByType(TBL_EAudioAutoVOType Type);
		float GetAnimationPercent();
		class FString GetAIObjectiveDebugString();
		TArray<class AActor*> GetAIObjectiveActors();
		class AActor* GetActorWhoAppliedCondition(TBL_EConditionType ConditionApplied);
		void GetActionEvent(class UAkAudioEvent** StartEvent, class UAkAudioEvent** StopEvent);
		void FellOutOfWorldTimer();
		void DoKeyEvent(const class FName& ActionName, Engine_EInputEvent KeyEvent);
		void DoKeyAxis(const class FName& ActionName, float AxisValue);
		bool DoesCountTowardKillsAndKnockdowns();
		void DebugDrawShield(class ATBLPlayerController* DebugController);
		void DebugDrawParryBox(float DeltaTime);
		void DebugDrawCamera(float DeltaTime);
		void DeathAnimationOverlap();
		void DamageWithHitParams(float Damage, const struct FHitResult& HitResult, const struct FVector& HitDirection, bool bLoseLimbCheat);
		void ConsumeCurrentInput();
		void ConditionAppliedByActor(TBL_EConditionType ConditionApplied, class AActor* ConditionCauser);
		void ClientTeleportTo(const struct FVector& vecTargetPos, const struct FRotator& vecTargetRot);
		void ClientSuicideReceived(const struct FDamageTakenEventCompressed& DamageEventCompressed);
		void ClientSetCustomizationSwatches(TArray<struct FSwatchSelection> Swatches);
		void ClientReliableNotifySuicide(TBL_EKillReason KillReason);
		void ClientDrawDebugString(const struct FVector& Location, const class FString& Text, const struct FColor& Clr, float Duration, float FontScale);
		void ClientDrawDebugSphere(const struct FVector& Center, float Radius, int Segments, const struct FColor& Clr, bool bPersistentLines);
		void ClientDrawDebugPose(class ATBLCharacter* Character, const struct FColor& Clr);
		void ClientDrawDebugPoint(const struct FVector& Location, float Size, const struct FColor& Clr, bool bPersistentLines, float Lifetime);
		void ClientDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FColor& Clr, bool bPersistentLines, float Lifetime, float Thickness);
		void ClientDrawDebugCapsule(const struct FVector& Center, float HalfHeight, float Radius, const struct FColor& Color);
		void ClientDrawDebugBox(const struct FVector& Center, const struct FVector& Box, const struct FTransform& Transform, const struct FColor& Color, bool bPersistentLines, float Lifetime);
		void ClientDrawDebugArrow(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FColor& Clr, bool bPersistentLines, float Lifetime, float Thickness);
		void ClientApplyCondition(TBL_EConditionType Condition);
		void ClearTutorialPlayerControl();
		void CheckTeamCollision(class AActor* OtherActor, class UPrimitiveComponent* OtherComp);
		void CarryableCharacterEvent(const class FName& EventName, class ATBLCharacter* ParentCharacter);
		void CarryableAnimationEvent(const class FName& EventName);
		bool CanSprintShove();
		bool CanSprintCharge();
		bool CanSprintAttack();
		bool CanRevive(class APawn* Pawn);
		bool CanFullSprint();
		bool CanClash();
		void BroadcastWasHitEarly(const struct FEarlyHitResult& EarlyHit);
		void BroadcastPauseCharacter(bool bPaused);
		void BroadcastParryEvent(class AActor* Target, const struct FParryEventReplicated& ParryEventReplicated);
		void BroadcastLoseHelmet();
		void BroadcastHitWorldWithStats(const struct FHitWorldParams& Params);
		void BroadcastHitWorld(const struct FHitWorldParams& Params);
		void BroadcastDetachFromController();
		void BroadcastClashEvent(class ATBLCharacter* Target, const struct FClashEventReplicated& ClashEventReplicated);
		void BroadcastCinematicRestrictControl();
		void BroadcastCinematicAllowControl();
		void BroadcastChickenEmote();
		void BroadcastCharacterEmote(unsigned char EmoteRowNum, TBL_EAudioPersonalityType PersonalityType, unsigned char EmotePlayingSeqNum, unsigned char EmoteRandomSeed, unsigned char bIsOverrideEmote, unsigned char EmoteType);
		void BroadcastAutoVO(TBL_EAudioAutoVOType AutoVoType, bool SkipLocalPlayer);
		void AddConstructableActorToArray(class AActor* NewActor);
		void AddConstructableActor(class AInventoryItem* CarryableItem, class AActor* NewActor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterAnimInstance
	 * Size -> 0x10A0 (FullSize[0x1550] - InheritedSize[0x04B0])
	 */
	class UTBLCharacterAnimInstance : public UTBLAnimInstance
	{
	public:
		int                                                        Index_LOD;                                               // 0x04AC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimNotifyWeaponAttach;                                // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimNotifyWeaponDetach;                                // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimNotifyUseItem;                                     // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLadderAnimationEnded;                                  // 0x04E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAnimNotifyStepEvent;                                   // 0x04F0(0x0010) ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z8Z7[0x18];                                  // 0x0500(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimMontage*                                        LastSpawnMontage;                                        // 0x0518(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                LastSpawnSectionName;                                    // 0x0520(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpawnAnimStartTime;                                      // 0x0528(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IX0P[0x4];                                   // 0x052C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UDataTable*                                          ComboBlendTimeDataTable;                                 // 0x0530(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         ThwackPlayRateCurve;                                     // 0x0538(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<struct FComboMontageRule, class FName>                ComboMontageRules;                                       // 0x0540(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FComboMontageRule, class FName>                ThwackComboMontageRules;                                 // 0x0590(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<struct FComboMontageRule, class FName>                RiposteMontageRules;                                     // 0x05E0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             ThwackComboMontage;                                      // 0x0630(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             FeintMontage;                                            // 0x0680(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, float>                                   DelayBackToIdle;                                         // 0x06D0(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetMount_Class_Default;                         // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetSiege_Class_Default;                         // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetOffhand1P_Class_Default;                     // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetOffhand3P_Class_Default;                     // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetPeasant_Class_Default;                       // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetDeath1P_Default;                             // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              AnimationSetDeath3P_Default;                             // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                Socket_LeftStirrup;                                      // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                Socket_RightStirrup;                                     // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpeedLine;                                               // 0x0768(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QNX3[0x4];                                   // 0x076C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFootStepSounds                                     FootStepSounds;                                          // 0x0770(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FAttackMontage                                      CurrentAttackMontage;                                    // 0x07C0(0x01D8) ContainsInstancedReference, NativeAccessSpecifierPublic
		TArray<class FName>                                        AttackStates;                                            // 0x0998(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             SectionToCombatState;                                    // 0x09A8(0x0050) NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             AltCombatStates;                                         // 0x09F8(0x0050) NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             HeavyAttacks;                                            // 0x0A48(0x0050) NativeAccessSpecifierPublic
		class FName                                                JabDeflectSection;                                       // 0x0A98(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             DeflectSections;                                         // 0x0AA0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             AltDeflectSections;                                      // 0x0AF0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             ParryStartSections;                                      // 0x0B40(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             AltParryStartSections;                                   // 0x0B90(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             FeintToParrySections;                                    // 0x0BE0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             AltFeintToParrySections;                                 // 0x0C30(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             ParrySuccessSections;                                    // 0x0C80(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             AltParrySuccessSections;                                 // 0x0CD0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             KnockdownSections;                                       // 0x0D20(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             KnockdownGroundSections;                                 // 0x0D70(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             GetUpSections;                                           // 0x0DC0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             FallingSections;                                         // 0x0E10(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             FallingGetUpSections;                                    // 0x0E60(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             DownedKnockdownSections;                                 // 0x0EB0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             DownedStaggerSections;                                   // 0x0F00(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             DownedPickupSections;                                    // 0x0F50(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             MountUpSections;                                         // 0x0FA0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             MountDownSections;                                       // 0x0FF0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             MountCombatStates;                                       // 0x1040(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<TBL_EConditionType, class FName>                      MissingLimbNames;                                        // 0x1090(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             MountStaggerMontages;                                    // 0x10E0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, struct FPeasantMontage>                  PeasantStates;                                           // 0x1130(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class FName>                                        ServerIdlePoseCombatStates;                              // 0x1180(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        ServerIdlePoseMovementStates;                            // 0x1190(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        HideServerBones;                                         // 0x11A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       TBLCharacter;                                            // 0x11B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLCharacterMovement*                               movement;                                                // 0x11B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsPostInitialized;                                       // 0x11C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsServer;                                                // 0x11C1(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Is3p;                                                    // 0x11C2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8M9H[0x1];                                   // 0x11C3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CombatState;                                             // 0x11C4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_POQ3[0x4];                                   // 0x11CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCombatState*                                        CombatStateBlueprint;                                    // 0x11D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CombatStatePercent;                                      // 0x11D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AbilityName;                                             // 0x11DC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                ComboState;                                              // 0x11E4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BTYN[0x4];                                   // 0x11EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAttackType*                                         AttackType;                                              // 0x11F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            AimRotation;                                             // 0x11F8(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       IsDead;                                                  // 0x1204(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsRagdoll;                                               // 0x1205(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsShieldEquipped;                                        // 0x1206(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCrouch;                                                // 0x1207(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsDowned;                                                // 0x1208(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsAttackQueued;                                          // 0x1209(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FZU2[0x2];                                   // 0x120A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSpeed;                                                // 0x120C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             InputDir;                                                // 0x1210(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             Velocity;                                                // 0x121C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PreviousVelocity;                                        // 0x1228(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PreviousMeshLocation;                                    // 0x1234(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VelocityInterpSpeed;                                     // 0x1240(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentSpeed;                                            // 0x1244(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentSpeed2d;                                          // 0x1248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementDirection;                                       // 0x124C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MovementDirectionIndex;                                  // 0x1250(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementDirectionTime;                                   // 0x1254(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OnStrafeStopNeedsEvent;                                  // 0x1258(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S931[0x3];                                   // 0x1259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MaxSpeedInCurrentState;                                  // 0x125C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementStateWeight;                                     // 0x1260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementStateInterpSpeed;                                // 0x1264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsMove;                                                  // 0x1268(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5NG5[0x3];                                   // 0x1269(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CharMoveWeight;                                          // 0x126C(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                MovementState;                                           // 0x1270(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                PreviousMovementState;                                   // 0x1278(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DashDirection;                                           // 0x1280(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            SprintTurnDirection;                                     // 0x1284(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SprintTurnAngle;                                         // 0x1290(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintTurnWeight;                                        // 0x1294(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLunge;                                                 // 0x1298(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YC6N[0x3];                                   // 0x1299(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LungeStartTime;                                          // 0x129C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsOnHorse;                                               // 0x12A0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4MC1[0x7];                                   // 0x12A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLHorseAnimInstance*                               HorseAnimBP;                                             // 0x12A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsOnSiege;                                               // 0x12B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsAltPosition;                                           // 0x12B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BA5Y[0x2];                                   // 0x12B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                SiegeName;                                               // 0x12B4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XMV1[0x4];                                   // 0x12BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLAnimInstance*                                    SiegeAnimBP;                                             // 0x12C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLBatteringRamAnimInstance*                        BatteringRamAnimBP;                                      // 0x12C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AnimationSetName;                                        // 0x12D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AnimationSetName_OffHand;                                // 0x12D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CurrentEmoteName;                                        // 0x12E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CurrentEmoteMontageName;                                 // 0x12E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsPlayingSequencerAnimation;                            // 0x12F0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BW0J[0x3];                                   // 0x12F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                LastMissingLimb;                                         // 0x12F4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsItemEquipped;                                          // 0x12FC(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLeftFootTap;                                           // 0x12FD(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsRightFootTap;                                          // 0x12FE(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2RZ7[0x1];                                   // 0x12FF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AttackWindupWeight;                                      // 0x1300(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAnimGraphBranch01                                     AnimGraphBranch01;                                       // 0x1304(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O8NE[0x3];                                   // 0x1305(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimPitch;                                                // 0x1308(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsOffHandAttack;                                         // 0x130C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PreviousIsOnHorse;                                       // 0x130D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIdlePoseCombatState;                                    // 0x130E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIdlePoseMovementState;                                  // 0x130F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IdlePoseStateTime;                                       // 0x1310(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitialMoveTime;                                         // 0x1314(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAnimDamageParams                                   PreviousDamageParams;                                    // 0x1318(0x0038) NoDestructor, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase;                                        // 0x1350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase1P;                                      // 0x1358(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase3P;                                      // 0x1360(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBaseMount;                                   // 0x1368(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBaseSiege;                                   // 0x1370(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBaseDeath;                                   // 0x1378(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       PreviousAnimationSetBase;                                // 0x1380(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AHorse*                                              Horse;                                                   // 0x1388(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AActor*                                              Siege;                                                   // 0x1390(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        ParryMontage;                                            // 0x1398(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        ParryEventMontage;                                       // 0x13A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        ParryRiposteShieldMontage;                               // 0x13A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        ParrySuccessMontage;                                     // 0x13B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       CarryableParentCharacter;                                // 0x13B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        KnockdownMontage;                                        // 0x13C0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                KnockdownDirection;                                      // 0x13C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        FallingMontage;                                          // 0x13D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        InteractMontage;                                         // 0x13D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        ReloadMontage;                                           // 0x13E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        PeasantMontage;                                          // 0x13E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCombatStateMontage                                 CurrentCombatStateMontage;                               // 0x13F0(0x0010) NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bCarryablePickup;                                        // 0x1400(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9O8X[0x3];                                   // 0x1401(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      InventoryAnimationLength;                                // 0x1404(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintTurnEndTime;                                       // 0x1408(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCustomizationAnimInstance;                             // 0x140C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EN2A[0x3];                                   // 0x140D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LipSyncVOMeter;                                          // 0x1410(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_62J3[0x4];                                   // 0x1414(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UAnimMontage*, class UAnimMontage*>             NoBlend1PMontages;                                       // 0x1418(0x0050) NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSet;                                        // 0x1468(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSet1P;                                      // 0x1470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSet3P;                                      // 0x1478(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetMount;                                   // 0x1480(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetSiege;                                   // 0x1488(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetDeath;                                   // 0x1490(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetOffHand;                                 // 0x1498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetOffHand1P;                               // 0x14A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetOffHand3P;                               // 0x14A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharAnimationSetPeasant;                                 // 0x14B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       CharPreviousAnimationSet;                                // 0x14B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_93XS[0x90];                                  // 0x14C0(0x0090) MISSED OFFSET (PADDING)

	public:
		void UpdateFootStepSounds(float DeltaSeconds, bool bHidden);
		void TriggerRagdoll();
		void StopCurrentCombatStateMontage(const class FName& NewCombatState, float BlendTime);
		void StartPeasantAnimation(const class FName& InCombatState);
		void StartParryAttack(class UAnimationSet* AnimSet);
		void StartAttack(bool bIsHeavy);
		bool ShouldStopAnimGraph();
		void SetOnHorse(bool bIsOnHorse);
		void SetDeathAnimationParameters(const struct FDamageTakenEvent& Event, uint32_t RandomSeed);
		void ReverseLadderAnimation();
		void PlaySpawnAnimation(const class FName& AnimationName);
		void PlayLadderAnimation(const class FName& SectionName);
		float PlayInventoryItemUse(class AInventoryItem* Item, bool bPickup);
		float PlayInventoryItemUnequipped(class AInventoryItem* Item);
		float PlayInventoryItemEquipped(class AInventoryItem* Item);
		void PlayInventoryAnimation(const class FName& Animation, class AInventoryItem* Item);
		void PlayHorseMountAnimation(const class FName& AnimationName);
		void PlayHorseDismountAnimation(const class FName& AnimationName);
		void PlayDeathAnimation();
		void PlayCombatStateMontage(const class FName& InCombatState, const class FName& MontageName, const class FName& SectionName, class UAnimationSet* AnimSet);
		void OnWasHitEarly(const struct FEarlyHitResult& EarlyHit);
		void OnVault(class AVaultMarker* VaultMarker);
		void OnUnfreezeRagdollPhysics();
		void OnSwitchAttack();
		void OnStartAttack();
		void OnSprintTurn();
		void OnSpawnAnimationComplete(class UAnimMontage* Montage, bool bInterrupted);
		void OnSignificanceChanged(TBL_ECharacterSignificanceLevel InSignificance);
		void OnSetRagdollPhysics();
		void OnResetForAnimInstancePool();
		void OnRecentlyRendered(bool bInRecentlyRendered);
		void OnRagdollHitFxEvent(class AActor* HitTaker, class AActor* HitCauser, class AInventoryItem* Weapon, const struct FHitResult& HitResult, const struct FVector& HitDirection, float Damage, class UDamageSource* DamageSource, class AActor* Projectile, const class FName& AttackName);
		void OnPostDamage(const struct FDamageTakenEvent& DamageEvent, const struct FPostDamageEventInfo& PostDamageInfo);
		void OnParrySuccess(class ATBLCharacter* ThisCharacter, class ATBLCharacter* OtherCharacter, const struct FParryEventState& ParryEventState);
		void OnParryInEnded(class UAnimMontage* Montage, bool bInterrupted);
		void OnMovementStateUpdate(float DeltaSeconds);
		void OnMovementStateChanged(const class FName& MovementState);
		void OnMovementActionStarted(const class FName& MovementName, const struct FRotator& Direction);
		void OnMovementActionFinished(const class FName& MovementName);
		void OnMount(class AActor* AttachParent, class USiegeMountPoint* MountPoint);
		void OnMeleeSuccess(class ATBLCharacter* DamagedCharacter);
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		void OnHorseLanded(const struct FLandedResult& LandedResult);
		void OnGetUp(const class FName& Direction);
		void OnFreezeRagdollPhysics();
		void OnEquippedItemsChanged();
		void OnDismount(class AActor* AttachParent, TBL_EDismountType DismountType);
		void OnCustomizationApplied(const struct FCustomizationContext& Context);
		void OnCrowdControlNoDamage(class AActor* OwningActor, const class FName& InCombatState, const struct FCrowdControlParams& CrowdControlParams);
		void OnCrowdControl(const class FName& InCombatState, const struct FAnimDamageParams& DamageEvent, TBL_ECrowdControlVariant CrowdControlVariant);
		void OnConditionAdded(class AActor* Actor, TBL_EConditionType Condition);
		void OnCombatStateEvent(class AActor* Actor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnChildAttachedToMesh(class USceneComponent* Child);
		void OnCarryableParent_CombatStateBegin(class AActor* Actor, const class FName& InCombatStateName, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnCarryableCharacterEvent(const class FName& EventName, class ATBLCharacter* ParentCharacter);
		void OnBackToIdleTimer();
		void OnAnimationSetChanged(const class FName& AnimSetName, const struct FAnimationSetDataTable& AnimInfo, class AInventoryItem* InventoryItem);
		void OnAnimationComplete();
		void NotifyCompleteDeathAnimation();
		void LadderSectionChanged(class UAnimMontage* Montage, int NextSection);
		void LadderMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
		void HideUnusedBonesOnServer();
		void HideBones(TArray<class FName> BoneList, TArray<class FName> VisibleBones);
		int GetStopAnimGraphValue();
		void GetSpawnMontage(const class FName& AnimationName, class UAnimMontage** Montage, class FName* MontageName, class FName* SectionName);
		float GetPhysicsSpawnTime(const class FName& AnimationName);
		float GetPeasantAnimationLength(const class FName& InCombatState);
		float GetMountAnimationLength(bool MountUp, const class FName& Direction);
		struct FVector GetLadderMountOffset(bool MountUp, bool bFromTop);
		float GetInventoryAnimationLength();
		struct FVector GetHorseDismountOffset(const class FName& AnimationName);
		void GetCurrentSpawnRootMotion(struct FVector* OutTranslation, struct FRotator* OutRotation, const class FName& AnimationName, float Position);
		float GetCurrentSpawnAnimationTime();
		void GetCurrentRootMotion(struct FVector* OutTranslation, struct FRotator* OutRotation, class UAnimMontage* Montage, const class FName& SectionName, bool bEndAnimation, float Position);
		void GetCurrentLadderRootMotion(struct FVector* OutTranslation, struct FRotator* OutRotation, const class FName& SectionName, bool bEndAnimation);
		class UAnimationSet* GetAnimationSetFromData(const struct FAnimationSetDataTable& AnimInfo);
		void EventVOPlaying(bool IsPlaying);
		void EventUnfreezeRagdollPhysics();
		void EventSpawnMontageStart(const class FName& AnimationName);
		void EventSpawnMontageComplete(const class FName& AnimationName);
		void EventOnWantsToGallop(bool bWantsToGallop);
		void EventOnStrafeStop();
		void EventOnStartAttack(const class FName& InAbilityName, const class FName& InCombatState, const class FName& InComboState, class UAttackType* InAttackType);
		void EventOnSprintStop(bool bIsHoldingMoveKey);
		void EventOnSprintState(const class FName& SprintState);
		void EventOnSprintStart();
		void EventOnSignificanceChanged();
		void EventOnSiegeMounted();
		void EventOnSiegeDismounted(TBL_EDismountType DismountType);
		void EventOnMovementStateChanged(const class FName& InMovementState, const class FName& InPreviousMovementState);
		void EventOnMovementDirectionChanged();
		void EventOnMovementActionStarted(const class FName& MovementName, const struct FRotator& Direction);
		void EventOnMissingLimb(const class FName& Condition);
		void EventOnMeleeHitSuccess(const class FName& AttackName, const class FName& AttackComboState);
		void EventOnLanded();
		void EventOnKilled(const struct FAnimDeathParams& Params);
		void EventOnJump();
		void EventOnInterrupt(const struct FAnimDamageParams& DamageEvent);
		void EventOnHorseStartMount(const class FName& Direction);
		void EventOnHorseStartDismount(const class FName& Direction);
		void EventOnHorseMounted();
		void EventOnHorseDismounted(TBL_EDismountType DismountType);
		void EventOnHitAfterDeath(const struct FAnimDeathParams& Params);
		void EventOnGetUp(const class FName& Direction);
		void EventOnDisarm();
		void EventOnDashCooldownFinished();
		void EventOnDash(float InDashDirection);
		void EventOnCrowdControl(const class FName& InCombatState, const struct FAnimDamageParams& DamageEvent, TBL_ECrowdControlVariant CrowdControlVariant);
		void EventOnCombatStateEnd(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void EventOnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void EventOnCombatStateBegin(class AActor* Actor, const class FName& State, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void EventOnCameraOffsetEnd(float AngleOffset);
		void EventOnCameraOffsetBegin();
		void EventHiddenPositionUpdate();
		void EventFreezeRagdollPhysics();
		void EventDamageNoInterrupt(const struct FAnimDamageParams& DamageEvent);
		void EventCarryableCharacter(const class FName& EventName, class ATBLCharacter* ParentCharacter);
		void DisableSpawnRootMotion(const class FName& AnimationName);
		void DisableAttackRootMotion();
		void CustomizationWeaponToStand(class UAnimMontage* Montage, bool bInterrupted);
		void CustomizationStandToWeapon(class UAnimMontage* Montage, bool bInterrupted);
		void CarryableSectionChanged(class UAnimMontage* Montage, int NextSection);
		void BlueprintOnAnimationSetChanged();
		void AnimNotify_WeaponDetach();
		void AnimNotify_WeaponAttach();
		void AnimNotify_UseItem();
		void AnimNotify_ShieldDetach();
		void AnimNotify_ShieldAttach();
		void AnimNotify_Revive();
		void AnimNotify_DropWeapon();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterAnimInstance_Customization
	 * Size -> 0x0000 (FullSize[0x1550] - InheritedSize[0x1550])
	 */
	class UTBLCharacterAnimInstance_Customization : public UTBLCharacterAnimInstance
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterAnimInstance_Peasant
	 * Size -> 0x0000 (FullSize[0x1550] - InheritedSize[0x1550])
	 */
	class UTBLCharacterAnimInstance_Peasant : public UTBLCharacterAnimInstance
	{
	public:
		class UNPCReplicatedDataComponent*                         NPCReplicatedDataComponent;                              // 0x1548(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterAnimInstance_Playable
	 * Size -> 0x0100 (FullSize[0x1650] - InheritedSize[0x1550])
	 */
	class UTBLCharacterAnimInstance_Playable : public UTBLCharacterAnimInstance
	{
	public:
		struct FVector2D                                           StrafeDirection;                                         // 0x154C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CameraOffsetRotation;                                    // 0x1554(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCameraOffset;                                          // 0x1558(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KRN2[0x7];                                   // 0x1559(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          LeftStirrup;                                             // 0x1560(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FTransform                                          RightStirrup;                                            // 0x1590(0x0030) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            AimRate;                                                 // 0x15C0(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MovementAcceleration;                                    // 0x15CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InputDirection;                                          // 0x15D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InputDirectionTime;                                      // 0x15D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WoundedWeight;                                           // 0x15D8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           WoundedWeightRange;                                      // 0x15DC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      WoundedWeightInterpSpeed;                                // 0x15E4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LowStaminaWeight;                                        // 0x15E8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           LowStaminaWeightRange;                                   // 0x15EC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            SlopeAngle;                                              // 0x15F4(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SlopeWeight;                                             // 0x1600(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             HeadlookLocation;                                        // 0x1604(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsHeadlook;                                              // 0x1610(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PreviousDashCooldown;                                    // 0x1611(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W8IQ[0x2];                                   // 0x1612(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreviousSpeed;                                           // 0x1614(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousSpeed2d;                                         // 0x1618(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            PreviousAimDirection;                                    // 0x161C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      PreviousMovementDirection;                               // 0x1628(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousMovementDirectionTime;                           // 0x162C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousInputDirection;                                  // 0x1630(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousInputDirectionTime;                              // 0x1634(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousAcceleration2d;                                  // 0x1638(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousSprintTime;                                      // 0x163C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PreviousBackSpeedModifier;                               // 0x1640(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PreviousIsSprinting;                                     // 0x1644(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1M2D[0xB];                                   // 0x1645(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterMountableAnimInstance
	 * Size -> 0x0040 (FullSize[0x04F0] - InheritedSize[0x04B0])
	 */
	class UTBLCharacterMountableAnimInstance : public UTBLAnimInstance
	{
	public:
		class ACharacterMountableActor*                            CharacterMountedableActor;                               // 0x04A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       LeftCharacter;                                           // 0x04B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       RightCharacter;                                          // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              LeftCharacterMesh;                                       // 0x04C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              RightCharacterMesh;                                      // 0x04C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatState;                                             // 0x04D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ChargePercent;                                           // 0x04D8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CWJI[0x4];                                   // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLCharacterAnimInstance_Playable*                  LeftCharacterAnimBP;                                     // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLCharacterAnimInstance_Playable*                  RightCharacterAnimBP;                                    // 0x04E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnHealthChanged(float Amount, class AActor* Initiator);
		void MountableActorDeadOnStartup();
		void EventOnKilled();
		void EventOnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void AnimNotify_MountableActorKilledAnim_End();
		void AnimNotify_CharacterRecovery_End();
		void AnimNotify_CharacterFire_Action();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCharacterMovement
	 * Size -> 0x07A0 (FullSize[0x1820] - InheritedSize[0x1080])
	 */
	class UTBLCharacterMovement : public UTBLCharacterMovementBaseComponent
	{
	public:
		class FScriptMulticastDelegate                             OnMovementStateChanged;                                  // 0x1080(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJumpPressed;                                           // 0x1090(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnJump;                                                  // 0x10A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnLanded;                                                // 0x10B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintState;                                           // 0x10C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartedFalling;                                        // 0x10D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementSync;                                          // 0x10E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintStop;                                            // 0x10F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVault;                                                 // 0x1100(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlayLadderAnimation;                                   // 0x1110(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnReverseLadderAnimation;                                // 0x1120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPlaySpawnAnimation;                                    // 0x1130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementInput;                                         // 0x1140(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementStateUpdate;                                   // 0x1150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSprintTurn;                                            // 0x1160(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      ForwardSpeedModifier;                                    // 0x1170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BackSpeedModifier;                                       // 0x1174(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StrafeSpeedModifier;                                     // 0x1178(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           SprintStrafeSpeedModifier;                               // 0x117C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           ForwardStrafeSpeedModifier;                              // 0x1184(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           BackStrafeSpeedModifier;                                 // 0x118C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableJump;                                            // 0x1194(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FOC2[0x3];                                   // 0x1195(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DisableSlideMaxAngle;                                    // 0x1198(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintForwardAcceleration;                               // 0x119C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SprintStrafeAcceleration;                                // 0x11A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FChaseMechanicParams                                ChaseMechanicParams;                                     // 0x11A4(0x0020) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UE61[0x4];                                   // 0x11C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLandingSlowDownParams                              LandingSlowDownParams;                                   // 0x11C8(0x0020) Edit, NoDestructor, NativeAccessSpecifierPublic
		float                                                      ViewPitchMinSpinningSpecial;                             // 0x11E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMaxSpinningSpecial;                             // 0x11EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMinStanding;                                    // 0x11F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMaxStanding;                                    // 0x11F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMinCrouching;                                   // 0x11F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchMaxCrouching;                                   // 0x11FC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchInterpSpeed;                                    // 0x1200(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ViewPitchSpinningSpecialInterpSpeed;                     // 0x1204(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSprintTurnParams                                   SprintTurnParams;                                        // 0x1208(0x0028) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		float                                                      DownedCapsuleHalfHeight;                                 // 0x1230(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DownedCapsuleRadius;                                     // 0x1234(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DownedTurnLimit;                                         // 0x1238(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinimumCrouchTime;                                       // 0x123C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AutoSprintDelay;                                         // 0x1240(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DelayPlaySpawnAnimation;                                 // 0x1244(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_U5QZ[0x4];                                   // 0x124C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSpawnState                                         SpawnState;                                              // 0x1250(0x0040) NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bPlayingSpawnAnimation;                                  // 0x1290(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMoveForwardHeld;                                        // 0x1291(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMoveBackwardHeld;                                       // 0x1292(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMoveRightHeld;                                          // 0x1293(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMoveLeftHeld;                                           // 0x1294(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_R3NP[0x3];                                   // 0x1295(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MoveForwardHeldTime;                                     // 0x1298(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveBackwardHeldTime;                                    // 0x129C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveRightHeldTime;                                       // 0x12A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MoveLeftHeldTime;                                        // 0x12A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantsToSprint;                                          // 0x12A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWantsToAutoSprint;                                      // 0x12A9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bForceWalk;                                              // 0x12AA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoSprint;                                             // 0x12AB(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSprintLocked;                                           // 0x12AC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAltAttackWithMovement;                                  // 0x12AD(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGamepadSprint;                                          // 0x12AE(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_G3KK[0x9];                                   // 0x12AF(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    InventoryCanJump;                                        // 0x12B8(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   InventorySpeedPenalty;                                   // 0x12D0(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   PerksSpeedBonus;                                         // 0x12E8(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentAimPenalty;                                       // 0x1300(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentRangedInaccuracy;                                 // 0x1304(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             PreMoveVelocity;                                         // 0x1308(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_P715[0x4];                                   // 0x1314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnPostLockMovement;                                      // 0x1318(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnCrouch;                                                // 0x1328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDash;                                                  // 0x1338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              bIsMovementLocked : 1;                                   // 0x1348(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2Y96[0x3];                                   // 0x1349(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GamepadUsePressedTime;                                   // 0x134C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsAutorunSprinting;                                     // 0x1350(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bForceMaxSprint;                                         // 0x1351(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DJCH[0x2];                                   // 0x1352(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastTickSprintSpeed;                                     // 0x1354(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStatsComponent*                                     Stats;                                                   // 0x1358(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMovementModifierComponent*                          MovementModifiers;                                       // 0x1360(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DefaultMovementSpeed;                                    // 0x1368(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A75I[0x4];                                   // 0x136C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Bool                                    bIsSprinting;                                            // 0x1370(0x0018) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSprintState                                        SprintState;                                             // 0x1388(0x0054) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FSpawnBoost                                         SpawnBoost;                                              // 0x13DC(0x0028) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BBOK[0x4];                                   // 0x1404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Float                                   RepCurrentSpawnBoost;                                    // 0x1408(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicated_FReplicatedSprintTurn                   ReplicatedSprintTurn;                                    // 0x1420(0x0018) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              bIsDowned : 1;                                           // 0x1438(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_731H[0x3];                                   // 0x1439(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        DownedTurnRateId;                                        // 0x143C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bCharacterCollisionEnabled;                              // 0x1440(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MPN0[0x3];                                   // 0x1441(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DashCooldown;                                            // 0x1444(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      JumpCooldown;                                            // 0x1448(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastDashTime;                                            // 0x144C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastLandedTime;                                          // 0x1450(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_69TK[0xC];                                   // 0x1454(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLadderState                                        LadderState;                                             // 0x1460(0x0070) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLadderRootMotionBlend                              LadderRootMotionBlend;                                   // 0x14D0(0x0090) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLadderRotationBlend                                LadderRotationBlend;                                     // 0x1560(0x003C) NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8ANC[0x4];                                   // 0x159C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_Float                                   ChaseBonus;                                              // 0x15A0(0x0018) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ChaseTime;                                               // 0x15B8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bTeleport;                                               // 0x15BC(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KWL1[0x3];                                   // 0x15BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             TeleportLocation;                                        // 0x15C0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            TeleportRotation;                                        // 0x15CC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      TeleportTime;                                            // 0x15D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UHZ9[0x4];                                   // 0x15DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastFindFloorTime;                                       // 0x15E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LastHitDirection;                                        // 0x15E8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFindFloorResult                                    CurrentFollowGround;                                     // 0x15F4(0x0094) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      FallingStartTime;                                        // 0x1688(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M42V[0x4];                                   // 0x168C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_FName                                   CharacterMovementState;                                  // 0x1690(0x0018) Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LastNonZeroVelocity;                                     // 0x16A8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             LastNonZeroAcceleration;                                 // 0x16B4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicated_EMovementDirection                      LastHorizontalInput;                                     // 0x16C0(0x0018) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicated_EMovementDirection                      LastVerticalInput;                                       // 0x16D8(0x0018) Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8OCJ[0x50];                                  // 0x16F0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAimPenalty>                                 ActiveAimPenalties;                                      // 0x1740(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MovementBlockId;                                         // 0x1750(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JCK4[0x4];                                   // 0x1754(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FScaleDirectionParams>                       ActiveScaleDirection;                                    // 0x1758(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        ScaleDirectionalMovementId;                              // 0x1768(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      bMovementBlockEndOnLanding;                              // 0x176C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDismountBlendParams                                DismountBlendParams;                                     // 0x1770(0x0054) NoDestructor, Protected, NativeAccessSpecifierProtected
		int                                                        UpdateSpawnBonusHandle;                                  // 0x17C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      MovementSpeed;                                           // 0x17C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintBaseSpeed;                                         // 0x17CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintMaxSpeed;                                          // 0x17D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintStartTime;                                         // 0x17D4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintStartMinTime;                                      // 0x17D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintTime;                                              // 0x17DC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      SprintDeceleration;                                      // 0x17E0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      StrafeAccelerationModifier;                              // 0x17E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DownedMovementSpeed;                                     // 0x17E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DownedSprintSpeed;                                       // 0x17EC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsCrouchHeld;                                           // 0x17F0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NPF1[0x3];                                   // 0x17F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CrouchStartTime;                                         // 0x17F4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      LastTurnTime;                                            // 0x17F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              bIsPossessed : 1;                                        // 0x17FC(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M8GI[0x23];                                  // 0x17FD(0x0023) MISSED OFFSET (PADDING)

	public:
		void WalkKeyReleased();
		void WalkKeyPressed();
		void UpdateSprint(float DeltaTime);
		void StopCrouch();
		void StartJump();
		void StartDash();
		void StartAutoSprint();
		void SprintTurnTick(float DeltaSeconds);
		void SprintTurnDecelerate();
		void SprintTick(float DeltaSeconds);
		void SprintStartTick(float DeltaSeconds);
		void SprintStart();
		void SprintKeyReleased();
		void SprintKeyPressed();
		void SprintFinished();
		void SprintDecelerateToSprint(float Speed);
		void SprintDecelerateTick(float DeltaSeconds);
		void SprintDecelerate();
		void SetWalkKey(bool bWalk);
		void SetSprintLocked(bool bSprintLock);
		void SetSprintKey(bool bSprint);
		void SetDownedTurnRate(bool bDowned);
		void SetDownedAutonomous();
		void SetAutoSprintKey(bool bSprint);
		void SetAutoSprint(bool bEnable);
		void SetAutorunElapsedTime(float ElapsedTime);
		void SetAltAttackWithMovement(bool bEnable);
		void ServerStartSpawnBonus(const struct FStartSpawnBonus& Params);
		void ServerSetMoveRight(bool bPressed);
		void ServerSetMoveLeft(bool bPressed);
		void ServerSetMoveBackward(bool bPressed);
		void ServerSetDowned(bool bDowned, float ClientTimeStamp);
		void ServerPlaySpawnAnimation(const class FName& Animation, float ActorYaw, float ClientTimeStamp);
		void ServerPlayLadderAnimation(const struct FTBL_FPlayLadderAnimation& Params);
		void ServerMountLadder(float ClientTimeStamp);
		void ServerLadderDismountPressed();
		void ServerEndLadderMovement(const struct FTBL_FEndLadderMovement& Params);
		void ResumeSprintCombatState();
		void PlaySpawnAnimation_Internal(const class FName& Animation);
		void PlaySpawnAnimation(const class FName& Animation);
		void OnRep_ReplicatedSprintTurn();
		void OnRep_RepCurrentSpawnBoost();
		void OnRep_CharacterMovementState();
		void OnLadderAnimationEnded();
		void OnEquippedItemsChanged();
		void OnDismount(class AActor* AttachParent, TBL_EDismountType DismountType);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* CombatState);
		void OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void MoveIgnoreActorRemove(class AActor* ActorToIgnore);
		void MoveIgnoreActorAdd(class AActor* ActorToIgnore);
		struct FVector MoveDirectionToVector(TBL_EMovementDirection Direction);
		float MoveDirectionToAngle(TBL_EMovementDirection Direction);
		void LimitSprintTurnRate(float DeltaTime);
		void LadderDismountReleased();
		void LadderDismountPressed();
		bool IsSprinting();
		bool IsSprintDecelerating();
		void HandleDelaySpawnAnimation();
		float GetSprintTime();
		struct FSprintState GetSprintState();
		class FName GetMovementState();
		float GetMovementSpeed();
		class FName GetMovementInputName();
		struct FVector GetMovementInputDirection(bool bUseLastNonZero);
		TBL_EMovementDirection GetMovementDirection(bool bUseInputDirection, bool bUseLastNonZero);
		TBL_EMovementDirection GetLastVerticalInput();
		TBL_EMovementDirection GetLastHorizontalInput();
		float GetDefaultMovementSpeed();
		float GetChaseBonusPercent();
		void ForceMaxSprint();
		void EndPhysSpawn(bool bDisableRootMotion);
		void EndLadderMovement();
		void EnableCharacterCollision();
		void DownedSprintTick(float DeltaSeconds);
		void DownedSprintStart();
		void DownedSprintFinished();
		void DisableCharacterCollision();
		void ClientMountLadderFailed();
		void ClientForceLadderMovement(bool bDirectionUp);
		bool CanSprintShove();
		bool CanSprintAttack();
		bool CanSprint(bool bStartSprint);
		void BroadcastStartVault(class AVaultMarker* VaultMarker);
		void BroadcastSetCharacterCollision(bool bEnabled);
		void BroadcastPlayLadderAnimation(const class FName& Animation);
		void BroadcastIgnoreActorWhenMoving(class AActor* ActorToIgnore, bool bShouldIgnore);
		void BroadcastDownToUpLadderAnimation();
		void ApplyKnockback(class UMovementSequence* Sequence, class AActor* Initiator);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLChatWidgetStyle
	 * Size -> 0x0910 (FullSize[0x0940] - InheritedSize[0x0030])
	 */
	class UTBLChatWidgetStyle : public USlateWidgetStyleContainerBase
	{
	public:
		struct FTBLChatStyle                                       ChatStyle;                                               // 0x0030(0x0910) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCheatManager
	 * Size -> 0x00C8 (FullSize[0x0140] - InheritedSize[0x0078])
	 */
	class UTBLCheatManager : public UCheatManager
	{
	public:
		unsigned char                                              UnknownData_1SBP[0x8];                                   // 0x0078(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              BPCheatManagerClass[0x28];                               // 0x0078(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class FName                                                AutoAttackName;                                          // 0x00A8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoAttackLoopTime;                                      // 0x00B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoAttackChargeTime;                                    // 0x00B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                AutoAttackHoldName;                                      // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bGodMode;                                                // 0x00C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInvulnerable;                                           // 0x00C1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisableStaminaDrain;                                    // 0x00C2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUnlimitedAmmo;                                          // 0x00C3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRandomAttack;                                           // 0x00C4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bMoveToCharacter;                                        // 0x00C5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRunAway;                                                // 0x00C6(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsAutoAttack;                                           // 0x00C7(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHeldParry;                                            // 0x00C8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bRandomizeLoadout;                                       // 0x00C9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsFOVUncapped;                                          // 0x00CA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPlayerRVOEnabled;                                       // 0x00CB(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerRVOConsiderationRadius;                            // 0x00CC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AutoClimbDirection;                                      // 0x00D0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WXIQ[0x4];                                   // 0x00D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        RandomAttacks;                                           // 0x00D8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        ParryAbilities;                                          // 0x00E8(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLAIController*                                    ClientAIController;                                      // 0x00F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      ExecFileCommands;                                        // 0x0100(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ExecFileDelayTime;                                       // 0x0110(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0TBS[0x24];                                  // 0x0114(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLBPCheatManager*                                  BPCheatManager;                                          // 0x0138(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateVirtualGood();
		void UpdateRunAway(float DeltaTime);
		void UpdateMoveToCharacter(float DeltaTime);
		void UpdateExecFileCommands(float DeltaTime);
		void UpdateAutoAttackHold();
		void UnpauseCharacter();
		void UnpauseAI();
		void UnlimitedAmmo();
		void UncapFOV();
		void ToggleShowBothMeshes();
		void ToggleCameraAnimsAndShakes();
		void Tick(float DeltaTime);
		void TestRPCDesync();
		void TestDrawTime();
		void StopHeldParry();
		void StopExecFile();
		void StopDumpingReplication();
		void StopAllSounds();
		void StartHeldParry();
		void StartDumpingReplication();
		void SpawnAsPeasant();
		void SpamRPC(int NumCalls, int NumBytesPerCall);
		void SkipPushableToEndPoint(class UObject* PushableActor);
		void SimulateLostServerConnection();
		void ShowThirdPersonMesh();
		void ShowServerFollowMesh();
		void ShowFirstPersonMesh();
		void ShowBothMeshes();
		void SetWatchedCharacter();
		void SetStatBase(TBL_EStat Stat, float Value);
		void SetPawnRVO(class ATBLCharacter* Character, bool bEnabled);
		void SetPauseCharacter(bool bPaused);
		void SetPauseAI(bool bPaused);
		void SetHealth(float Value);
		void SetCulture(const class FString& Culture);
		void SetAmmo(int Ammo);
		void SendToTrace(const class FString& Command);
		void SendToAll(const class FString& Command);
		void SendCheatToServerObj(const class FName& CheatComand, class UObject* Obj);
		void SendCheatToServer(const class FName& CheatComand, const class FName& Param);
		void SaveAll(const class FString& ClassName);
		void Revive();
		void RespawnLoadout();
		void RespawnImmediately();
		void ResetHeldParry();
		void RemoveStamina();
		void RechargeSpecialItem();
		void ReceivedCheatFromClientObj(const class FName& CheatCommand, class UObject* Param);
		void ReceivedCheatFromClient(const class FName& CheatCommand, const class FName& Param);
		void RandomizeLoadout(bool bEnable);
		void PushLogs(const class FString& SourcePath, const class FString& DestPath);
		void PushCmdToTrace(const class FString& Cmd);
		void PushCmd(const class FString& Cmd);
		void PromptForRemoteDebugging();
		void ProfileGpuTopMaterials();
		void PrintStats();
		void PlayFromHere();
		void PlayerRVOEnable(float AvoidanceRadius);
		void PlayerRVODisable();
		void PingServer(const class FString& ServerAddress);
		void PauseCharacter();
		void PauseAI();
		void OnPossess();
		void OnKilled();
		void NextLatentCommand();
		void MergeMeshes();
		void MergeMaterials();
		void ManualInterrupt();
		void LoseHelmet();
		void LoadCatapult();
		void LoadAllCustomizationAssets();
		void KillHorse();
		bool IsFOVUncapped();
		bool IsAutoAttacking();
		void Invulnerable();
		void InputAction(const class FName& AttackName, Engine_EInputEvent Event);
		void IgnoreAI();
		void HorseGotoState(const class FName& CombatState, const class FName& HitDirection, int Variant);
		void HorseAutorun(bool bEnable);
		void HideDebugActor();
		void HideBothMeshes();
		void HeldParryLoop();
		void GoToStatePlaying();
		void GotoStateOnComponent(class UCombatStateComponent* Component, const class FName& CombatState, const class FName& HitDirection, int Variant);
		void GotoState(const class FName& CombatState, const class FName& HitDirection, int Variant);
		void GiveHorse();
		void GiveArmoredHorse();
		class ATBLCharacter* GetAnotherCharacter();
		void ForceGC();
		void FakeGameIntent(const class FString& ActivityId);
		void Exi(const class FString& Cmd);
		void ExecFileDelay(float Time, float Variation);
		void ExecFile(const class FString& Filename);
		void EnableHUDPostProcess();
		void DumpReplicationCounts();
		void DumpPlayers();
		void DumpCharacters();
		void DumpCharacterReplicationCounts();
		void DrawUnits(float Distance);
		void DisableStaminaDrain();
		void DisableHUDPostProcess();
		void DestroyClientBot();
		void DestroyAllForcedMoveForTeam(int Team);
		void DebugShowLoadingScreen(const class FString& MapName);
		void DebugHideLoadingScreen();
		void CloseBlueprintDebugMenu();
		void ClientForceGC();
		void ClientBot();
		void ClearReplicationCounts();
		void ClearCharacterRuntimeAssetCache();
		void ClearAllForceMoveToPlayer(int Team);
		void CheckLightingBuilt();
		bool BpCheat(const class FString& Cmd);
		void BotsBecomeGods();
		void BotNearestForceMoveToPlayer(int Team);
		void BotGodsBecomeMortal();
		void BotForceMoveToPlayer(int Team, int bClearOtherForcedMoves);
		void BlueprintDebugMenu();
		void AutoRunAway(bool bEnable);
		void AutoMoveToCharacter(bool bEnable);
		void AutoClimbLadder(float Direction);
		void AutoAttackStart(const class FName& AttackName, float ChargeTime, float LoopTime);
		void AutoAttackLoop();
		void AutoAttackHold(const class FName& AttackName);
		void AutoAttackEx(const class FName& AttackName, float ChargeTime, float LoopTime);
		void AutoAttackEndCharge();
		void AutoAttackClearInternal();
		void AutoAttackClear();
		void AutoAttack(const class FName& AttackName);
		void ApplyStatBonus(TBL_EStat Stat, float Value);
		void ApplyDamage(float Damage, const class FName& DamageType);
		void ApplyCondition(const class FName& Condition);
		void AKStopProfilerCapture();
		void AKStartProfilerCapture(const class FString& Filename);
		void AIObjectiveHere();
		void AddAchievementProgress();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLBPCheatManager
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLBPCheatManager : public UObject
	{
	public:
		class ATBLPlayerController* GetOwnerPlayerController();
		class ATBLCharacter* GetOwnerCharacter();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCloudStorage
	 * Size -> 0x0070 (FullSize[0x00C0] - InheritedSize[0x0050])
	 */
	class UTBLCloudStorage : public UCloudStorageBase
	{
	public:
		unsigned char                                              UnknownData_MJ61[0x70];                                  // 0x0050(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLBoxCollision
	 * Size -> 0x0000 (FullSize[0x04A0] - InheritedSize[0x04A0])
	 */
	class UTBLBoxCollision : public UBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLConsole
	 * Size -> 0x0088 (FullSize[0x01B8] - InheritedSize[0x0130])
	 */
	class UTBLConsole : public UConsole
	{
	public:
		class FScriptMulticastDelegate                             DebugInputChar;                                          // 0x0130(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FString>                                      ClientWhiteList;                                         // 0x0140(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      SuperAdminClientWhiteList;                               // 0x0150(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      SuperAdminServerWhiteList;                               // 0x0160(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      AdminClientWhiteList;                                    // 0x0170(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      AdminServerWhiteList;                                    // 0x0180(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      LimitedAdminClientWhiteList;                             // 0x0190(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FString>                                      LimitedAdminServerWhiteList;                             // 0x01A0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O680[0x8];                                   // 0x01B0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLCrosshairInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLCrosshairInterface : public UInterface
	{
	public:
		void EnableCombatCondition(const class FString& Keybinding, const class FName& Condition, bool Enable, const class FText& HintText);
		void CrosshairWasParried();
		void CrosshairTutorialSuccessMessage(const class FText& CustomText);
		void CrosshairTutorialNeutralMessage(const class FText& CustomText);
		void CrosshairTutorialFailedMessage(const class FText& CustomText);
		void CrosshairProjectileFired();
		void CrosshairPostShuffleMessage();
		void CrosshairPostRespawnMessage(const class FText& ClassName);
		void CrosshairOutOfCombatWarning(bool bShowMessage);
		void CrosshairLostLimbMessage();
		void CrosshairHoldingProgress(float Progress);
		void CrosshairHoldingInitiated(bool IsRangedAttack);
		void CrosshairHoldingCompleted();
		void CrosshairHoldingAborted(bool IsStateEnd, bool Force);
		void CrosshairGameplayEvent(const class FName& Event, bool Enable, float Scaling, bool IsPositive);
		void CrosshairDamageTakenEvent(float Damage, float HitDirection);
		void CrosshairDamageEvent(const class FName& Event, const struct FDamageTakenEvent& DamageTakenEvent, bool IsEnemy);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLDebugCameraController
	 * Size -> 0x0008 (FullSize[0x06B8] - InheritedSize[0x06B0])
	 */
	class ATBLDebugCameraController : public ADebugCameraController
	{
	public:
		int                                                        DisplayDebugScrollDir;                                   // 0x06B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DisplayDebugScrollY;                                     // 0x06B4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void DisplayDebugScrollUp();
		void DisplayDebugScrollReleased();
		void DisplayDebugScrollDown();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLDebugCameraHUD
	 * Size -> 0x0000 (FullSize[0x0348] - InheritedSize[0x0348])
	 */
	class ATBLDebugCameraHUD : public ADebugCameraHUD
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLDemoHUD
	 * Size -> 0x0020 (FullSize[0x0128] - InheritedSize[0x0108])
	 */
	class UTBLDemoHUD : public UWidget
	{
	public:
		unsigned char                                              UnknownData_JJD1[0x20];                                  // 0x0108(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLDemoPlayerController
	 * Size -> 0x0028 (FullSize[0x05D8] - InheritedSize[0x05B0])
	 */
	class ATBLDemoPlayerController : public APlayerController
	{
	public:
		class FScriptMulticastDelegate                             OnHideShowCursor;                                        // 0x05B0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnShowInGameMenu;                                        // 0x05C0(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BS4X[0x4];                                   // 0x05D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsFirstPerson;                                          // 0x05D4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q9JE[0x3];                                   // 0x05D5(0x0003) MISSED OFFSET (PADDING)

	public:
		void ToggleHud();
		void ToggleDebugHud();
		void ToggleCamera();
		void ShowIngameMenu();
		void OnPausePlayback();
		void OnIncreasePlaybackSpeed();
		void OnDecreasePlaybackSpeed();
		bool IsPaused();
		bool IsFirstPerson();
		float GetPlaybackSpeed();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLScreenManager
	 * Size -> 0x0120 (FullSize[0x0440] - InheritedSize[0x0320])
	 */
	class UTBLScreenManager : public UTBLUserWidget
	{
	public:
		unsigned char                                              UnknownData_CH6Q[0x10];                                  // 0x0320(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnGamepadNavigationModeChanged;                          // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnGamepadInputModeChanged;                               // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnButtonCalloutsChanged;                                 // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnKeyBindChanged;                                        // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPreviewMouseButtonDownEvent;                           // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FName, class UTBLUserWidget*>                   RadioGroups;                                             // 0x0380(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FScreenStack>                                ScreenStacks;                                            // 0x03D0(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidget*                                             ActiveCrosshair;                                         // 0x03E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_37RA[0x58];                                  // 0x03E8(0x0058) MISSED OFFSET (PADDING)

	public:
		void SwapNamedScreenToFront(const class FName& ScreenName, class UOverlay* Overlay);
		void SetWidgetAsRadioGroupSelection(const class FName& Group, class UTBLUserWidget* InSelection);
		void SetHudVisibility(bool bVisible);
		void SetActiveCrosshair(class UWidget* Crosshair);
		bool RemoveScreenFromStack(class UTBLScreenWidget* Screen, class UOverlay* Overlay, bool bPopOnly, bool bDontTellScreen);
		void STATIC_PushShowMouseCursorStack(class UObject* Object);
		void PushScreenToStack(class UTBLScreenWidget* Screen, class UOverlay* Overlay);
		void PushNamedScreenToStack(class UTBLScreenWidget* Screen, class UOverlay* Overlay, const class FName& ScreenName);
		void STATIC_PopShowMouseCursorStack(class UObject* Object);
		void PopScreenStack(class UOverlay* Overlay);
		void OpenDebugMenu(class UBlueprintDebugMenuComponent* DebugMenuComponent);
		void GetTopScreen(class UOverlay* Overlay, class FName* OutScreenName, class UTBLScreenWidget** OutScreen);
		TBL_EGamepadNavigationMode GetGamepadNavigationMode();
		TBL_EGamepadInputMode GetGamepadInputMove();
		class UWidget* GetActiveCrosshair();
		void ClearScreenStack(class UOverlay* Overlay);
		void BP_FadeOut(float PlaybackSpeed);
		void BP_FadeIn(float PlaybackSpeed);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLDialogManager
	 * Size -> 0x0010 (FullSize[0x0450] - InheritedSize[0x0440])
	 */
	class UTBLDialogManager : public UTBLScreenManager
	{
	public:
		unsigned char                                              UnknownData_8SLN[0x10];                                  // 0x0440(0x0010) MISSED OFFSET (PADDING)

	public:
		struct FDialogHandle ShowYesNoDialog(const class FText& Title, const class FText& Body, const class FScriptDelegate& YesDelegate, const class FScriptDelegate& NoDelegate, int DialogPriority);
		struct FDialogHandle ShowOkDialog(const class FText& Title, const class FText& Body, const class FScriptDelegate& OkDelegate, int DialogPriority);
		struct FDialogHandle ShowOkCancelDialog(const class FText& Title, const class FText& Body, const class FScriptDelegate& OkDelegate, const class FScriptDelegate& CancelDelegate, int DialogPriority);
		struct FDialogHandle ShowNoButtonsWorkingDialog(const class FText& Title, const class FText& Body, int DialogPriority);
		struct FDialogHandle ShowNoButtonsDialog(const class FText& Title, const class FText& Body, int DialogPriority);
		struct FDialogHandle ShowExitDialog(const class FText& Title, const class FText& Body, const class FScriptDelegate& ExitDelegate, int DialogPriority);
		struct FDialogHandle ShowCancelWorkingDialog(const class FText& Title, const class FText& Body, const class FScriptDelegate& CancelDelegate, int DialogPriority);
		void PushDialog(class UTBLDialogWidget* Dialog, int DialogPriority);
		class UTBLDialogWidget* OnCreateYesNoDialog(const class FText& Title, const class FText& Body);
		class UTBLDialogWidget* OnCreateOkDialog(const class FText& Title, const class FText& Body);
		class UTBLDialogWidget* OnCreateOkCancelDialog(const class FText& Title, const class FText& Body);
		class UTBLDialogWidget* OnCreateNoButtonsWorkingDialog(const class FText& Title, const class FText& Body);
		class UTBLDialogWidget* OnCreateNoButtonsDialog(const class FText& Title, const class FText& Body);
		class UTBLDialogWidget* OnCreateExitDialog(const class FText& Title, const class FText& Body);
		class UTBLDialogWidget* OnCreateCancelWorkingDialog(const class FText& Title, const class FText& Body);
		bool IsDialogActive(const struct FDialogHandle& InDialogHandle);
		struct FDialogHandle CloseDialog(const struct FDialogHandle& DialogHandle);
		struct FDialogHandle ChangeDialogText(const struct FDialogHandle& DialogHandle, const class FText& Title, const class FText& Body);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLScreenWidget
	 * Size -> 0x0090 (FullSize[0x03B0] - InheritedSize[0x0320])
	 */
	class UTBLScreenWidget : public UTBLUserWidget
	{
	public:
		class UTBLScreenManager*                                   ParentScreenManager;                                     // 0x0320(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StackName;                                               // 0x0328(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OVUO[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UUMGSequencePlayer>                   OutroPlayer;                                             // 0x0338(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FXTM[0x50];                                  // 0x0340(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bTopmostScreen;                                          // 0x0390(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsScreenClosed;                                         // 0x0391(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bWantsInputFocusOnTopmost;                               // 0x0392(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bInputUIAndGame;                                         // 0x0393(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        PlayerInputIdAtInputModeChange;                          // 0x0394(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		Engine_EMouseLockMode                                      MouseLockMode;                                           // 0x0398(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bHideCursorDuringCapture;                                // 0x0399(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bModifyVisibilityOnPushAndPop;                           // 0x039A(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		UMG_ESlateVisibility                                       TopmostVisibilty;                                        // 0x039B(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		UMG_ESlateVisibility                                       NonTopmostVisibility;                                    // 0x039C(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPopWhenEscapePressed;                                   // 0x039D(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XWNI[0x2];                                   // 0x039E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TBL_EWeaponAbilitySlotKey>                          BlockedWeaponAbilitySlotKeys;                            // 0x03A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void UpdateNotifications();
		bool ShouldShowMouseCursorOnInputCapture();
		bool ShouldOverrideIsFocusable();
		void RequestPlayerInput(bool WantsInput);
		void PushScreenToParentStack(class UTBLScreenWidget* NextScreen);
		void PopOffParentStack();
		void PlayOutroAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, bool bReverseExisting);
		void PlayIntroAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, bool bReverseExisting);
		void OnResumedScreen();
		void OnPausedScreen();
		void OnOutroAnimationDone(bool bWasScreenClosed);
		void OnOpenedScreen();
		void OnClosedScreen();
		void FireUpdateNotifications();
		void FireDefaultButtonAction(int ButtonIndex);
		void FireButtonAction(const class FName& ButtonID);
		bool BP_OnBlockKeyPress(TBL_EWeaponAbilitySlotKey WeaponAbilitySlotKey);
		bool BlockKeyPress(TBL_EWeaponAbilitySlotKey WeaponAbilitySlotKey);
		void AddButtonAction(const class FName& ButtonID, int ButtonIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLDialogWidget
	 * Size -> 0x0078 (FullSize[0x0428] - InheritedSize[0x03B0])
	 */
	class UTBLDialogWidget : public UTBLScreenWidget
	{
	public:
		unsigned char                                              UnknownData_IT63[0x50];                                  // 0x03B0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_EDialogTypes                                           DialogType;                                              // 0x0400(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KZZY[0x3];                                   // 0x0401(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDialogHandle                                       DialogHandle;                                            // 0x0404(0x0004) NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OLVY[0x18];                                  // 0x0408(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULocalPlayer*                                        m_pLocalOwningPlayer;                                    // 0x0420(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ProcessButtonClick(TBL_EDialogButtons ButtonClicked);
		struct FDialogHandle GetDialogHandle();
		void ChangeText(const class FText& Title, const class FText& Body);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLEngine
	 * Size -> 0x02B0 (FullSize[0x1100] - InheritedSize[0x0E50])
	 */
	class UTBLEngine : public UGameEngine
	{
	public:
		class UClass*                                              HorseClass;                                              // 0x0E50(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              WeaponFistClass;                                         // 0x0E58(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CharacterCombatStatesClass;                              // 0x0E60(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_406J[0x68];                                  // 0x0E68(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              ServerWorld;                                             // 0x0ED0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint64_t                                                   LastFrameTimestamp;                                      // 0x0ED8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        PingFrameNumber;                                         // 0x0EE0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        NetSaturatedCount;                                       // 0x0EE4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint64_t                                                   NetOutBytes;                                             // 0x0EE8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     NetOutTime;                                              // 0x0EF0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetConnections;                                          // 0x0EF8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetSampleCount;                                          // 0x0EFC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     LastFrameTime;                                           // 0x0F00(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     LastNetFlushTime;                                        // 0x0F08(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastOutBytes;                                            // 0x0F10(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        TotalPingSamples;                                        // 0x0F14(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        TotalPingSamplesPerMinute;                               // 0x0F18(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JLNT[0x4];                                   // 0x0F1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    TotalRetryReliableCount;                                 // 0x0F20(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int64_t                                                    TotalRetryReliableBytes;                                 // 0x0F28(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int64_t                                                    TotalRetryUnreliableCount;                               // 0x0F30(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int64_t                                                    TotalRetryUnreliableBytes;                               // 0x0F38(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int64_t                                                    TotalSendFailBytes;                                      // 0x0F40(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     AveragePingTime;                                         // 0x0F48(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     AverageFrameTime;                                        // 0x0F50(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     AveragePingTimePerMinute;                                // 0x0F58(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		double                                                     AverageFrameTimePerMinute;                               // 0x0F60(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        TotalFrames;                                             // 0x0F68(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        TotalFramesPerMinute;                                    // 0x0F6C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFrameTimeBuckets                                   FrameTimeBuckets;                                        // 0x0F70(0x0028) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FFrameTimeBuckets                                   StatFrameTimeBuckets;                                    // 0x0F98(0x0028) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FPingTimeBuckets                                    PingTimeBuckets;                                         // 0x0FC0(0x002C) NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FAvailableCPUBuckets                                AvailableCpu;                                            // 0x0FEC(0x001C) NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      PerMinuteTimer;                                          // 0x1008(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvailableCpuTimer;                                       // 0x100C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AvailableCpuRatio;                                       // 0x1010(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQCS[0x4];                                   // 0x1014(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPerMinuteBucket>                            PerMinuteBuckets;                                        // 0x1018(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetInPackets;                                            // 0x1028(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetInPacketsLost;                                        // 0x102C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetInOutOfOrderPackets;                                  // 0x1030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetOutPackets;                                           // 0x1034(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetOutPacketsLost;                                       // 0x1038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetOutOutOfOrderPackets;                                 // 0x103C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastInPackets;                                           // 0x1040(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastInPacketsLost;                                       // 0x1044(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastInOutOfOrderPackets;                                 // 0x1048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastOutPackets;                                          // 0x104C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastOutPacketsLost;                                      // 0x1050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   LastOutOutOfOrderPackets;                                // 0x1054(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetAutonomousMovementCorrections;                        // 0x1058(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetAutonomousMovementCorrectionBunches;                  // 0x105C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		uint32_t                                                   NetSimulatedMovementCorrections;                         // 0x1060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0PDM[0x4];                                   // 0x1064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		double                                                     LastAutonomousMovementCorrectionTime;                    // 0x1068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTBLHardwareInfo                                    HardwareInfo;                                            // 0x1070(0x0068) Protected, NativeAccessSpecifierProtected
		float                                                      CPUPerfIndex;                                            // 0x10D8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      GPUPerfIndex;                                            // 0x10DC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SkippedServerMoves;                                      // 0x10E0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        SkippedServerMoveFrames;                                 // 0x10E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        LastSkippedServerMoveFrame;                              // 0x10E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AQC1[0x14];                                  // 0x10EC(0x0014) MISSED OFFSET (PADDING)

	public:
		float GetStatMS();
		float GetStatFPS();
		float GetAvailableCPU();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLFrontendGameMode
	 * Size -> 0x0008 (FullSize[0x10E8] - InheritedSize[0x10E0])
	 */
	class ATBLFrontendGameMode : public ATBLGameMode
	{
	public:
		unsigned char                                              UnknownData_0L5U[0x8];                                   // 0x10E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void PlayerRequestSpawn(class ATBLPlayerStart* PlayerStart, class APlayerController* Player, TBL_EFaction Faction, int PawnClass);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLFrontendLevelScriptActor
	 * Size -> 0x0010 (FullSize[0x0270] - InheritedSize[0x0260])
	 */
	class ATBLFrontendLevelScriptActor : public ALevelScriptActor
	{
	public:
		unsigned char                                              UnknownData_N7WR[0x10];                                  // 0x0260(0x0010) MISSED OFFSET (PADDING)

	public:
		void FireLevelEvent(const class FName& EventName);
		void CreateLevelEvent(const class FName& EventName);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameInstancePerformanceCaptureActor
	 * Size -> 0x0000 (FullSize[0x0258] - InheritedSize[0x0258])
	 */
	class ATBLGameInstancePerformanceCaptureActor : public AActor
	{
	public:
		void Run();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameInstance
	 * Size -> 0x0D18 (FullSize[0x0EB0] - InheritedSize[0x0198])
	 */
	class UTBLGameInstance : public UGameInstance
	{
	public:
		unsigned char                                              UnknownData_P7OU[0xD0];                                  // 0x0198(0x00D0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                PendingChatText;                                         // 0x0268(0x0018) BlueprintVisible, Transient, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       PlayingMusicEvent;                                       // 0x0280(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PlayingMusicEvent_PlayingID;                             // 0x0288(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZAH2[0x4];                                   // 0x028C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UAkAudioEvent*>                               PendingStoppedMusicEvents;                               // 0x0290(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              FallbackLoadingScreenMusicEvent[0x28];                   // 0x02A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FString                                              ReportBugURL;                                            // 0x02C8(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UObject*>                                     AsyncLoadedObjects;                                      // 0x02D8(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        ChatHistoryTrimThreshold;                                // 0x02E8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        ChatHistoryTrimToLength;                                 // 0x02EC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        AbbreviatedChatHistoryTrimThreshold;                     // 0x02F0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        AbbreviatedChatHistoryTrimToLength;                      // 0x02F4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        AbbreviatedChatMaxMessages[0xF];                         // 0x02F8(0x003C) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              ChatBlockedMessages[0xF];                                // 0x0334(0x000F) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AbbreviatedChatBlockedMessages[0xF];                     // 0x0343(0x000F) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AllowedClosedCaptionTypes[0x3];                          // 0x0352(0x0003) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XZCB[0x3];                                   // 0x0355(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ClosedCaptionMaxDistanceSq;                              // 0x0358(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LVLG[0x4];                                   // 0x035C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnCustomizationLoaded;                                   // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<uint64_t, class UTexture*>                            AvatarImages;                                            // 0x0370(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HZ1S[0xA];                                   // 0x03C0(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       LightSabresLoaded;                                       // 0x03CA(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_13D8[0x1];                                   // 0x03CB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   ShowBigNotificationOnCL;                                 // 0x03CC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   SavedBigNotificationCL;                                  // 0x03D0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_51S6[0x4];                                   // 0x03D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCheckpoints                                        Checkpoints;                                             // 0x03D8(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QSJH[0x18];                                  // 0x0428(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              WeaponAnimSetsPtr[0x28];                                 // 0x0428(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AbilityConfigPtr[0x28];                                  // 0x0468(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AbilitiesDataTablePtr[0x28];                             // 0x0490(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AbilitiesOverridesDataTablePtr[0x28];                    // 0x04B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AbilitiesOverrideAssetDataTablePtr[0x28];                // 0x04E0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              CustomizationAnimationSetsDataTablePtr[0x28];            // 0x0508(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              KeyDisplayTablePtr[0x28];                                // 0x0530(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              KeyDisplayTextures[0x10];                                // 0x0558(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              GameUpdatesTablePtr[0x28];                               // 0x0568(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              UnknownData_9OCG[0xE8];                                  // 0x0590(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAsyncGlobals                                       AsyncGlobals;                                            // 0x0678(0x0050) NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9C9Y[0x70];                                  // 0x06C8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnMatchmakingQueueStatisticsChanged;                     // 0x0738(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTitleDataUpdated;                                      // 0x0748(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTitleNewsUpdated;                                      // 0x0758(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMotdUpdated;                                           // 0x0768(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DOE2[0x30];                                  // 0x0778(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnNativeSessionStatusChanged;                            // 0x07A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTBLLiveConfig*                                      LiveConfig;                                              // 0x07B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNetConnection*                                      PendingLiveConfigConnection;                             // 0x07C0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              PendingLiveConfigUrl;                                    // 0x07C8(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRefreshProfileDisplayName;                             // 0x07D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FString                                              CachedProfileDisplayName;                                // 0x07E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             StateChanged;                                            // 0x07F8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XIN5[0x8];                                   // 0x0808(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLGameInstancePerformanceCaptureActor*             PerformanceCaptureTool;                                  // 0x0810(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              PerformanceCaptureToolClass;                             // 0x0818(0x0008) ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              WelcomeScreenMap;                                        // 0x0820(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              MainMenuMap;                                             // 0x0830(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              TutorialMap;                                             // 0x0840(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_S4S0[0x178];                                 // 0x0850(0x0178) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bStartedLoadingAbilityConfig;                            // 0x09C8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bStartedLoadingCustomization;                            // 0x09C9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_23C3[0xAE];                                  // 0x09CA(0x00AE) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPremergedMesh>                              PreMergedMeshes;                                         // 0x0A78(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        CurCustPresetIdx;                                        // 0x0A88(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OH61[0xC];                                   // 0x0A8C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ATBLCharacter*                                       PreloadCharacter;                                        // 0x0A98(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bRegisteredWwiseCallback;                                // 0x0AA0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZZ8Y[0x7];                                   // 0x0AA1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWwiseQuery>                                 PendingWwiseQueries;                                     // 0x0AA8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FWwiseQuery>                                 CompleteWwiseQueries;                                    // 0x0AB8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UAHK[0x50];                                  // 0x0AC8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLSaveProfileObject*                               ProfileSaveInstance;                                     // 0x0B18(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class UChatWidget>>                  ChatWidgets;                                             // 0x0B20(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UQGK[0x10];                                  // 0x0B30(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              TitleScreenManagerClass[0x28];                           // 0x0B30(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              MainMenuManagerClass[0x28];                              // 0x0B68(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DemoMainMenuManagerClass[0x28];                          // 0x0B90(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              PlayingMenuManagerClass[0x28];                           // 0x0BB8(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DialogManagerClass[0x28];                                // 0x0BE0(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UTBLDialogManager*                                   DialogManager;                                           // 0x0C08(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              DemoManagerClass[0x28];                                  // 0x0C10(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              DemoModeMainMenuManagerClass[0x28];                      // 0x0C38(0x0028) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              PendingActiveScreenManager;                              // 0x0C60(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              PendingTravelDestination;                                // 0x0C68(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2YQE[0x18];                                  // 0x0C78(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsPendingPartyCreate;                                   // 0x0C90(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DLBE[0x17];                                  // 0x0C91(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDialogHandle                                       TravelDialogHandle;                                      // 0x0CA8(0x0004) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FDialogHandle                                       PairingChangedDialogHandle;                              // 0x0CAC(0x0004) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1OB1[0x10];                                  // 0x0CB0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBlueprintGeneratedClass*                            LoadingScreenConfig;                                     // 0x0CC0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3FNU[0x10];                                  // 0x0CC8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLMessageBus*                                      MessageBus;                                              // 0x0CD8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       FirstLoadCompleted;                                      // 0x0CE0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3M1A[0x177];                                 // 0x0CE1(0x0177) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShowMouseCursor;                                        // 0x0E58(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z1T4[0x7];                                   // 0x0E59(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class UObject>>                      ShowMouseCursorStack;                                    // 0x0E60(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class UObject>>                      ShowMouseCursorStackSuppressors;                         // 0x0E70(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BPCB[0x8];                                   // 0x0E80(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        UnselectedMatchmakingQueueIds;                           // 0x0E88(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O7DZ[0x10];                                  // 0x0E98(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_EGamepadInputMode                                      LastGamepadInputMode;                                    // 0x0EA8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FHA3[0x7];                                   // 0x0EA9(0x0007) MISSED OFFSET (PADDING)

	public:
		void TryLeaveNativeSession();
		void TriggerNativeSessionSettingChange(const class FString& Value);
		void TestValidateDTLSCertificate();
		void TestUserLoginDowngraded();
		void TestRefreshDTLSCertificate();
		void TestNativeInviteUI();
		void TestHandleLoginDowngraded();
		void TestControllerDialog();
		void ShowPlatformSpecificPlayerDetails(class ATBLPlayerState* PlayerState);
		void ShowLoadingScreenDuringPostMatch();
		void ShowFreeWeekendUpsell(int LocalUserNum);
		void SetPresenceExec(const class FString& Presence);
		void SetMatchmakingQueueSelected(const class FName& QueueId, bool IsSelected);
		void SetFirstLoadCompleted(bool IsComplete);
		void ResetProfileData();
		void PushShowMouseCursorStackSuppressor(class UObject* Object);
		void PushShowMouseCursorStack(class UObject* Object);
		void PopShowMouseCursorStackSuppressor(class UObject* Object);
		void PopShowMouseCursorStack(class UObject* Object);
		void PollTitleDataAndNews();
		void OpenNativeInviteUI();
		void OnYesLeaveMatch();
		void OnShowLoadingScreenPostMatch();
		void OnPostMatchEndTimeChanged(float Time);
		void OnPairingChangedYes();
		void OnPairingChangedNo();
		void OnNoLeaveMatch();
		void OnCustomizationApplied(const struct FCustomizationContext& Context);
		void OnConnectControllerDlgOK();
		void ListLoadedStaticMeshWithNegativeScale();
		void LeaveNativeSession();
		bool LastJoinFailed();
		bool IsNativeSessionHost();
		bool IsNativeSessionFull();
		bool IsMatchmakingQueueSelected(const class FName& QueueId);
		bool IsInMainMenuMap();
		bool IsFirstLoadCompleted();
		void GrantFlavorEntitlement(const class FString& Entitlement);
		void GoToTutorialMap();
		bool GetShowMouseCursor();
		int GetNativeSessionMemberCount();
		TBL_EGamepadInputMode GetLastGamepadInputMode();
		class FName GetCurrentState();
		void Disconnect(class UObject* WorldContextObject);
		void ClickedOnMessage();
		void ClickedLeavePartyYes();
		void ClickedLeavePartyNo();
		void ClickedExitGame();
		void ClickedCancelConnect();
		void ClearShowMouseCursorStackSuppressors(bool bUpdateMouseCursorImmediately);
		bool CanUseMatchmaker();
		bool CanLeaveNativeSession();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameModesLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLGameModesLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class ATBLWorldSettings* STATIC_GetTBLWorldSettings(class UObject* WorldContextObject);
		TArray<class ASpawnWave*> STATIC_GetAllSpawnWavesJoinableByController(class UObject* WorldContextObject, class AController* Controller);
		TArray<class ATBLCharacter*> STATIC_GetAllOutOfCombatCharactersForFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		void STATIC_ActivateDeactivateAllSpawnSequencesForFaction(TBL_EFaction Faction, TBL_ESpawnSequenceActivateDeactivateAction Action, class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameplayDebuggingComponent
	 * Size -> 0x07E8 (FullSize[0x08F0] - InheritedSize[0x0108])
	 */
	class UTBLGameplayDebuggingComponent : public UActorComponent
	{
	public:
		TArray<struct FAbilityInvocationDebugInfo>                 InvocationDebugInfo;                                     // 0x0108(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPropertyDebugInfo>                          PropertyDebugInfo;                                       // 0x0118(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPhysicsDebugInfo>                           PhysicsDebugInfo;                                        // 0x0128(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FBonesDebugInfo>                             BonesDebugInfo;                                          // 0x0138(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        BonesDebugNames;                                         // 0x0148(0x0010) Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicationDebugInfo                               ReplicationDebugInfo;                                    // 0x0158(0x0020) Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FDebugProjectileHit                                 DebugProjectileHit;                                      // 0x0178(0x0038) Net, NoDestructor, NativeAccessSpecifierPublic
		struct FDesyncDebugInfo                                    DesyncDebugInfo;                                         // 0x01B0(0x0378) Net, RepNotify, NativeAccessSpecifierPublic
		struct FDesyncDebugInfo                                    ClientDesyncDebugInfo;                                   // 0x0528(0x0378) NativeAccessSpecifierPublic
		TArray<class FName>                                        DebugCategories;                                         // 0x08A0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UTBLComponent*>                               DebuggingComponents;                                     // 0x08B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M70M[0x8];                                   // 0x08C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastTickRate;                                            // 0x08C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MLAD[0x4];                                   // 0x08CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ShowDebugTargetActor;                                    // 0x08D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTBLGameplayDebuggingComponent*                      ClientDebugComponent;                                    // 0x08D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FColor>                                      DebugColors;                                             // 0x08E0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ServerSetDebugTarget(class AActor* DebugTarget);
		void OnRep_DesyncDebugInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameScoringInfo
	 * Size -> 0x0038 (FullSize[0x0290] - InheritedSize[0x0258])
	 */
	class ATBLGameScoringInfo : public AInfo
	{
	public:
		class UDataTable*                                          GameScoringDataTable;                                    // 0x0258(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          TeamScoreFormatDataTable;                                // 0x0260(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         LongshotCurve;                                           // 0x0268(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6WDM[0x20];                                  // 0x0270(0x0020) MISSED OFFSET (PADDING)

	public:
		void PlayerKilled(class AController* Killer, class AController* Killed, class UDamageSource* DamageSource, const struct FDeathEvent& DeathEvent, const struct FDeathDamageTakenEvent& DamageEvent);
		void PawnRevived(class APawn* RevivedPlayer, class APawn* RevivorPlayer);
		void PawnDowned(class APawn* DownedPlayer, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameScoringComponent
	 * Size -> 0x0028 (FullSize[0x0130] - InheritedSize[0x0108])
	 */
	class UTBLGameScoringComponent : public UActorComponent
	{
	public:
		bool                                                       Enabled;                                                 // 0x0108(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DISY[0x7];                                   // 0x0109(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDataTableRowSelection                              ScoringRow;                                              // 0x0110(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CE6E[0x8];                                   // 0x0128(0x0008) MISSED OFFSET (PADDING)

	public:
		int GetScoringValue();
		struct FGameScoringDataTable GetScoringRow();
		void AwardScore(class ATBLPlayerState* PlayerState, TBL_EOnlineStat Stat, int ScoreValueOverride);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameSession
	 * Size -> 0x0398 (FullSize[0x0608] - InheritedSize[0x0270])
	 */
	class ATBLGameSession : public AGameSession
	{
	public:
		unsigned char                                              UnknownData_UUTC[0x271];                                 // 0x0270(0x0271) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsCancellingMatchmaking;                                // 0x04E1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J9FX[0x6];                                   // 0x04E2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnIsMatchmakingChanged;                                  // 0x04E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchmakingCompleted;                                  // 0x04F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMatchmakingCancelled;                                  // 0x0508(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PIJ2[0x90];                                  // 0x0518(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ServerPassword;                                          // 0x05A8(0x0010) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AJ27[0x4C];                                  // 0x05B8(0x004C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MaxNumExtraAdmins;                                       // 0x0604(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool StartServerListQuickMatch(const struct FServerFilterSetting& Filters);
		bool StartMatchmaking(TArray<struct FMatchmakingQueue> Queues);
		void OnServerListRefreshComplete(bool bSuccess, TBL_EServerListType SearchType);
		bool IsMatchmaking();
		bool IsBusy();
		void HandleMatchmakingComplete(const class FName& MatchmadeSessionName, bool bSuccess);
		void HandleMatchmakingCancelled(const class FName& MatchmadeSessionName, bool bSuccess);
		bool CanStartMatchmaking(bool bIsBackfill);
		bool CancelMatchmaking();
		bool CanCancelMatchMaking();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameSingleton
	 * Size -> 0x04A0 (FullSize[0x04C8] - InheritedSize[0x0028])
	 */
	class UTBLGameSingleton : public UObject
	{
	public:
		unsigned char                                              UnknownData_1W7I[0x10];                                  // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UWorld*, class UTextureAtlasManager*>           TextureAtlasManagers;                                    // 0x0038(0x0050) Transient, NativeAccessSpecifierPublic
		TArray<class UObject*>                                     AsyncLoadedObjects;                                      // 0x0088(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V0O2[0x58];                                  // 0x0098(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCharacterCustomizationSettings*                     CharacterCustomizationSettings;                          // 0x00F0(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSynchronousLoad;                                        // 0x00F8(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNDAShown;                                               // 0x00F9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QE2G[0xEE];                                  // 0x00FA(0x00EE) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UPlayerClassData*                                    DefaultPlayerClassDataType;                              // 0x01E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     DefaultPlayerClassDataTypeName;                          // 0x01F0(0x0018) Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          PersonalityEmotesDataTable;                              // 0x0208(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          CustomPersonalityEmotesDataTable;                        // 0x0210(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPersonalityEmoteTableRow>                   PersonalityRows;                                         // 0x0218(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FCustomPersonalityEmotesTableRow>            CustomPersonalityRows;                                   // 0x0228(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBlueprintGeneratedClass*                            OnlineConfigClass;                                       // 0x0238(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     CompositeMaterialName;                                   // 0x0240(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterial*                                           CompositeMaterial;                                       // 0x0258(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     HeraldryRenderMaterialName;                              // 0x0260(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterial*                                           HeraldryRenderMaterial;                                  // 0x0278(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UCharacterCustomization*>                     CustomizationPresets;                                    // 0x0280(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UDefaultWeaponCustomization*>                 DefaultWeaponsCustomizations;                            // 0x0290(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UDefaultCharacterCustomization*>              DefaultCharacterCustomizations;                          // 0x02A0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<TBL_EOnlineStat, class UProgressionSpec*>             ProgressionSpec;                                         // 0x02B0(0x0050) NativeAccessSpecifierPublic
		TMap<TBL_EWeaponTag, TBL_EOnlineStat>                      WeaponTagToStat;                                         // 0x0300(0x0050) NativeAccessSpecifierPublic
		TMap<TBL_ECharacterClass, TBL_EOnlineStat>                 CharacterClassToStat;                                    // 0x0350(0x0050) NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     HorseClassName;                                          // 0x03A0(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     WeaponFistClassName;                                     // 0x03B8(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftObjectPath                                     CharacterCombatStatesClasssName;                         // 0x03D0(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, int>                                   WeaponActionSwitchEvents;                                // 0x03E8(0x0050) NativeAccessSpecifierPublic
		TMap<class FString, int>                                   CharacterExertionSwitchEvents;                           // 0x0438(0x0050) NativeAccessSpecifierPublic
		TArray<class UObject*>                                     CachedClassDefaultObjects;                               // 0x0488(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureAtlasInfo*                                   TextureAtlasDataAsset;                                   // 0x0498(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSoftObjectPath                                     TextureAtlasDataAssetName;                               // 0x04A0(0x0018) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCustomizationLoadingManager*                        CustomizationLoadingManager;                             // 0x04B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z23D[0x8];                                   // 0x04C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLevelAdded(class ULevel* Level, class UWorld* World);
		TArray<class AActor*> GetActorsWithTag(const class FName& Tag, class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameUpdateContentWidget
	 * Size -> 0x0000 (FullSize[0x0320] - InheritedSize[0x0320])
	 */
	class UTBLGameUpdateContentWidget : public UTBLUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameUpdatesLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLGameUpdatesLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_ShouldShowGameUpdate(const struct FGameUpdateData& GameUpdateData);
		void STATIC_SetIsGameUpdateSeen(const class FString& UpdateVersion, class UObject* WorldContextObject, bool IsSeen);
		int STATIC_GetUnseenGameUpdatesCount(class UObject* WorldContextObject);
		bool STATIC_GetNewestGameUpdate(struct FGameUpdateData* OutGameUpdateData, class UObject* WorldContextObject, bool ShouldCheckIfSeen);
		bool STATIC_GetIsGameUpdateSeen(const class FString& UpdateVersion, class UObject* WorldContextObject);
		bool STATIC_GetIsGameUpdateNewest(const struct FGameUpdateData& GameUpdateData, class UObject* WorldContextObject, bool ShouldCheckIfSeen);
		bool STATIC_GetIsGameUpdateActive(const struct FGameUpdateData& GameUpdateData);
		bool STATIC_GetHasUnseenGameUpdates(class UObject* WorldContextObject);
		void STATIC_GetGameUpdates(TArray<struct FGameUpdateData>* OutGameUpdates, class UObject* WorldContextObject, unsigned char Count);
		bool STATIC_GetGameUpdateData(const class FName& UpdateVersion, struct FGameUpdateData* OutGameUpdateData, class UObject* WorldContextObject);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.GamepadLookResponseCurves
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UGamepadLookResponseCurves : public UDataAsset
	{
	public:
		TArray<class UCurveFloat*>                                 Curves;                                                  // 0x0030(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CloudUserSettings
	 * Size -> 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
	 */
	class UCloudUserSettings : public UObject
	{
	public:
		unsigned char                                              UnknownData_1EXU[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   SettingsVersion;                                         // 0x002C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		uint32_t                                                   UserChangelist;                                          // 0x0030(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FOV;                                                     // 0x0034(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ECameraStyle                                           CameraStyle;                                             // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoSprintEnabled;                                      // 0x0039(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAltAttackWithMovementEnabled;                           // 0x003A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShiftToWalkEnabled;                                     // 0x003B(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bToggleSprintEnabled;                                    // 0x003C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBeginnerHintsEnabled;                                   // 0x003D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAdvancedHintsEnabled;                                   // 0x003E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bSuicideAfterNewClassEnabled;                            // 0x003F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bToggleCrouchEnabled;                                    // 0x0040(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bLoadoutDisplayOnFirstDeath;                             // 0x0041(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bChatEnabled;                                            // 0x0042(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShowPlayerVOInChat;                                     // 0x0043(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableCombatNumbers;                                    // 0x0044(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableHeadBob;                                          // 0x0045(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8Q5U[0x2];                                   // 0x0046(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GamepadXSensitivty;                                      // 0x0048(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadYSensitivty;                                      // 0x004C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadXFocusSensitivity;                                // 0x0050(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadYFocusSensitivity;                                // 0x0054(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMouseYInverted;                                         // 0x0058(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bGamepadYInverted;                                       // 0x0059(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGamepadLookResponseCurveStyle                         GamepadResponseCurveStyle;                               // 0x005A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OVTH[0x1];                                   // 0x005B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GamepadLeftStickDeadzone;                                // 0x005C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadRightStickDeadzone;                               // 0x0060(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadLeftTriggerDeadzone;                              // 0x0064(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GamepadRightTriggerDeadzone;                             // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bMeleeAimAssistEnabled;                                  // 0x006C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRangedAimAssistEnabled;                                 // 0x006D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QPV9[0x2];                                   // 0x006E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AimAssistFrictionPercentage;                             // 0x0070(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGoreLevel                                             GoreLevel;                                               // 0x0074(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDynamicCrosshairEnabled;                                // 0x0075(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EAllyMarkerLevel                                       AllyMarkerLevel;                                         // 0x0076(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHintsEnabled;                                           // 0x0077(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EKillFeedFilter                                        KillFeedFilter;                                          // 0x0078(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_969P[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MasterVolume;                                            // 0x007C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GameVolume;                                              // 0x0080(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VOVolume;                                                // 0x0084(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AnnouncerVolume;                                         // 0x0088(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AmbientVolume;                                           // 0x008C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MusicMasterVolume;                                       // 0x0090(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MusicDynamicVolume;                                      // 0x0094(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MusicOutOfGameVolume;                                    // 0x0098(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ReflectionVolume;                                        // 0x009C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayAudioInBackground;                                  // 0x00A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bVoiceChatEnabled;                                       // 0x00A1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bVoiceWithFriendsAndPartyOnly;                           // 0x00A2(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              VoiceChatActivation;                                     // 0x00A3(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VoiceTransmitVolume;                                     // 0x00A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      VoiceReceiveVolume;                                      // 0x00A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MotionBlurAmount;                                        // 0x00AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TAASharpen;                                              // 0x00B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableCrossPlayMatchmaking;                            // 0x00B4(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasAcceptedNDA;                                   // 0x00B5(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasPlayedTutorial;                                // 0x00B6(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasAcceptedPurchaseDisclaimer;                    // 0x00B7(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTBLCustomizationSaveSettings                       CustomizationSettings;                                   // 0x00B8(0x0058) NativeAccessSpecifierPublic
		struct FTBLGameUpdateSettings                              GameUpdateSettings;                                      // 0x0110(0x0010) NativeAccessSpecifierPublic
		unsigned char                                              bServerBrowserHideFullServers : 1;                       // 0x0120(0x0001) BIT_FIELD SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KD0Z[0x3];                                   // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   bServerBrowserFreeSlotLimit;                             // 0x0124(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bServerBrowserHideEmptyServers : 1;                      // 0x0128(0x0001) BIT_FIELD SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              bServerBrowserHideHighPingServers : 1;                   // 0x0128(0x0001) BIT_FIELD SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       PreferMotionBlur;                                        // 0x0129(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_49D3[0x2];                                   // 0x012A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AlwaysOnMusicGameVolume;                                 // 0x012C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShuffleLoadout;                                         // 0x0130(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RWMJ[0x7];                                   // 0x0131(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameUserSettings
	 * Size -> 0x0160 (FullSize[0x0280] - InheritedSize[0x0120])
	 */
	class UTBLGameUserSettings : public UGameUserSettings
	{
	public:
		class UTBLOptionsScreen*                                   OptionsScreen;                                           // 0x0120(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCloudUserSettings*                                  CloudUserSettings;                                       // 0x0128(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4M2S[0x50];                                  // 0x0130(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ResolutionScaleModifier;                                 // 0x0180(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        PreferredDLSSOperatingMode;                              // 0x0184(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_11EQ[0x8];                                   // 0x0188(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		SlateCore_EColorVisionDeficiency                           ColorVisionDeficiency;                                   // 0x0190(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZXZO[0x3];                                   // 0x0191(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        ColorVisionDeficiencyCorrectionStrength;                 // 0x0194(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_25XM[0xC];                                   // 0x0198(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDisableCrossPlayMatchmaking;                            // 0x01A4(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W4WG[0x3];                                   // 0x01A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GUIScale;                                                // 0x01A8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IYLJ[0xC];                                   // 0x01AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		uint32_t                                                   TBLVersion;                                              // 0x01B8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bConsoleEnabled;                                         // 0x01BC(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              SmoothedFrameRateRange;                                  // 0x01BD(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableUpdateRateOptimizations;                           // 0x01BE(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D36K[0x1];                                   // 0x01BF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MouseSensitivity;                                        // 0x01C0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MouseFocusSensitivity;                                   // 0x01C4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHeadphonesMode;                                         // 0x01C8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_V8LK[0x3];                                   // 0x01C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      RagdollLifetime;                                         // 0x01CC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bRagdollEnabled;                                         // 0x01D0(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LD0W[0x3];                                   // 0x01D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        BloodDecalLifetime;                                      // 0x01D4(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MotionBlurQuality;                                       // 0x01D8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Gamma;                                                   // 0x01DC(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxFPS;                                                  // 0x01E0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       DFAO;                                                    // 0x01E4(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAmbientFXEnabled;                                       // 0x01E5(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3HCG[0x2];                                   // 0x01E6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        AmbientCorpseQuality;                                    // 0x01E8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EProConsoleOption                                      ProConsoleSetting;                                       // 0x01EC(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EHapticsVolumeSettings                                 HapticsVolumeSetting;                                    // 0x01ED(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseAdaptiveTriggers;                                    // 0x01EE(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_29MS[0x1];                                   // 0x01EF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        PreferrredIntelVRSSetting;                               // 0x01F0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ENYR[0x4];                                   // 0x01F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              PreferredFaction;                                        // 0x01F8(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3RME[0x7];                                   // 0x01F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UCurveFloat*>                                 GamepadLookResponseCurves;                               // 0x0200(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N9SF[0x40];                                  // 0x0210(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MotionBlurAmountDefault;                                 // 0x0250(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AJPF[0x4];                                   // 0x0254(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MotionBlurAmountMax;                                     // 0x0258(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O42R[0x24];                                  // 0x025C(0x0024) MISSED OFFSET (PADDING)

	public:
		void SetServerBrowserNumFreeSlotServers(int Num);
		void SetServerBrowserHideHighPingEnabled(bool bEnabled);
		void SetServerBrowserHideFullServers(bool bEnabled);
		void SetServerBrowserHideEmptyServersEnabled(bool bEnabled);
		void SetPreferredFaction(unsigned char InPreferredFaction);
		void SetDX12Enabled(bool Value);
		void SaveCloudUserSettingsIfDirty();
		void OnReadUserFileComplete(const struct FPlatformInterfaceDelegateResult& Result);
		bool IsServerBrowserHideHighPingEnabled();
		bool IsServerBrowserHideFullServersEnabled();
		bool IsServerBrowserHideEmptyServersEnabled();
		bool IsRagdollEnabled();
		bool IsLoadoutDisplayOnFirstDeathEnabled();
		bool IsHeadBobEnabled();
		bool IsGamepadYInverted();
		bool IsDynamicCrosshairEnabled();
		bool IsDX12Enabled();
		bool IsCombatNumbersEnabled();
		bool IsAmbientFXEnabled();
		int GetServerBrowserNumFreeSlotServers();
		unsigned char GetPreferredFaction();
		class UTBLOptionsScreen* GetOptionsScreen();
		int GetMotionBlurQuality();
		float GetMasterVolume();
		TBL_EKillFeedFilter GetKillFeedFilter();
		TBL_EGoreLevel GetGoreLevel();
		bool GetEnableCrossPlayMatchmaking();
		float GetBloodDecalLifeTime();
		int GetAmbientCorpseQuality();
		TBL_EAllyMarkerLevel GetAllyMarkerLevel();
		bool AreHintsEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLGameViewportClient
	 * Size -> 0x0098 (FullSize[0x03C8] - InheritedSize[0x0330])
	 */
	class UTBLGameViewportClient : public UGameViewportClient
	{
	public:
		bool                                                       IsListeningForKeybinding;                                // 0x0330(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableDemoDebugInfo;                                   // 0x0331(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2W6C[0x76];                                  // 0x0332(0x0076) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class ULoadingScreenPanelWidget*                           LoadingScreenPanelUserWidget;                            // 0x03A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KE83[0x18];                                  // 0x03B0(0x0018) MISSED OFFSET (PADDING)

	public:
		void FadeOutLoadingPanel(bool bIsInitialLoadingScreen);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLHorseAnimInstance
	 * Size -> 0x0220 (FullSize[0x06D0] - InheritedSize[0x04B0])
	 */
	class UTBLHorseAnimInstance : public UTBLAnimInstance
	{
	public:
		class FScriptMulticastDelegate                             OnAnimNotifyStepEvent;                                   // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic
		class AHorse*                                              Horse;                                                   // 0x04C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UHorseMovement*                                      HorseMovement;                                           // 0x04C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsDead;                                                  // 0x04D0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasRider;                                                // 0x04D1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L1XJ[0x6];                                   // 0x04D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLCharacterAnimInstance_Playable*                  RiderAnimBP;                                             // 0x04D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatState;                                             // 0x04E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                MovementState;                                           // 0x04E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                PreviousMovementState;                                   // 0x04F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentSpeed;                                            // 0x04F8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentGroundSpeed;                                      // 0x04FC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementDirection;                                       // 0x0500(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AimDirection;                                            // 0x0504(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementAcceleration;                                    // 0x0508(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            SlopeAngle;                                              // 0x050C(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      SlopeWeight;                                             // 0x0518(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementStateMaxSpeed;                                   // 0x051C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MovementStateWeight;                                     // 0x0520(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StrafeWeight;                                            // 0x0524(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnRate;                                                // 0x0528(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TurnRateAccel;                                           // 0x052C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLunge;                                                 // 0x0530(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EARE[0x3];                                   // 0x0531(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      PreviousSpeed;                                           // 0x0534(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        CurrentAttackMontage;                                    // 0x0538(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimMontage*                                        DismountMontage;                                         // 0x0540(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              PreviewAnimationSet;                                     // 0x0548(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             DeathMontages;                                           // 0x0550(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             MountUpSections;                                         // 0x05A0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             RiderCrowdControlMontage;                                // 0x05F0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FName, class FName>                             RiderCrowdControlMontage1P;                              // 0x0640(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class FName>                                        AttackCombatStates;                                      // 0x0690(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase;                                        // 0x06A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CK8H[0x28];                                  // 0x06A8(0x0028) MISSED OFFSET (PADDING)

	public:
		void UpdateFootStepSounds(float DeltaSeconds, bool bHidden);
		void StopDismountAnimation();
		void PlayMountAnimation(const class FName& AnimationName);
		void PlayDismountAnimation(const class FName& AnimationName);
		void OnStartAttack();
		void OnSignificanceChanged(TBL_ECharacterSignificanceLevel InSignificance);
		void OnRiderCombatStateEvent(class AActor* Actor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnRiderCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnPostDamage(const struct FDamageTakenEvent& DamageEvent, const struct FPostDamageEventInfo& PostDamageInfo);
		void OnMovementActionStarted(const class FName& MovementName, const struct FRotator& Direction);
		void OnMovementActionFinished(const class FName& MovementName);
		void OnMounted(class ATBLCharacter* Driver);
		void OnLanded(const struct FLandedResult& LandedResult);
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnKickNoDriver();
		void OnInterpToMountLocation(const class FName& AnimationName, class ATBLCharacter* Character);
		void OnDismounted(class ATBLCharacter* Driver, TBL_EDismountType DismountType);
		void OnCrowdControlNoDamage(class AActor* OwningActor, const class FName& InCombatState, const struct FCrowdControlParams& CrowdControlParams);
		void OnCrowdControl(const class FName& InCombatState, const struct FAnimDamageParams& DamageEvent, TBL_ECrowdControlVariant CrowdControlVariant);
		void OnCombatStateEvent(class AActor* Actor, const class FName& EventName, const struct FAttackInfo& EventAttackInfo);
		void OnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void OnAnimationSetChanged(class UClass* AnimationSet);
		bool IsPlayingMountAnimation();
		void EventOnWantsToGallop(bool bWantsToGallop);
		void EventOnStartDismount(const class FName& Direction);
		void EventOnStartAttack(const class FName& InAbilityName, const class FName& InCombatState, const class FName& InComboState, class UAttackType* InAttackType);
		void EventOnStagger(const struct FAnimDamageParams& DamageEvent);
		void EventOnRiderCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void EventOnMovementStateChanged(const class FName& InMovementState, const class FName& InPreviousMovementState);
		void EventOnMovementActionStarted(const class FName& MovementName, const struct FRotator& Direction);
		void EventOnMounted(const class FName& Direction);
		void EventOnLanded(const struct FLandedResult& LandedResult);
		void EventOnKnockdown(const struct FAnimDamageParams& DamageEvent);
		void EventOnKilled();
		void EventOnInterrupt(const struct FAnimDamageParams& DamageEvent);
		void EventOnDismounted(TBL_EDismountType DismountType);
		void EventOnCombatStateChanged(class AActor* Actor, const class FName& PreviousState, const class FName& NewState, const struct FAttackInfo& EventAttackInfo, class UCombatState* InCombatState);
		void EventDamageNoInterrupt(const struct FAnimDamageParams& DamageEvent);
		void AnimNotify_DeathAnim_End();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLHUD
	 * Size -> 0x05A0 (FullSize[0x08E8] - InheritedSize[0x0348])
	 */
	class ATBLHUD : public AHUD
	{
	public:
		bool                                                       bEnableCrosshair;                                        // 0x0348(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableProjectileControl;                                // 0x0349(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDrawHudMarkers;                                         // 0x034A(0x0001) BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2HOC[0x5];                                   // 0x034B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture*                                            DragHUDTexture;                                          // 0x0350(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ProjectileControlRadius;                                 // 0x0358(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           MouseDelta;                                              // 0x035C(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N6YY[0x4];                                   // 0x0364(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAbilityDrawInfo>                            AbilityDrawInfos;                                        // 0x0368(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FAbilityDescriptionInfo>                     AbilityDescriptionInfos;                                 // 0x0378(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FEffectDrawInfo>                             EffectDrawInfos;                                         // 0x0388(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CrosshairChargingPercentage;                             // 0x0398(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAbilityHasValidTarget;                                  // 0x039C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6QQM[0x2B];                                  // 0x039D(0x002B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FImportantGameMsg>                           ImportantGameMessageQueue;                               // 0x03C8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        NextImportantMessageId;                                  // 0x03D8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           CrosshairOffset;                                         // 0x03DC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RBJ0[0x4];                                   // 0x03E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              ActorUnderCrosshair;                                     // 0x03E8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxActorUnderCrosshairDistance;                          // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableHud;                                             // 0x03F4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableFriendlyIFFHudMarker;                            // 0x03F5(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3I50[0x2];                                   // 0x03F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBroadcastObjectiveMessage;                             // 0x03F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBroadcastCrosshairMessage;                             // 0x0408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBroadcastActorUnderCrosshairChanged;                   // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      TimeToDelayShowingPostGame;                              // 0x0428(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7CNA[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             DrawDebug;                                               // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M09F[0x28];                                  // 0x0440(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      TimeLengthOfObjectiveMessages;                           // 0x0468(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TimeLengthOfCrosshairMessages;                           // 0x046C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  HudMarkerDetailsMaterial;                                // 0x0470(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  HudMarkerCrossHairMaterial;                              // 0x0478(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            RadialVOMID;                                             // 0x0480(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector2D>                                   RadialAngles;                                            // 0x0488(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadialMouseSensitivity;                                  // 0x0498(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      RadialCentreRadiusSizeSquared;                           // 0x049C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           HudMarkerFullSize;                                       // 0x04A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           HudMarkerReducedSize;                                    // 0x04A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         HudMarkerScaleCurve;                                     // 0x04B0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerOpacity;                                        // 0x04B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerReducedOpacity;                                 // 0x04BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerReductionStart;                                 // 0x04C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerReductionEnd;                                   // 0x04C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerDetailsOpacity;                                 // 0x04C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerDetailsFadeStart;                               // 0x04CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerDetailsFadeEnd;                                 // 0x04D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerTextOffsetPixels;                               // 0x04D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerMaxDistance;                                    // 0x04D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerMinimumScale;                                   // 0x04DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HudMarkerFontColor;                                      // 0x04E0(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      HudMarkerFontInfo;                                       // 0x04F0(0x0058) Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerScreenRadius;                                   // 0x0548(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHudMarkerFontOutlined;                                // 0x054C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4RBR[0x3];                                   // 0x054D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        HudMarkerFontOutlineColor;                               // 0x0550(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsHudMarkerFontShadowed;                                // 0x0560(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A6PR[0x3];                                   // 0x0561(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        HudMarkerFontShadowColor;                                // 0x0564(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           HudMarkerFontShadowOffset;                               // 0x0574(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           HudMarkerDetailsFullSize;                                // 0x057C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      HudMarkerDetailsOffsetPixels;                            // 0x0584(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bClampPlayerMarkersToScreen;                             // 0x0588(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L1YK[0x7];                                   // 0x0589(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInterface*                                  FriendlyIFFHudMarkerMaterial;                            // 0x0590(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           IFFHudMarkerFullSize;                                    // 0x0598(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           IFFHudMarkerReducedSize;                                 // 0x05A0(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           FriendlyHealthFullSize;                                  // 0x05A8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      FriendlyMarkerMaxDistance;                               // 0x05B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnemyMarkerMaxDistance;                                  // 0x05B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        MaxPlayerNameCharsToRender;                              // 0x05B8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      EnemyNameplateMaxDistance;                               // 0x05BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseTeamColorForHealthBar;                               // 0x05C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TI0K[0x3];                                   // 0x05C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        HealthBarFillColor;                                      // 0x05C4(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        HealthBarEmptyColor;                                     // 0x05D4(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        FriendlyMarkerColor;                                     // 0x05E4(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        EnemyMarkerColor;                                        // 0x05F4(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IFFHudMarkerOpacity;                                     // 0x0604(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      IFFHudMarkerReducedOpacity;                              // 0x0608(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             IFFOffset;                                               // 0x060C(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                IFFBoneName;                                             // 0x0618(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerNameOffsetPixels;                                  // 0x0620(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseTeamColorForIffMarkerAndNameplate;                   // 0x0624(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6XS7[0x3];                                   // 0x0625(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<TBL_EFaction, struct FLinearColor>                    FontColorsByFaction;                                     // 0x0628(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<TBL_EFaction, struct FLinearColor>                    FontOutlineColorsByFaction;                              // 0x0678(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        FriendlyNameFontColor;                                   // 0x06C8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        EnemyNameFontColor;                                      // 0x06D8(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSlateFontInfo                                      PlayerNameFontInfo;                                      // 0x06E8(0x0058) Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlayerNameFontOutlined;                               // 0x0740(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DC7Y[0x3];                                   // 0x0741(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        FriendlyNameFontOutlineColor;                            // 0x0744(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        EnemyNameFontOutlineColor;                               // 0x0754(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsPlayerNameFontShadowed;                               // 0x0764(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_27S7[0x3];                                   // 0x0765(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLinearColor                                        PlayerNameFontShadowColor;                               // 0x0768(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           PlayerNameFontShadowOffset;                              // 0x0778(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           DistanceFactorMultiplier;                                // 0x0780(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           OffscreenPlayerFakeSize;                                 // 0x0788(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerNameDistFadeMin;                                   // 0x0790(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PlayerNameDistFadeMax;                                   // 0x0794(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisplayFriendlyHealth;                                  // 0x0798(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDisablePlayerNamePlates;                                // 0x0799(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyShowNamesOnTeammates;                               // 0x079A(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOnlyShowMarkersOnVisiblePawns;                          // 0x079B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      NonVisiblePawnMarkerOpacity;                             // 0x079C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCombatHudMessage                                   CurrentCombatHudMessage;                                 // 0x07A0(0x0010) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HAG5[0x70];                                  // 0x07B0(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFont*                                               BigFont;                                                 // 0x0820(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFont*                                               NormalFont;                                              // 0x0828(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_45DD[0x50];                                  // 0x0830(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        HudMarkerPoolSize;                                       // 0x0880(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WHSC[0x4];                                   // 0x0884(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    UnusedPlayerMIDs;                                        // 0x0888(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UMaterialInstanceDynamic*>                    AllMarkerMIDs;                                           // 0x0898(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7F1G[0x14];                                  // 0x08A8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           CacheCanvasSize;                                         // 0x08BC(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CacheMouseSesnitivity;                                   // 0x08C4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int                                                        DrawHudFlags;                                            // 0x08C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      RadialVOGamepadDeadzone;                                 // 0x08CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       bAllowGamepadDeselect;                                   // 0x08D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D9BZ[0x3];                                   // 0x08D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      GamepadDeadstickDeselectDelay;                           // 0x08D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           LastValidGamepadAxis;                                    // 0x08D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_686N[0x8];                                   // 0x08E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowTeamSelectScreen(bool bGameStart);
		void ShowLoadoutScreenFirstTime();
		void ShowLoadoutScreen();
		void ShowIngameMenu();
		void ShowHint(const class FText& HintToShow, const class FText& HintTitle, const class FName& HintTableRowName);
		void ShowHideRadialEmote(bool Show);
		void SetShowDebugTargetActor(class AActor* Actor);
		void SetRadialVOMaterial(class UMaterialInstanceDynamic* inRadialVOMID);
		void SetMiniMapVisibility(bool Visible);
		void RequestGuiBackground(bool bImmediate);
		void ReleaseGuiBackgroundRequest();
		void PS4TouchpadPressed();
		void OnPossessedPawn(class APawn* NewPawn);
		void NotifyPossessedPawn(class APawn* NewPawn);
		void InGameMenuReleased();
		void InGameMenuPressed();
		class AActor* GetShowDebugTargetActor();
		void GetRadialVOMouseAngle(int* ButtonIndex, bool* RadialDeselected, struct FVector2D* MousePositionByCanvas);
		bool GetImportantMessage(struct FImportantGameMsg* ImportantMessageOut);
		struct FVector2D GetCrosshairPositionInViewport();
		void GamepadShowEmoteWheel();
		void GamepadHideEmoteWheel();
		void ForceClearHint();
		void DrawMaterialSimpleWithTriangles(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
		void DrawHUD();
		void ClearHint();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLKeymapWidget
	 * Size -> 0x0010 (FullSize[0x03C0] - InheritedSize[0x03B0])
	 */
	class UTBLKeymapWidget : public UTBLScreenWidget
	{
	public:
		class FScriptMulticastDelegate                             OnClosedDelegate;                                        // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLKeymapWidgetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLKeymapWidgetInterface : public UInterface
	{
	public:
		void ToggleKeymap();
		class UTBLKeymapWidget* GetKeymapWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLLevelScriptActor
	 * Size -> 0x0000 (FullSize[0x0260] - InheritedSize[0x0260])
	 */
	class ATBLLevelScriptActor : public ALevelScriptActor
	{
	public:
		void OnWarmupComplete();
		void OnMatchStateChanged(const class FName& NewState);
		void GameStateSetup();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLLiveConfig
	 * Size -> 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
	 */
	class UTBLLiveConfig : public UObject
	{
	public:
		class FScriptMulticastDelegate                             OnLiveConfigLoaded;                                      // 0x0028(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class FString                                              CachedSerializedJson;                                    // 0x0038(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              UrlDownloadedFrom;                                       // 0x0048(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable*                                          DefaultAbilitiesOverride;                                // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDataTable*                                          LiveAbilitiesOverride;                                   // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSoftObjectPath>                             StatsTables;                                             // 0x0068(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UDataTable*>                                  DefaultStatsTables;                                      // 0x0078(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UDataTable*, class UDataTable*>                 LiveStatsTables;                                         // 0x0088(0x0050) NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLLoadingThrobberContainer
	 * Size -> 0x0010 (FullSize[0x0118] - InheritedSize[0x0108])
	 */
	class UTBLLoadingThrobberContainer : public UWidget
	{
	public:
		unsigned char                                              UnknownData_DP1C[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLLocalMessage
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLLocalMessage : public ULocalMessage
	{
	public:
		void STATIC_UnpackData(int Data, unsigned char* Byte, int* Value);
		int STATIC_PackData(unsigned char Byte, int Value);
		void OnMessageReceived(class APlayerController* Receiver, int Data, class APlayerState* PlayerStateA, class APlayerState* PlayerStateB, class UObject* Object);
		void STATIC_BroadcastPrivateLocalMessage(class APlayerController* PlayerController, class UClass* MessageClass, int Data, class APlayerState* PlayerStateA, class APlayerState* PlayerStateB, class UObject* Object);
		void STATIC_BroadcastLocalMessage(class UObject* WorldContextObject, class UClass* MessageClass, int Data, class APlayerState* PlayerStateA, class APlayerState* PlayerStateB, class UObject* Object);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLLocalMessageGameplayEvent
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLLocalMessageGameplayEvent : public UTBLLocalMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CloudBlockRecentPlayers
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class UCloudBlockRecentPlayers : public UObject
	{
	public:
		unsigned char                                              UnknownData_1FM8[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        UserChangelist;                                          // 0x002C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              Blocks[0x50];                                            // 0x0030(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              Recents[0x50];                                           // 0x0080(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLLocalPlayer
	 * Size -> 0x04D0 (FullSize[0x0738] - InheritedSize[0x0268])
	 */
	class UTBLLocalPlayer : public ULocalPlayer
	{
	public:
		unsigned char                                              UnknownData_CCX1[0x50];                                  // 0x0268(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCloudBlockRecentPlayers*                            CloudBlockRecentPlayers;                                 // 0x02B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XZ5M[0x8];                                   // 0x02C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              MostRecentServerPassword;                                // 0x02C8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NUQ0[0x1A8];                                 // 0x02D8(0x01A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnFriendsListsUpdated;                                   // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFriendsUpdated;                                        // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTitleBroadcastReceived;                                // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFriendStatusUpdated;                                   // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInvitesReceived;                                  // 0x04C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInvitesChanged;                                   // 0x04D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInviteSent;                                       // 0x04E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInviteAccept;                                     // 0x04F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInviteResponseReceived;                           // 0x0500(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyJoinedQueue;                                      // 0x0510(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyLeftQueue;                                        // 0x0520(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyMemberJoin;                                       // 0x0530(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyMemberLeave;                                      // 0x0540(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyMemberKick;                                       // 0x0550(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyMemberRemove;                                     // 0x0560(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyLeaderChange;                                     // 0x0570(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyDisband;                                          // 0x0580(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyLeave;                                            // 0x0590(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyInviteSendResult;                                 // 0x05A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPartyCreatedResult;                                    // 0x05B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UTBLScreenManager*                                   ActiveScreenManager;                                     // 0x05C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z369[0x170];                                 // 0x05C8(0x0170) MISSED OFFSET (PADDING)

	public:
		void YesPartyCrossplayJoinListGame();
		void YesPartyCrossplayJoin();
		void WhatBuild();
		void SendPartyInvitationToPlayerIdExec(const class FString& PlayerId);
		void RemoveBlock(const class FString& PlayerId, const class FString& PlayerName);
		void RejectPartyInvitationFromPlayer(const class FString& PlayerId);
		void PartyKickExec(const class FString& PlayerId);
		void OnReadUserFileComplete(const struct FPlatformInterfaceDelegateResult& Result);
		void OnEnumerateCloudFilesComplete(const struct FPlatformInterfaceDelegateResult& Result);
		void NoPartyCrossplayJoin();
		void ListRecents();
		void ListPartyInvitationsExec();
		void ListBlocks();
		void LeavePartyExec();
		void JoinPartyExec(const class FString& PartyId);
		bool IsPartyLeader();
		bool IsInParty();
		bool IsBlocked(const class FString& PlayerId, const class FString& PlayerName);
		int GetPartyMemberCount();
		void GetPartyLeaderExec();
		struct FBlueprintOnlineUser GetOnlineUser(const class FString& ID);
		bool GetIsPartyInMatchmakingQueue();
		TBL_ESlateInputMode GetCurrentSlateInputMode();
		void CreateAndSendPartyInvitationToPlayerId(const class FString& PlayerId);
		void CopyInfo();
		void AddRecent(const class FString& PlayerId, const class FString& PlayerName);
		void AddBlock(const class FString& PlayerId, const class FString& PlayerName);
		void AcceptPartyInvitationFromPlayerExec(const class FString& PlayerName);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLMatchesSubsystem
	 * Size -> 0x0098 (FullSize[0x00C8] - InheritedSize[0x0030])
	 */
	class UTBLMatchesSubsystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_H7VW[0x88];                                  // 0x0030(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      CachedPlayerIds;                                         // 0x00B8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnPS5MatchResponsiblePlayerUpdated(const struct FUniqueNetIdRepl& Player);
		void OnPS5MatchIdChanged(const class FString& MatchID);
		void OnPreLoadMap(const class FString& MapName);
		void OnPostLoadMap(class UWorld* LoadedWorld);
		void OnMatchStateChanged(const class FName& NewMatchState);
		void OnGameStateSetEvent(class AGameStateBase* GameState);
		void MatchUpdate();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLMaterialButtonWidget
	 * Size -> 0x0050 (FullSize[0x0298] - InheritedSize[0x0248])
	 */
	class UTBLMaterialButtonWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_Q23B[0x50];                                  // 0x0248(0x0050) MISSED OFFSET (PADDING)

	public:
		void SetStartingInterpProgress(float Value);
		void PlayButtonAnimation(const struct FTBLButtonAnimation_deprecated& InAnimation, bool ReverseAnim);
		void OnUpdateMaterial(const class FName& MaterialParamName, float InProgress);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLMenuItemWidgetStyle
	 * Size -> 0x01A0 (FullSize[0x01D0] - InheritedSize[0x0030])
	 */
	class UTBLMenuItemWidgetStyle : public USlateWidgetStyleContainerBase
	{
	public:
		struct FTBLMenuItemStyle                                   MenuItemStyle;                                           // 0x0030(0x01A0) Edit, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLMessageBus
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UTBLMessageBus : public UObject
	{
	public:
		unsigned char                                              UnknownData_65DD[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLNavLink
	 * Size -> 0x0008 (FullSize[0x02B0] - InheritedSize[0x02A8])
	 */
	class ATBLNavLink : public ANavLinkProxy
	{
	public:
		TBL_ETBLLinkBehavior                                       LinkBehaviorLeftToRight;                                 // 0x02A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_ETBLLinkBehavior                                       LinkBehaviorRightToLeft;                                 // 0x02A9(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0JUE[0x6];                                   // 0x02AA(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLNavModifierComponent
	 * Size -> 0x0010 (FullSize[0x01B0] - InheritedSize[0x01A0])
	 */
	class UTBLNavModifierComponent : public UNavModifierComponent
	{
	public:
		struct FVector                                             NavModifierOffset;                                       // 0x01A0(0x000C) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1Q6F[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.ObjectAnchor
	 * Size -> 0x0010 (FullSize[0x0268] - InheritedSize[0x0258])
	 */
	class AObjectAnchor : public AActor
	{
	public:
		TArray<class UObject*>                                     AnchoredObjects;                                         // 0x0258(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLOnlineLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLOnlineLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_ViewProfileFromBlueprintOnlineUser(const struct FBlueprintOnlineUser& User);
		void STATIC_TBLJoinGameSession(const struct FBlueprintSessionResult& SessionResult, const class FString& Password, class UObject* WorldContextObject);
		void STATIC_SetMuteStateForRemotePlayer(bool VoiceChatEnabled, class ATBLPlayerController* LocalController, class ATBLPlayerState* NewPlayer);
		class FString STATIC_SessionInfoToDebugString(const struct FBlueprintSessionResult& Result);
		void STATIC_RemoveFriendFromBlueprintOnlineUser(class ATBLPlayerController* InController, const struct FBlueprintOnlineUser& User);
		void STATIC_RemoveBlockFromBlueprintOnlineUser(class UTBLLocalPlayer* InPlayer, const struct FBlueprintOnlineUser& User);
		void STATIC_OpenPartyInviteDialog();
		bool STATIC_LocalUserHasLicenseToApp(int AppId);
		void STATIC_LeaveParty(class UTBLLocalPlayer* InPlayer);
		void STATIC_KickPlayer(class UTBLLocalPlayer* InPlayer, const struct FBlueprintOnlineUser& User);
		void STATIC_JoinGame(const struct FBlueprintOnlineUser& User, class ATBLPlayerController* LocalController);
		bool STATIC_IsUserMyself(const struct FBlueprintOnlineUser& User);
		bool STATIC_IsTutorialServer();
		bool STATIC_IsPlayerTalking(const class FString& PlayerId, class UObject* WorldContextObject);
		bool STATIC_IsPasswordProtectedServerBySessionResult(const struct FBlueprintSessionResult& Result);
		bool STATIC_IsPartyLeader(const struct FBlueprintOnlineUser& User);
		bool STATIC_IsOfficialServerBySessionResult(const struct FBlueprintSessionResult& Result);
		bool STATIC_IsLocalPlayerPartyLeader();
		bool STATIC_IsInMyParty(class UTBLLocalPlayer* InPlayer, const struct FBlueprintOnlineUser& User);
		bool STATIC_IsInMatchmadeGame();
		bool STATIC_IsInAParty(const struct FBlueprintOnlineUser& User);
		bool STATIC_IsGameJoinable();
		bool STATIC_IsAppOwnershipTemporary();
		bool STATIC_IsAdminBP(class APlayerController* Controller);
		void STATIC_InviteUserToParty(class UTBLLocalPlayer* InPlayer, const struct FBlueprintOnlineUser& User);
		void STATIC_InviteUserToGame(const struct FBlueprintOnlineUser& User);
		class ATBLGameSession* STATIC_GetTBLGameSession(class UObject* WorldContextObject);
		class UTBLGameInstance* STATIC_GetTBLGameInstance(class UObject* WorldContextObject);
		void STATIC_GetTalkingPlayers(TArray<class ATBLPlayerState*>* OutPlayerStates, class UObject* WorldContextObject);
		bool STATIC_GetStatRangeIntFromLevel(int InLevel, TBL_EOnlineStat OnlineStat, int* Start, int* End);
		bool STATIC_GetStatRangeIntFromExperience(int InExperience, TBL_EOnlineStat OnlineStat, int* Level, int* PreviousLevelExperience, int* NextLevelExperience);
		bool STATIC_GetStatRangeInt(class ATBLPlayerController* InController, TBL_EOnlineStat OnlineStat, int* Level, int* PreviousLevelExperience, int* NextLevelExperience);
		bool STATIC_GetStatRangeFromPlayerState(class ATBLPlayerState* PlayerState, TBL_EOnlineStat OnlineStat, int* Level, int* PreviousLevelExperience, int* NextLevelExperience);
		bool STATIC_GetStatOriginalInt(class ATBLPlayerController* InController, TBL_EOnlineStat Stat, int* returnVal);
		bool STATIC_GetStatOriginalFloat(class ATBLPlayerController* InController, TBL_EOnlineStat Stat, float* returnVal);
		bool STATIC_GetStatInt(class ATBLPlayerController* InController, TBL_EOnlineStat Stat, int* returnVal);
		bool STATIC_GetStatFloat(class ATBLPlayerController* InController, TBL_EOnlineStat Stat, float* returnVal);
		class FString STATIC_GetSessionSettingsValue(const struct FBlueprintSessionResult& Result, const class FName& Key);
		void STATIC_GetSessionSettingsKeys(const struct FBlueprintSessionResult& Result, TArray<class FName>* OutSettingKeys);
		void STATIC_GetSessionSettingsAsStrings(const class FName& SessionName, TArray<class FString>* Keys, TArray<class FString>* Values);
		void STATIC_GetPartyMembers(TArray<struct FBlueprintOnlineUser>* OutPartyMembers);
		int STATIC_GetPartyMemberCount();
		int STATIC_GetNumBots(const struct FBlueprintSessionResult& Result);
		class FString STATIC_GetMapName(const struct FBlueprintSessionResult& Result);
		class FString STATIC_GetLocalPlayerId();
		void STATIC_GetListOfCurrentSessions(TArray<class FName>* CurrentSessions);
		bool STATIC_GetFriendById(const class FString& FriendId, struct FBlueprintOnlineUser* OutBlueprintUser);
		class FString STATIC_GetDebugStringForSessionSettingsKey(const class FName& Key);
		class UTexture* STATIC_GetAvatarImageFromPlayerState(class APlayerState* PlayerState, TBL_ESteamAvatarSize Size);
		class UTexture* STATIC_GetAvatarImageFromOnlineUser(const struct FBlueprintOnlineUser& User, TBL_ESteamAvatarSize Size);
		bool STATIC_CheckAppOwnership();
		bool STATIC_CanSendPartyInvites();
		bool STATIC_CanJoinGame(const struct FBlueprintOnlineUser& User);
		void STATIC_BroadcastLocalizedObjectiveMessage(const struct FObjectiveMessage& ObjectiveMessage, TBL_EFaction ReceivingFaction, class UObject* WorldContextObject);
		void STATIC_BroadcastLocalizedChat(const class FText& Msg, TBL_EChatType Type, TBL_EFaction ReceivingFaction, class UObject* WorldContextObject);
		void STATIC_BroadcastGameModeMessages(TArray<struct FGameModeMessageTable> GameModeMessages, class UObject* WorldContextObject);
		bool STATIC_AreWePartyHost();
		void STATIC_AddFriendFromBlueprintOnlineUser(class ATBLPlayerController* InController, const struct FBlueprintOnlineUser& User);
		void STATIC_AddBlockFromBlueprintOnlineUser(class UTBLLocalPlayer* InPlayer, const struct FBlueprintOnlineUser& User);
		void STATIC_ActivateGameOverlayToWebPage(const class FString& URL);
		void STATIC_AcceptPartyInviteFromPlayerName(class UTBLLocalPlayer* InPlayer, const class FString& InviteeName);
		void STATIC_AcceptPartyInviteFromPlayer(class UTBLLocalPlayer* InPlayer, const struct FBlueprintOnlineUser& User);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLOptionsScreen
	 * Size -> 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
	 */
	class UTBLOptionsScreen : public UObject
	{
	public:
		unsigned char                                              UnknownData_D51I[0x28];                                  // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UOptionsScreenCategory*>                      Categories;                                              // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOptionsScreenProp_ComboBox*                         ResolutionsComboBox;                                     // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOptionsScreenProp_ComboBox*                         WindowModeComboBox;                                      // 0x0068(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOptionsScreenProp_ComboBox*                         DLSSComboBox;                                            // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UOptionsScreenProp_ComboBox*                         IntelVRSComboBox;                                        // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_82FK[0x38];                                  // 0x0080(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOptionsScreenProp_CheckBox*                         CrossplayCheckbox;                                       // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2IXQ[0x28];                                  // 0x00C0(0x0028) MISSED OFFSET (PADDING)

	public:
		void UserRevertedResolution();
		void UserDeclinedCrossplayChange();
		void UserConfirmedResolution();
		void UserConfirmedCrossplayChange();
		void SetOverallScalabilityLevelWithAuto(int Value);
		void SaveAll();
		void ResetAll();
		void OnGameUserSettingsUINeedsUpdate();
		void OnGameExit();
		int GetOverallScalabilityLevelWithAuto();
		void ApplyAll();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenProperty
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UOptionsScreenProperty : public UObject
	{
	public:
		class FScriptMulticastDelegate                             CurrentValueChanged;                                     // 0x0028(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FText                                                Name;                                                    // 0x0038(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                Description;                                             // 0x0050(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       ApplyImmediately;                                        // 0x0068(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ApplyOnlyImmediately;                                    // 0x0069(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_87T8[0x6];                                   // 0x006A(0x0006) MISSED OFFSET (PADDING)

	public:
		void ResetToDefault();
		void Reset();
		bool IsDefaultValue();
		void Apply();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenProp_CheckBox
	 * Size -> 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
	 */
	class UOptionsScreenProp_CheckBox : public UOptionsScreenProperty
	{
	public:
		unsigned char                                              UnknownData_RP1Q[0x30];                                  // 0x0070(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       CurrentValue;                                            // 0x00A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AUNX[0x7];                                   // 0x00A1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetCurrentValue(bool In);
		bool GetCurrentValue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenProp_ComboBox
	 * Size -> 0x0048 (FullSize[0x00B8] - InheritedSize[0x0070])
	 */
	class UOptionsScreenProp_ComboBox : public UOptionsScreenProperty
	{
	public:
		unsigned char                                              UnknownData_N9P0[0x30];                                  // 0x0070(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        CurrentValue;                                            // 0x00A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BK7G[0x4];                                   // 0x00A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FText>                                        Options;                                                 // 0x00A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetCurrentValue(int In);
		int GetCurrentValue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenProp_Slider
	 * Size -> 0x0090 (FullSize[0x0100] - InheritedSize[0x0070])
	 */
	class UOptionsScreenProp_Slider : public UOptionsScreenProperty
	{
	public:
		unsigned char                                              UnknownData_YEBL[0x30];                                  // 0x0070(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CurrentValue;                                            // 0x00A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Min;                                                     // 0x00A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Max;                                                     // 0x00A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StepSize;                                                // 0x00AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MinFractionalDigits;                                     // 0x00B0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxFractionalDigits;                                     // 0x00B4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      CurrentValueFudgeFactor;                                 // 0x00B8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_08OT[0x4];                                   // 0x00BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                TextForMin;                                              // 0x00C0(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                TextForMax;                                              // 0x00D8(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       DelaySliderSetter;                                       // 0x00F0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EXPY[0x3];                                   // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinDisplayTextRange;                                     // 0x00F4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDisplayTextRange;                                     // 0x00F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GPQ7[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetCurrentValue(float In);
		class FText GetValueText(float Value);
		float GetCurrentValue();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenProp_Slider_Toggle
	 * Size -> 0x0020 (FullSize[0x0120] - InheritedSize[0x0100])
	 */
	class UOptionsScreenProp_Slider_Toggle : public UOptionsScreenProp_Slider
	{
	public:
		float                                                      ToggleValue;                                             // 0x0100(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ToggleReturn;                                            // 0x0104(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                TextOverrideForToggle;                                   // 0x0108(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenProp_Keybind
	 * Size -> 0x0050 (FullSize[0x00C0] - InheritedSize[0x0070])
	 */
	class UOptionsScreenProp_Keybind : public UOptionsScreenProperty
	{
	public:
		class FName                                                ActionName;                                              // 0x0070(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                KeyboardKeyText;                                         // 0x0078(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                GamepadKeyText;                                          // 0x0090(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       IsAxisBinding;                                           // 0x00A8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q3TR[0x3];                                   // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      AxisScale;                                               // 0x00AC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsConsoleKey;                                            // 0x00B0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JF2Y[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UOptionsScreenCategory*                              ParentCategory;                                          // 0x00B8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenSubCategory
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UOptionsScreenSubCategory : public UObject
	{
	public:
		class FText                                                Title;                                                   // 0x0028(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       IsKeybindingSubCategory;                                 // 0x0040(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4NXN[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UOptionsScreenProperty*>                      Properties;                                              // 0x0048(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void ResetAll();
		void ApplyAll();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.OptionsScreenCategory
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UOptionsScreenCategory : public UObject
	{
	public:
		class FText                                                Title;                                                   // 0x0028(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<class UOptionsScreenSubCategory*>                   Subcategories;                                           // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FTNO[0x20];                                  // 0x0050(0x0020) MISSED OFFSET (PADDING)

	public:
		void SetToDefaults();
		void ResetAll();
		void ApplyAll();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLOverviewScreen
	 * Size -> 0x0000 (FullSize[0x0248] - InheritedSize[0x0248])
	 */
	class UTBLOverviewScreen : public UUserWidget
	{
	public:
		void BP_ShowLoadout(bool bReset);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPainVolume
	 * Size -> 0x0030 (FullSize[0x0288] - InheritedSize[0x0258])
	 */
	class ATBLPainVolume : public AActor
	{
	public:
		class USceneComponent*                                     DefaultSceneComponent;                                   // 0x0258(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UBoxComponent*                                       CaptureBox;                                              // 0x0260(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DamagePerSecondToApplyOnTimeExpire;                      // 0x0268(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LQA1[0x4];                                   // 0x026C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ATBLCharacter*>                               CharactersInPainVolume;                                  // 0x0270(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        PainTimer;                                               // 0x0280(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void EndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void BeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLParticleSystemComponent
	 * Size -> 0x0000 (FullSize[0x06E0] - InheritedSize[0x06E0])
	 */
	class UTBLParticleSystemComponent : public UParticleSystemComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPathFollowingComponent
	 * Size -> 0x0068 (FullSize[0x0358] - InheritedSize[0x02F0])
	 */
	class UTBLPathFollowingComponent : public UCrowdFollowingComponent
	{
	public:
		struct FVector                                             NavLinkStart;                                            // 0x02F0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             NavLinkTarget;                                           // 0x02FC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bNavLinkWantsToJump;                                     // 0x0308(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCannotCompletePath;                                     // 0x0309(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JIY4[0x2];                                   // 0x030A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             CurrentPathSegmentStart;                                 // 0x030C(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             CurrentPathSegmentTarget;                                // 0x0318(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               LastKnownBlockingActor;                                  // 0x0324(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BlockStartTime;                                          // 0x032C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        BlockingActorExpiredTimer;                               // 0x0330(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PathBlockFailDuration;                                   // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y1OT[0x4];                                   // 0x033C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        PathBlockTimer;                                          // 0x0340(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPawnFellWhilePerformingBlockedMove;                     // 0x0348(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDeferredPathUpdate;                                     // 0x0349(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bPathInvalidatedDuringDefer;                             // 0x034A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SOYK[0xD];                                   // 0x034B(0x000D) MISSED OFFSET (PADDING)

	public:
		void OnPathBlocked();
		void OnFinishedBlockedMovementResponse();
		void OnBlockingActorExpired();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerCameraManager
	 * Size -> 0x0720 (FullSize[0x2EA0] - InheritedSize[0x2780])
	 */
	class ATBLPlayerCameraManager : public APlayerCameraManager
	{
	public:
		class UCameraModifier_TurnLimit*                           CameraTurnLimitMod;                                      // 0x2778(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraModifier_Zoom*                                CameraZoomMod;                                           // 0x2780(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraModifier_Offset*                              CameraOffsetMod;                                         // 0x2788(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraModifier_CancelRotation*                      CameraCancelRotationMod;                                 // 0x2790(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraModifier_DeathCam*                            CameraDeathMod;                                          // 0x2798(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraModifier_DeathCam1P*                          CameraDeathMod_1P;                                       // 0x27A0(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCameraModifier_BlendInRotation*                     CameraBlendInRotation;                                   // 0x27A8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsFirstPerson;                                          // 0x27B0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisableCameraAnims;                                     // 0x27B1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HCSQ[0xE];                                   // 0x27B2(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLastSpectatorPOV                                   LastSpectatorPOV;                                        // 0x27C0(0x05E0) NativeAccessSpecifierPublic
		class UPostProcessComponent*                               CharacterStatesPostProcessComponent;                     // 0x2DA0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPostProcessComponent*                               OutOfCombatPostProcessComponent;                         // 0x2DA8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              CameraTurnLimitModClass;                                 // 0x2DB0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CameraHorizontalLockModClass;                            // 0x2DB8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CameraVerticalLockModClass;                              // 0x2DC0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CameraDeathModClass;                                     // 0x2DC8(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              CameraDeathModClass_1P;                                  // 0x2DD0(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        CameraModifierId;                                        // 0x2DD8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SRJ[0x4];                                   // 0x2DDC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int, class UCameraModifier_TurnLock*>                 CameraModifiers;                                         // 0x2DE0(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class UClass*, struct FPropertyModifiers>             CameraShakePropertyModifiers;                            // 0x2E30(0x0050) Protected, NativeAccessSpecifierProtected
		bool                                                       bLoopCameraShake;                                        // 0x2E80(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R6F0[0x7];                                   // 0x2E81(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraModifier_ArrowCam*                            ArrowCam;                                                // 0x2E88(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraModifier_SpawnFadeOut*                        SpawnFadeOut;                                            // 0x2E90(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCameraModifier_FollowAnimation*                     FollowAnimation;                                         // 0x2E98(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ToggleSpectatorCamera();
		bool ShouldDoSpawnFadeOut();
		bool IsSpawnFadeOutEnabled();
		class AActor* GetActualViewTarget();
		class UCameraComponent* GetActiveCameraComponent();
		void EnableSpawnFadeOut(float Duration);
		void EnableDeathCam_1P(class AActor* Killed);
		void EnableDeathCam(class ATBLCharacter* KilledCharacter);
		void DisableSpawnFadeOut();
		void DisableDeathCam(bool bImmediate);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CloudViewedItems
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UCloudViewedItems : public UObject
	{
	public:
		unsigned char                                              UnknownData_4II6[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        UserChangelist;                                          // 0x002C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FPrimaryAssetId>                             ViewedItems;                                             // 0x0030(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.FlavorStats
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class UFlavorStats : public UObject
	{
	public:
		unsigned char                                              UnknownData_HV34[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        UserChangelist;                                          // 0x002C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VR66[0x50];                                  // 0x0030(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, int>                                   FlavorStats;                                             // 0x0080(0x0050) NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CloudMutedPlayers
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UCloudMutedPlayers : public UObject
	{
	public:
		unsigned char                                              UnknownData_YW1V[0x4];                                   // 0x0028(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        UserChangelist;                                          // 0x002C(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              Mutes[0x50];                                             // 0x0030(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerControllerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLPlayerControllerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerInput
	 * Size -> 0x00E0 (FullSize[0x0488] - InheritedSize[0x03A8])
	 */
	class UTBLPlayerInput : public UPlayerInput
	{
	public:
		TBL_EInputActionMode                                       InputActionMode;                                         // 0x03A8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L8E4[0x7];                                   // 0x03A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             KeybindsResetDelegate;                                   // 0x03B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsKeyInUseDialogYesClicked;                            // 0x03C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnIsKeyInUseDialogNoClicked;                             // 0x03D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UDataTable*                                          KeybindDataTable;                                        // 0x03E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          KeybindAxisDataTable;                                    // 0x03E8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FInputActionKeyMapping>                      DefaultActionMappings;                                   // 0x03F0(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FInputAxisKeyMapping>                        DefaultAxisMappings;                                     // 0x0400(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZS7V[0x78];                                  // 0x0410(0x0078) MISSED OFFSET (PADDING)

	public:
		void SetGamepadRYSens(float Sensitivity);
		void SetGamepadRXSens(float Sensitivity);
		void SetConsoleKey(const struct FKey& Key);
		void SetAxisBinding(const class FName& AxisName, const struct FKey& Key, float Scale, bool bBypassDialog);
		void SetActionBinding(const class FName& ActionName, const struct FKey& Key, bool bIsShiftPressed, bool bIsCtrlPressed, bool bIsAltPressed, bool bBypassDialog);
		void ResetConsoleKey();
		void ResetAxisBinding(const class FName& AxisName);
		void ResetAllBindings();
		void ResetActionBinding(const class FName& ActionName);
		void OnIsKeyInUse_Yes();
		void OnIsKeyInUse_No();
		void KeybindsReset__DelegateSignature();
		bool IsShiftPressed();
		void IsKeyInUseDialogClosed__DelegateSignature();
		bool IsKeybindingDefault(const class FName& KeybindingName, bool ActionBinding, bool AxisBinding);
		bool IsCtrlPressed();
		bool IsAltPressed();
		void InvertGamepad();
		void GetKeysForConsole(TArray<struct FKey>* ConsoleKeys);
		void GetKeysForAxis(const class FName& AxisName, TArray<struct FInputAxisKeyMapping>* Bindings);
		void GetKeysForAction(const class FName& ActionName, TArray<struct FInputActionKeyMapping>* Bindings);
		void GetDefaultKeysForAxis(const class FName& AxisName, TArray<struct FInputAxisKeyMapping>* Bindings);
		void GetDefaultKeysForAction(const class FName& ActionName, TArray<struct FInputActionKeyMapping>* Bindings);
		TArray<class FName> GetAllAxisKeyNames();
		TArray<struct FInputAxisKeyMapping> GetAllAxisKeyMappings();
		TArray<class FName> GetAllActionKeyNames();
		TArray<struct FInputActionKeyMapping> GetAllActionKeyMappings();
		void ClearConsoleKey();
		void ClearAxisBinding(const class FName& AxisName, bool ClearMouseKeyboardBinding, bool ClearGamepadBinding);
		void ClearActionBinding(const class FName& ActionName, bool ClearMouseKeyboardBinding, bool ClearGamepadBinding);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPlayerStateInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLPlayerStateInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLProfanityFilter
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLProfanityFilter : public UBlueprintFunctionLibrary
	{
	public:
		class FString STATIC_Apply(const class FString& Input);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLProjectileMovementComponent
	 * Size -> 0x0220 (FullSize[0x0450] - InheritedSize[0x0230])
	 */
	class UTBLProjectileMovementComponent : public UProjectileMovementComponent
	{
	public:
		unsigned char                                              UnknownData_6Q5O[0x10];                                  // 0x0230(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnDisabled;                                              // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementStarted;                                       // 0x0250(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlockingHit;                                           // 0x0260(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnFakeClientBlockingHit;                                 // 0x0270(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMovementFinished;                                      // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             FakeProjectileUpdate;                                    // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FRotator                                            InitialRotation;                                         // 0x02A0(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		struct FRotator                                            AngularVelocity;                                         // 0x02AC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       bFixedSubstepOnServer;                                   // 0x02B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JTW5[0x3];                                   // 0x02B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      ProjectileStartTime;                                     // 0x02BC(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      AccumulatedTickTime;                                     // 0x02C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWasTickedThisFrame;                                     // 0x02C4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7A16[0x3];                                   // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             InitiatorLocationOnSpawn;                                // 0x02C8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            InitiatorRotationOnSpawn;                                // 0x02D4(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      Drag;                                                    // 0x02E0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DrawStrengthModifier;                                    // 0x02E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      DistanceTravelled;                                       // 0x02E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingEnemyMaxAngle;                                     // 0x02EC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingTeammateMaxAngle;                                  // 0x02F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingOtherMaxAngle;                                     // 0x02F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FacingTargetTime;                                        // 0x02F8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bParryImmediately;                                       // 0x02FC(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bParryImmediatelyTeammates;                              // 0x02FD(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoNotCollideWithProjectiles;                            // 0x02FE(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoNotCollideWithEnemies;                                // 0x02FF(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDoNotCollideWithTeammates;                              // 0x0300(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bShouldPenetrateCharacters;                              // 0x0301(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T7IT[0x6];                                   // 0x0302(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        DoNotCollideWithTaggedActors;                            // 0x0308(0x0010) Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      InitialNonCollisionTime;                                 // 0x0318(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bUseProjectileControlComponent;                          // 0x031C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1C23[0x3];                                   // 0x031D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class UProjectileCollision>                 CollisionHandler;                                        // 0x0320(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TWeakObjectPtr<class AActor>>                       CollisionIgnoreActors;                                   // 0x0328(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FHitActorInfo>                               HitActors;                                               // 0x0338(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FHitResult                                          LastHitResult;                                           // 0x0348(0x0088) Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		bool                                                       bWasLastHitBlocked;                                      // 0x03D0(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K1BY[0x7];                                   // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FHitActorInfo>                               OverlappedParryActors;                                   // 0x03D8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFakeClient;                                             // 0x03E8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFakeClientSubStep;                                      // 0x03E9(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFakeClientOffset;                                       // 0x03EA(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFakeClientDestroyed;                                    // 0x03EB(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FakeClientSubStepLocation;                               // 0x03EC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             FakeClientSubStepVelocity;                               // 0x03F8(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      FakeClientSubStepDistanceTravelled;                      // 0x0404(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLProjectileMovementComponent*                     FakeClientProjectile;                                    // 0x0408(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLProjectileMovementComponent*                     FakeClientTarget;                                        // 0x0410(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TornOffLifeSpan;                                         // 0x0418(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bWaitForAbilities;                                       // 0x041C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bEnableDragging;                                         // 0x041D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UK2O[0x2];                                   // 0x041E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             HitVelocity;                                             // 0x0420(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             BounceVelocity;                                          // 0x042C(0x000C) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J48W[0x9];                                   // 0x0438(0x0009) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDelayedKill;                                            // 0x0441(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8WYC[0xE];                                   // 0x0442(0x000E) MISSED OFFSET (PADDING)

	public:
		void StopOnBlockingHit(const struct FHitResult& Hit);
		void RemoveIgnoredCollisionActor(class AActor* ActorToRemove);
		void OnTornOff();
		void OnKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		void OnBounce(const struct FHitResult& Hit);
		void OnBlocked(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
		bool IsFakeClientProjectile();
		void EventHit(const struct FHitResult& Hit);
		void EventBlocked(const struct FHitResult& Hit);
		void DisableAndDestroy(float LifeSpan);
		void CleanupAbilityActorsInternal(class AController* Controller);
		void CleanupAbilityActors();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5HapticsAnimNotify
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UTBLPS5HapticsAnimNotify : public UAnimNotify
	{
	public:
		TBL_ETBLPS5HapticType                                      PS5HapticType;                                           // 0x0038(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RWRG[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              PS5HapticsEffect[0x28];                                  // 0x0039(0x0028) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5HapticsManager
	 * Size -> 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
	 */
	class UTBLPS5HapticsManager : public UGameInstanceSubsystem
	{
	public:
		class UObjectLibrary*                                      PS5HapticsLibrary;                                       // 0x0030(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FString, class UObject*>                        PS5HapticsLookupMap;                                     // 0x0038(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E3BF[0x28];                                  // 0x0088(0x0028) MISSED OFFSET (PADDING)

	public:
		void SetVolumeSetting(TBL_EHapticsVolumeSettings NewSetting);
		void SetIsUsingAdaptiveTriggers(bool UsingAdaptiveTrigger, class ATBLPlayerController* PlayerController);
		bool IsUsingAdaptiveTriggers();
		TBL_EHapticsVolumeSettings GetVolumeSetting();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5HapticsContainer
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UTBLPS5HapticsContainer : public UDataAsset
	{
	public:
		class USoundWave*                                          PadRumbleWAV;                                            // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_ETBLPS5TriggerMode                                     TriggerMode;                                             // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TBL_ETBLPS5TriggerMask                                     TriggerToEffect;                                         // 0x0039(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerStartPosition;                                    // 0x003A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerEndPosition;                                      // 0x003B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerStrength;                                         // 0x003C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerVibrationActivationPosition;                      // 0x003D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerVibrationFrequency;                               // 0x003E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerVibrationAmplitude;                               // 0x003F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerResistancePosition;                               // 0x0040(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              TriggerResistanceStrength;                               // 0x0041(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QSUN[0x6];                                   // 0x0042(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5BlockingHaptics
	 * Size -> 0x0060 (FullSize[0x00A8] - InheritedSize[0x0048])
	 */
	class UTBLPS5BlockingHaptics : public UTBLPS5HapticsContainer
	{
	public:
		class UCurveFloat*                                         BlockingStrength;                                        // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              MaxTriggerResistanceStrength;                            // 0x0050(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D1FT[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UDamageSource*>                               SharpDamageTypes;                                        // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UDamageSource*>                               BluntDamageTypes;                                        // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          ShieldLightHit;                                          // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          ShieldHeavyHit;                                          // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          SharpWeaponLightHit;                                     // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          SharpWeaponHeavyHit;                                     // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          BluntWeaponLightHit;                                     // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          BluntWeaponHeavyHit;                                     // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateResistanceBasedOnStamina(class AActor* Actor, TBL_EStat StatType, const struct FStatEntry& Stat, float DeltaValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5DamageHaptics
	 * Size -> 0x0268 (FullSize[0x02B0] - InheritedSize[0x0048])
	 */
	class UTBLPS5DamageHaptics : public UTBLPS5HapticsContainer
	{
	public:
		TArray<class UDamageSource*>                               SharpDamageTypes;                                        // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UDamageSource*>                               BluntDamageTypes;                                        // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UDamageSource*>                               ExplosiveDamageTypes;                                    // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDamageSource*                                       RangeDamageType;                                         // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<TBL_ETBLPS5DamageDirection, class USoundWave*>        SharpWeaponLightHit;                                     // 0x0080(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<TBL_ETBLPS5DamageDirection, class USoundWave*>        SharpWeaponHeavyHit;                                     // 0x00D0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<TBL_ETBLPS5DamageDirection, class USoundWave*>        BluntWeaponLightHit;                                     // 0x0120(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<TBL_ETBLPS5DamageDirection, class USoundWave*>        BluntWeaponHeavyHit;                                     // 0x0170(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<TBL_ETBLPS5DamageDirection, class USoundWave*>        RangedWeaponLightHit;                                    // 0x01C0(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<TBL_ETBLPS5DamageDirection, class USoundWave*>        RangedWeaponHeavyHit;                                    // 0x0210(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class USoundWave*                                          CatapultDamageEffect;                                    // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDamageSource*                                       FallDamageType;                                          // 0x0268(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          FallDamageEffect;                                        // 0x0270(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          ExplosiveDamageEffect;                                   // 0x0278(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UDamageSource*                                       NonDOTFireDamage;                                        // 0x0280(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          FireDamageEffectStart;                                   // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          FireDamageEffectLooping;                                 // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          PlayerAttackHitEffect;                                   // 0x0298(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          PlayerAttackBlockedEffect;                               // 0x02A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          PlayerAttackEnvironmentHitEffect;                        // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5RangedWeaponHaptics
	 * Size -> 0x0038 (FullSize[0x0080] - InheritedSize[0x0048])
	 */
	class UTBLPS5RangedWeaponHaptics : public UTBLPS5HapticsContainer
	{
	public:
		class UCurveFloat*                                         VibrationStrengthFromStamina;                            // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              MaxTriggerAmplitudeStrength;                             // 0x0050(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YVER[0x7];                                   // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundWave*                                          BowReleasedEffect;                                       // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              BowFireTriggerFrequency;                                 // 0x0060(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              BowFireTriggerAmplitude;                                 // 0x0061(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QFHV[0x6];                                   // 0x0062(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USoundWave*                                          CrossbowFireEffect;                                      // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          CrossbowReloadEffect;                                    // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      CrossbowReloadDelay;                                     // 0x0078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Q6UY[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (PADDING)

	public:
		void UpdateVibrationBasedOnStamina(class AActor* Actor, TBL_EStat StatType, const struct FStatEntry& Stat, float DeltaValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5GeneralHaptics
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UTBLPS5GeneralHaptics : public UTBLPS5HapticsContainer
	{
	public:
		class USoundWave*                                          StartingSprintEffect;                                    // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          MaximumSprintEffect;                                     // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          LowHealthEffect;                                         // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      HealthPercentToPlay;                                     // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_98D2[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		void PlayLowHealthEffect(class AActor* Actor, TBL_EStat StatType, const struct FStatEntry& Stat, float DeltaValue);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLPS5SiegeEngineHaptics
	 * Size -> 0x0030 (FullSize[0x0078] - InheritedSize[0x0048])
	 */
	class UTBLPS5SiegeEngineHaptics : public UTBLPS5HapticsContainer
	{
	public:
		class USoundWave*                                          BallistaBoltFired;                                       // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          BallistaBoltReload;                                      // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          CatapultReload;                                          // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          CatapultFiring;                                          // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          BatteringRamCharge;                                      // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USoundWave*                                          BatteringRamReleased;                                    // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLReplicationGraphSettings
	 * Size -> 0x00A0 (FullSize[0x00D8] - InheritedSize[0x0038])
	 */
	class UTBLReplicationGraphSettings : public UDeveloperSettings
	{
	public:
		TMap<TBL_EClassSpatialNodeMapping, struct FTBLReplicationGraphSpatialNodeSettings> SpatialNodeSettings;                                     // 0x0038(0x0050) Edit, Config, GlobalConfig, NativeAccessSpecifierPublic
		unsigned char                                              ClassReplicationGraphSettings[0x50];                     // 0x0088(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLReplicationGraph
	 * Size -> 0x0450 (FullSize[0x08F0] - InheritedSize[0x04A0])
	 */
	class UTBLReplicationGraph : public UReplicationGraph
	{
	public:
		TArray<class UClass*>                                      SpatializedClasses;                                      // 0x0498(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      NonSpatializedChildClasses;                              // 0x04A8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      AlwaysRelevantClasses;                                   // 0x04B8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_GridSpatialization2D*          RootGridNodes[0x6];                                      // 0x04C8(0x0030) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_ActorListFrequencyBuckets*     AlwaysRelevantNode;                                      // 0x04F8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_ActorListFrequencyBuckets*     SlowAlwaysRelevantNode;                                  // 0x0500(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              AlwaysRelevantActors[0x50];                              // 0x0508(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              SlowAlwaysRelevantActors[0x50];                          // 0x0558(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_0UFT[0x148];                                 // 0x05A8(0x0148) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ExplicitlySetClasses[0x50];                              // 0x05A8(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_VO0C[0x1B0];                                 // 0x0740(0x01B0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLReplicationGraphNode_AlwaysRelevant_ForConnection
	 * Size -> 0x0240 (FullSize[0x0290] - InheritedSize[0x0050])
	 */
	class UTBLReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode
	{
	public:
		class AActor*                                              GameplayDebugger;                                        // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GGK7[0x228];                                 // 0x0058(0x0228) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              LastPawn;                                                // 0x0280(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V9ZW[0x8];                                   // 0x0288(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WidgetDecorator
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UWidgetDecorator : public UObject
	{
	public:
		bool                                                       bReveal;                                                 // 0x0028(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MV6S[0x3];                                   // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        RevealedIndex;                                           // 0x002C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.DebugCanvasTriangles
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UDebugCanvasTriangles : public UDataAsset
	{
	public:
		TArray<struct FCanvasUVTri>                                DebugTriangles;                                          // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLTextureCacheBuilder
	 * Size -> 0x00A0 (FullSize[0x0120] - InheritedSize[0x0080])
	 */
	class UTBLTextureCacheBuilder : public URuntimeAssetCacheBuilder_ObjectBase
	{
	public:
		class UTextureRenderTarget2D*                              RenderTargetForTextureType;                              // 0x0080(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              RenderTargetTemp;                                        // 0x0088(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              RenderTargetForHeraldry;                                 // 0x0090(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          Texture;                                                 // 0x0098(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1PDI[0x80];                                  // 0x00A0(0x0080) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSafeZone
	 * Size -> 0x0000 (FullSize[0x0138] - InheritedSize[0x0138])
	 */
	class UTBLSafeZone : public USafeZone
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSaveProfileObject
	 * Size -> 0x0218 (FullSize[0x0240] - InheritedSize[0x0028])
	 */
	class UTBLSaveProfileObject : public USaveGame
	{
	public:
		struct FTBLConsoleSaveSettings                             ConsoleUserSettings;                                     // 0x0028(0x00A4) SaveGame, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UKXD[0x4];                                   // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, int>                                   FlavorStats;                                             // 0x00D0(0x0050) SaveGame, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OFXD[0x50];                                  // 0x0120(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bHasAgreedToTOS;                                         // 0x0170(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bFirstLoadCompleted;                                     // 0x0171(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasAcceptedNDA;                                   // 0x0172(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasPlayedTutorial;                                // 0x0173(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bPlayerHasAcceptedPurchaseDisclaimer;                    // 0x0174(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FL5A[0x3];                                   // 0x0175(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTBLCustomizationSaveSettings                       CustomizationSettings;                                   // 0x0178(0x0058) SaveGame, NativeAccessSpecifierPublic
		struct FTBLGameUpdateSettings                              GameUpdateSettings;                                      // 0x01D0(0x0010) SaveGame, NativeAccessSpecifierPublic
		TArray<struct FPrimaryAssetId>                             ViewedItems;                                             // 0x01E0(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, double>                                AchievementProgress;                                     // 0x01F0(0x0050) SaveGame, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLScalabilitySettings
	 * Size -> 0x0020 (FullSize[0x0128] - InheritedSize[0x0108])
	 */
	class UTBLScalabilitySettings : public UWidget
	{
	public:
		unsigned char                                              UnknownData_3O8D[0x20];                                  // 0x0108(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLScrollBarStyleDataAsset
	 * Size -> 0x04D0 (FullSize[0x0500] - InheritedSize[0x0030])
	 */
	class UTBLScrollBarStyleDataAsset : public UPrimaryDataAsset
	{
	public:
		struct FScrollBarStyle                                     Style;                                                   // 0x0030(0x04D0) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLScrollBox
	 * Size -> 0x0008 (FullSize[0x0888] - InheritedSize[0x0880])
	 */
	class UTBLScrollBox : public UScrollBox
	{
	public:
		class UTBLScrollBarStyleDataAsset*                         ScrollBarStyle;                                          // 0x0880(0x0008) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSignificanceManager
	 * Size -> 0x0040 (FullSize[0x0160] - InheritedSize[0x0120])
	 */
	class UTBLSignificanceManager : public USignificanceManager
	{
	public:
		unsigned char                                              UnknownData_DKZM[0x40];                                  // 0x0120(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSlackUtility
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLSlackUtility : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SendSlackMessage(const struct FSlackMessage& Message);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSocialScreen
	 * Size -> 0x0008 (FullSize[0x03B8] - InheritedSize[0x03B0])
	 */
	class UTBLSocialScreen : public UTBLScreenWidget
	{
	public:
		unsigned char                                              UnknownData_39PD[0x8];                                   // 0x03B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnAttemptedNavigationFailed(SlateCore_EUINavigation NavigationType);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSocialSubScreen
	 * Size -> 0x0010 (FullSize[0x0258] - InheritedSize[0x0248])
	 */
	class UTBLSocialSubScreen : public UUserWidget
	{
	public:
		float                                                      ListRefreshInterval;                                     // 0x0248(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L3BK[0xC];                                   // 0x024C(0x000C) MISSED OFFSET (PADDING)

	public:
		void RefreshLists();
		void OnRefreshLists();
		void OnOpened();
		void OnClosed();
		void FocusOnEntry();
		void FocusOnEntries();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSpectatorPawn
	 * Size -> 0x00D0 (FullSize[0x04A8] - InheritedSize[0x03D8])
	 */
	class ATBLSpectatorPawn : public ASpectatorPawn
	{
	public:
		class UCameraComponent*                                    Camera;                                                  // 0x03D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSpectatorCameraConfig                              DefaultCamera;                                           // 0x03E0(0x0020) Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FSpectatorCameraConfig>                      SmoothCameras;                                           // 0x0400(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSpectatorCamInfo>                           SpectatorCameras;                                        // 0x0410(0x0010) ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ATBLCharacter*                                       FollowCharacter;                                         // 0x0420(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APlayerState*                                        FollowPlayerState;                                       // 0x0428(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZoomDistance;                                            // 0x0430(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZoomMin;                                                 // 0x0434(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZoomMax;                                                 // 0x0438(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        ZoomDir;                                                 // 0x043C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ZoomStartTime;                                           // 0x0440(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O339[0x4];                                   // 0x0444(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSmoothSpectatorTurn>                        SmoothTurn;                                              // 0x0448(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      InitialMaxSpeed;                                         // 0x0458(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnMaxSpeed;                                            // 0x045C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnAcceleration;                                        // 0x0460(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnDeceleration;                                        // 0x0464(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      TurnChangeDirBoost;                                      // 0x0468(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpectatorSpeedUp;                                       // 0x046C(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpectatorSpeedDown;                                     // 0x046D(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpectatorRightStickSensitivityIncrease;                 // 0x046E(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bSpectatorRightStickSensitivityDecrease;                 // 0x046F(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsGhost;                                                // 0x0470(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bResetIdleTime;                                          // 0x0471(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_585W[0x2];                                   // 0x0472(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      LastResetIdleTime;                                       // 0x0474(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ResetIdleRate;                                           // 0x0478(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        DisplayDebugScrollDir;                                   // 0x047C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      DisplayDebugScrollY;                                     // 0x0480(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bDidAutoSpectatorFollow;                                 // 0x0484(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bUseCachedViewRotation;                                  // 0x0485(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VNQ8[0x2];                                   // 0x0486(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            CachedViewRotation;                                      // 0x0488(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0BQ5[0x14];                                  // 0x0494(0x0014) MISSED OFFSET (PADDING)

	public:
		void UpdateOnCinematicStateChanged(const struct FGameplayTag& PreviousStateTag, class UCinematicState* PreviousState, const struct FGameplayTag& NewStateTag, class UCinematicState* NewState);
		void SpectatorFollow(const class FString& PlayerName);
		void SpectatorCam(int CameraNum);
		void ProcessTurnAndLookInputRate(CoreUObject_EAxis Axis, float Rate);
		void ProcessTurnAndLookInput(CoreUObject_EAxis Axis, float Value);
		void PreviousCharacter();
		void NextCharacter();
		void LockSpectatorTranslationAxis(const class FName& AxisName, bool Blocked);
		bool IsGhost();
		void GhostOff();
		void Ghost();
		void FreeCam();
		void EnableSmoothCameraMode(int CameraNum);
		void DisplayDebugScrollUp();
		void DisplayDebugScrollReleased();
		void DisplayDebugScrollDown();
		void ClearSpectatorCams();
		void AddTurnAcceleration(float Val, int Axis);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLStoreWidget
	 * Size -> 0x0000 (FullSize[0x03B0] - InheritedSize[0x03B0])
	 */
	class UTBLStoreWidget : public UTBLScreenWidget
	{
	public:
		void OnStoreScreenOpen();
		void BuildStoreOffers(TArray<struct FStoreOfferItem> OfferIds);
		void BuildAddOnOffers(TArray<struct FStoreOfferItem> OfferIds);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLSystemLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLSystemLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_WasRecentlyRenderedOnScreen(class AActor* InActor, float InTolerance);
		void STATIC_UpdateActorsTags(class AActor* Actor, TArray<class FName> Tags, class UObject* WorldContextObject);
		void STATIC_TBLSetEquippedItemsOnFire(class AActor* Actor, float Amount, class UDamageSource* DamageSource);
		void STATIC_TBLApplyDamage(class AActor* DamagedActor, float Amount, class UDamageSource* DamageSource, class AActor* DamageCauser, class AInventoryItem* InventoryItem, bool bOverrideImpactPoint, const struct FVector& ImpactPointOverride, class AActor* DamageInstigator);
		void STATIC_StopSoundById(int PlayingID);
		TArray<class ATBLTeam*> STATIC_SortTeamArrayByTickets(TArray<class ATBLTeam*> Teams);
		TArray<class ATBLTeam*> STATIC_SortTeamArrayByScore(TArray<class ATBLTeam*> Teams);
		TArray<class ATBLPlayerState*> STATIC_SortPlayerStateArrayByRecentlyJoined(TArray<class ATBLPlayerState*> PlayerStates);
		TArray<class ATBLPlayerState*> STATIC_SortPlayerStateArrayByPlayerScoreNoMatchBonus(TArray<class ATBLPlayerState*> PlayerStates);
		TArray<class ATBLPlayerState*> STATIC_SortPlayerStateArrayByPlayerScore(TArray<class ATBLPlayerState*> PlayerStates);
		TArray<class ATBLPlayerState*> STATIC_SortPlayerStateArrayByPlayerKills(TArray<class ATBLPlayerState*> PlayerStates);
		TArray<struct FGameModeMessage> STATIC_SortGameModeMessagesByPriority(TArray<struct FGameModeMessage> GameModeMessages);
		void STATIC_SortActorArray(TArray<class AActor*> InActors, const class FScriptDelegate& SortDelegate, class UObject* BoolContainer, const class FName& BoolPropertyName, TArray<class AActor*>* OutActors);
		bool STATIC_ShouldUsePIEJoinGameFlow(class UObject* WorldContextObject);
		bool STATIC_ShouldUseLegacyFXSoundFunction(class UObject* WorldContextObject);
		void STATIC_SetupCubeBrushInConstructionScript(class AVolume* Volume);
		void STATIC_SetupBlueprintVolumeSubclassBrushInConstructionScript(class AVolume* Volume);
		void STATIC_SetShowBigNotification(class UObject* WorldContextObject);
		struct FTimerHandle STATIC_SetNonResettingTimer(class UObject* WorldContextObject, float Time, bool Looping, const class FScriptDelegate& Event);
		void STATIC_SetNDASigned(bool NDASigned, class UObject* WorldContextObject);
		void STATIC_SetComponentsEnabled(class AActor* Actor, int ComponentFlags, bool bEnabled);
		void STATIC_SetAlwaysOnMusicManagerState(class UObject* WorldContextObject, TBL_EAlwaysOnMusicState NewState);
		void STATIC_SetActorComponentCanAffectNavigation(class UActorComponent* Component, bool bCanAffectNavigation);
		struct FTBL_FReplicatedDateTime STATIC_ReplicatedDateTime(const struct FDateTime& ReplDateTime);
		void STATIC_RenameComponentToStableName(class UActorComponent* Component, const class FString& NamePrefix, int ComponentId);
		void STATIC_RemoveTagFromAllActors(const class FName& Tag, class UObject* WorldContextObject);
		void STATIC_RemoveTagFromActor(class AActor* Actor, const class FName& Tag, class UObject* WorldContextObject);
		void STATIC_RemovePlayersWhoAreDeadFromPlayerStateArray(TArray<class ATBLPlayerState*>* PlayerStates);
		void STATIC_RemovePlayersInPartiesFromPlayerStateArray(TArray<class ATBLPlayerState*>* PlayerStates);
		class FString STATIC_RemovePiePrefixFromMapName(const class FString& MapNameString);
		class UAkComponent* STATIC_PlaySoundOnActorWithParams(class UAkAudioEvent* SoundEvent, class AActor* Actor, const class FName& AttachSocket, TArray<struct FSoundSwitchEntry> Switches, TArray<struct FSoundRTPCEntry> RtpcValues, bool bPrintEvents);
		class UAkComponent* STATIC_PlaySoundOnActor(class UAkAudioEvent* SoundEvent, class AActor* Actor, const class FName& AttachSocket, bool bPrintEvents);
		int STATIC_PlaySoundAtLocationWithParams(class UAkAudioEvent* SoundEvent, const struct FVector& Location, const struct FRotator& Rotation, TArray<struct FSoundStateEntry> States, TArray<struct FSoundRTPCEntry> RtpcValues, class UObject* WorldContextObject, bool bPrintEvents);
		int STATIC_PlaySoundAtLocation(class UAkAudioEvent* SoundEvent, const struct FVector& Location, const struct FRotator& Rotation, class UObject* WorldContextObject, bool bPrintEvents);
		void STATIC_PlayDemo(const class FString& DemoName, class UObject* WorldContextObject);
		void STATIC_MarkReplicationDirty();
		struct FTBL_FGoreEvent STATIC_MakeGoreEvent(const class FName& InBoneName, TBL_EHeadGoreAction InHeadGoreAction, TBL_ELimbGoreAction InLimbGoreAction, const struct FVector& InImpulse, bool bInSpawnedItem, bool bKillingBlow);
		struct FDamageTakenEvent STATIC_MakeDamageTakenEvent(float InDamage, class UDamageSource* InDamageSource, class AActor* InDamageCauser, class AActor* InDamageTaker, class AActor* InDamageInstigator, bool InbKillingBlow, bool InbSuicide, bool InbEnteredKillVolume, const struct FHitResult& InHitResult, class UAbilitySpec* InAbilitySpec, const struct FVector_NetQuantizeNormal& InHitDirection, const class FName& InDamageTakerCombatState, class AInventoryItem* InInventoryItem, class AActor* InProjectile, const class FName& InAttackName);
		class UObject* STATIC_LoadSoftObjectSynchronously(class UObject* WorldContextObject);
		class UClass* STATIC_LoadSoftClassSynchronously(class UObject* WorldContextObject);
		void STATIC_LevelBlueprintGetFirstStage(class UObject* WorldContextObject);
		void STATIC_LevelBlueprintEvent(class UObject* WorldContextObject, const class FName& EventName);
		bool STATIC_IsWindowsOSSInitialized();
		bool IsValidUser(const struct FBlueprintOnlineUser& InUser);
		bool STATIC_IsValidClassID();
		bool STATIC_IsTutorial(class UObject* WorldContextObject);
		bool STATIC_IsThrownImpactSoundDebugEnabled(class UObject* WorldContextObject);
		bool STATIC_IsSteamInitialized();
		bool STATIC_IsSoundEnabled(class UObject* WorldContextObject);
		bool STATIC_IsSimulatingInEditor();
		bool STATIC_IsRunningAutomatedTesting(class UObject* WorldContextObject);
		bool STATIC_IsRangedWeapon(class AInventoryItem* Weapon);
		bool STATIC_IsRangedOrThrownAttack(const class FName& AttackName);
		bool STATIC_IsPartOfFaction(TBL_EFaction Target, TBL_EFaction Other);
		bool STATIC_IsOfficialServer();
		bool STATIC_IsMergedMesh(class ACharacter* Character);
		bool STATIC_IsMergedMaterial(class ACharacter* Character);
		bool STATIC_IsFirstMainMenuLoad();
		bool STATIC_IsDemoMode(class UObject* WorldContextObject);
		bool STATIC_IsControllerMounted(class AController* Controller, class UClass* SiegeEngineClass);
		bool STATIC_IsBot(class AActor* Actor);
		bool STATIC_IsAutomationTesting();
		void STATIC_InterpolateVectorOverTime(class UObject* WorldContextObject, const struct FVector& StartValue, const struct FVector& EndValue, float Duration, bool bEaseOut, bool bEaseIn, float EasingExp, class UCurveFloat* Curve, const class FScriptDelegate& UpdateDelegate, TBL_EInterpolateOverTimeAction InterpolateAction, const struct FLatentActionInfo& LatentInfo, bool bCallUpdatesParams);
		void STATIC_InterpolateFloatOverTime(class UObject* WorldContextObject, float StartValue, float EndValue, float Duration, bool bEaseOut, bool bEaseIn, float EasingExp, class UCurveFloat* Curve, const class FScriptDelegate& UpdateDelegate, TBL_EInterpolateOverTimeAction InterpolateAction, const struct FLatentActionInfo& LatentInfo, bool bCallUpdatesParams);
		bool STATIC_HasRole(class AActor* Actor, int Role);
		bool STATIC_HasActorBegunPlay(class AActor* Actor);
		TBL_ETBLWorldType STATIC_GetWorldType(class UObject* WorldContextObject);
		class FString STATIC_GetUnlocalizedGameModeFromMapString(const class FString& MapNameString);
		int STATIC_GetTotalPlayerCount(class UObject* WorldContextObject);
		class UFont* STATIC_GetTinyFont();
		float STATIC_GetTimeSeconds(class AActor* Actor);
		class FText STATIC_GetTextFromNamespace(const class FString& Namespace, const class FString& Key);
		TArray<class ATBLTeam*> STATIC_GetTeamsFromFactions(class UObject* WorldContextObject, TArray<TBL_EFaction> Factions);
		class ATBLTeam* STATIC_GetTeamFromFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		class ATBLLevelScriptActor* STATIC_GetTBLLevelScriptActor(class UObject* WorldContextObject, bool* bIsValid);
		class UTBLGameUserSettings* STATIC_GetTBLGameUserSettings();
		class ATBLGameState* STATIC_GetTBLGameState(class UObject* WorldContextObject);
		class ATBLGameMode* STATIC_GetTBLGameMode(class UObject* WorldContextObject);
		class ATBLCharacter* STATIC_GetTBLCharacterFromController(class AController* Controller);
		class ATBLCharacter* STATIC_GetTBLCharacter(class APawn* Pawn);
		class UStatsComponent* STATIC_GetStatsComponent(class AActor* Actor);
		class UStaticMeshComponent* STATIC_GetStaticMeshComponent(class AActor* Actor);
		class UFont* STATIC_GetSmallFont();
		bool STATIC_GetShowBigNotification(class UObject* WorldContextObject);
		float STATIC_GetServerTimeoutTime(class UObject* WorldContextObject);
		struct FVector STATIC_GetScreenPositionForLocation(class APlayerController* PlayerController, const struct FVector& Location);
		struct FVector STATIC_GetScreenPositionForActor(class APlayerController* PlayerController, class AActor* Actor, const struct FVector& RelativeLocation, bool bUseActorBoundsOrigin);
		TArray<struct FGameModeMessageTable> STATIC_GetScoredStageGameModeMessageRows(class UDataTable* GameModeMessageDataTable, int StageNum, int NewScore, int LastScore);
		class AActor* STATIC_GetPossessorActor(class AActor* Actor);
		TArray<class ATBLPlayerState*> STATIC_GetPlayerStatesFromFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		TArray<class ATBLPlayerState*> STATIC_GetPlayerStates(class UObject* WorldContextObject);
		class ATBLPlayerState* STATIC_GetPlayerStateFromUniqueNetId(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& UniqueId);
		TArray<class AController*> STATIC_GetPlayersFromFactions(class UObject* WorldContextObject, TArray<TBL_EFaction> Factions, bool AllowBots, bool AllowNPCs);
		class FString STATIC_GetPlayerDebugName(class APlayerState* PlayerState);
		struct FactionNumbers STATIC_GetPlayerCountsFromFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		TArray<struct FPersonalityEmoteTableRow> STATIC_GetPersonalityEmotes();
		class ATBLTeam* STATIC_GetOppositeTeam(class UObject* WorldContextObject, class ATBLTeam* Team);
		TBL_EFaction STATIC_GetOppositeFaction(TBL_EFaction Faction);
		int STATIC_GetOnlineStatWeaponTakedowns(class ATBLPlayerState* State, TBL_EWeaponTag WeaponTag);
		int STATIC_GetOnlineStatWeaponKills(class ATBLPlayerState* PlayerState, TBL_EWeaponTag Weapon);
		int STATIC_GetOnlineStatWeaponDeaths(class ATBLPlayerState* PlayerState, TBL_EWeaponTag Weapon);
		int STATIC_GetOnlineStatSubClassTakedowns(class ATBLPlayerState* PlayerState, TBL_ECharacterClass CharacterClass);
		int STATIC_GetOnlineStatSubClassPlaytime(class ATBLPlayerState* PlayerState, TBL_ECharacterClass CharacterClass);
		int STATIC_GetOnlineStatSubClassKills(class ATBLPlayerState* PlayerState, TBL_ECharacterClass CharacterClass);
		int STATIC_GetOnlineStatSubClassDeaths(class ATBLPlayerState* PlayerState, TBL_ECharacterClass CharacterClass);
		TBL_EOnlineStat STATIC_GetOnlineStatFromWeaponTag(TBL_EWeaponTag WeaponTag);
		TBL_EOnlineStat STATIC_GetOnlineStatFromCharacterClass(TBL_ECharacterClass CharacterClass);
		int STATIC_GetOnlineStatCommendations(class ATBLPlayerState* PlayerState);
		int STATIC_GetOnlineStatBattlecries(class ATBLPlayerState* PlayerState);
		class FText STATIC_GetObjectiveScoreTextFromEnum(TBL_EObjectivePointCategory ObjPointCat);
		int STATIC_GetNumPlayers(class UObject* WorldContextObject, bool IncludeBots, bool IncludeNPCs);
		struct FTeamDisplayInfo STATIC_GetNeutralTeamDisplayInfo(class UObject* WorldContextObject);
		struct FVector STATIC_GetNegativeMaxFloatVector();
		float STATIC_GetNegativeMaxFloat();
		bool STATIC_GetNDASigned(class UObject* WorldContextObject);
		class FText STATIC_GetNameFromCharacterClass(class UClass* CharacterClass);
		class UMovementModifierComponent* STATIC_GetMovementModifierComponent(class AActor* Actor);
		class UMovementComponent* STATIC_GetMovementComponent(class AActor* Actor);
		int STATIC_GetMaxPlayersForServer(class UObject* WorldContextObject);
		float STATIC_GetMaxFloat();
		class UTBLMapSummary* STATIC_GetMapSummary(class UObject* WorldContextObject, const class FString& MapFileNameWithOptions, bool bCheckGameInstance);
		class FString STATIC_GetMapNameString(class UObject* WorldContextObject);
		class FText STATIC_GetLocalizedWeaponTagText(TBL_EWeaponTag WeaponTag);
		class FText STATIC_GetLocalizedTextFromItemUnlock(TBL_EOnlineItemUnlockType ItemUnlockType);
		class FText STATIC_GetLocalizedMapName(const class FString& MapNameString, class FString* MapNameKey);
		class FText STATIC_GetLocalizedItemLevelTypeText(TBL_EOnlineStat ItemLevelType);
		class FText STATIC_GetLocalizedGameModeTypeText(TBL_EGameModeType GamemodeType);
		bool STATIC_GetLocalizedGameModeFromMapString(const class FString& MapNameString, class FText* LongForm, class FText* ShortForm);
		class FText STATIC_GetLocalizedCharacterClassText(TBL_ECharacterClass CharacterClass);
		class ULoadoutSelection* STATIC_GetLoadoutSelectionDefaultObj(class UClass* LoadoutSelectionClass);
		class ALevelScriptActor* STATIC_GetLevelScriptActor(class UObject* WorldContextObject);
		float STATIC_GetLastServerReceivePacketTime(class UObject* WorldContextObject);
		class AActor* STATIC_GetKilledActor(const struct FDeathDamageTakenEvent& Event);
		class FText STATIC_GetInventorySlotTextFromEnum(TBL_EInventorySlot InventorySlotType);
		class UTexture2D* STATIC_GetIconFromCharacterClass(class UClass* CharacterClass);
		class FName STATIC_GetHitDirectionName(class AActor* HitActor, const struct FVector& HitDirection);
		class FString STATIC_GetGameModeNameString(class UObject* WorldContextObject);
		TArray<struct FGameModeMessageTable> STATIC_GetGameModeMessageRows(class UDataTable* GameModeMessageDataTable, TArray<class FString> EventTags);
		class FString STATIC_GetFullBuildVersionString();
		class FString STATIC_GetFriendUserId(const struct FBlueprintOnlineUser& InFriend);
		class FString STATIC_GetFriendDisplayName(const struct FBlueprintOnlineUser& InFriend);
		void STATIC_GetDisplayInfoFromCharacterClass(class UClass* CharacterClass, struct FCharacterDisplayInfo* DisplayInfo);
		class UTBLDialogManager* STATIC_GetDialogManager(class UObject* WorldContextObject);
		int STATIC_GetDemoTeam(class UObject* WorldContextObject);
		class FString STATIC_GetDemoServer(class UObject* WorldContextObject);
		class FString STATIC_GetDemoPlayerName(class UObject* WorldContextObject);
		TBL_EFaction STATIC_GetDefendingFaction(class UObject* WorldContextObject);
		class UObject* STATIC_GetDefaultObjectFromStringReference(const struct FSoftObjectPath& StringReference);
		class AInventoryItem* STATIC_GetDefaultInventoryItemObject(class UClass* InventoryItemClass);
		class ATBLCharacter* STATIC_GetDefaultCharacterFromCharacterClass(class UClass* CharacterClass);
		struct FDateTime STATIC_GetDateTime(const struct FTBL_FReplicatedDateTime& ReplDateTime);
		class FName STATIC_GetDamageSourceName(class UDamageSource* DamageSource);
		class UTexture* STATIC_GetDamageSourceIconTexture(class UDamageSource* DamageSource);
		class FText STATIC_GetDamageSourceDisplayName(class UDamageSource* DamageSource);
		TArray<struct FCustomPersonalityEmotesTableRow> STATIC_GetCustomPersonalityEmotes();
		bool STATIC_GetCustomPersonalityEmoteOverride(const struct FPersonalityEmoteTableRow& Emote, TBL_EAudioPersonalityType PersonalityType, struct FPersonalityEmoteTableRow* OutRow);
		class UCustomizationComponent* STATIC_GetCustomizationComponent(class AActor* Actor);
		class FString STATIC_GetCurrentServerNameString(class UObject* WorldContextObject);
		TBL_ECrowdControlDirection STATIC_GetCrowdControlDirection(const class FName& Direction);
		TArray<class AController*> STATIC_GetControllersFromFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		class UContextVOManager* STATIC_GetContextVoObject(class UObject* WorldContextObject);
		class UConditionsComponent* STATIC_GetConditionsComponent(class AActor* Actor);
		class FString STATIC_GetClassPathName(class UClass* InClass);
		class UClass* STATIC_GetCharacterSubclassForPrimaryWeapon(class UClass* CharacterClass, class UClass* PrimaryWeapon);
		TArray<class UClass*> STATIC_GetCharacterSubclasses(class UClass* ParentClass);
		TArray<class ATBLCharacter*> STATIC_GetCharactersFromFactions(class UObject* WorldContextObject, TArray<TBL_EFaction> Factions);
		TBL_EAudioClassType STATIC_GetCharacterClassType(class AActor* Actor);
		class UClass* STATIC_GetCharacterClassFromSubclass(class UClass* Subclass);
		class FString STATIC_GetBuildNumber();
		TBL_EBuildFinality STATIC_GetBuildFinality();
		TBL_EFaction STATIC_GetAttackingFaction(class UObject* WorldContextObject);
		TArray<class AActor*> STATIC_GetAttachedActors(class AActor* Actor);
		class AAlwaysOnMusicManager* STATIC_GetAlwaysOnMusicManager(class UObject* WorldContextObject);
		void STATIC_GetAllTeamsPlayersWithExclusion(class UObject* WorldContextObject, TArray<TBL_EFaction> ExcludeFactions, TArray<class ATBLTeam*>* IncludedTeams, TArray<class AController*>* IncludedPlayers);
		TArray<class FString> STATIC_GetAllNames(TBL_ENameType NameType);
		void STATIC_GetAllMapNames_EditorOnly(TArray<class FString>* MapNames);
		TArray<class FString> STATIC_GetAllFrontendMovieURLs();
		TArray<class UActorComponent*> STATIC_GetAllComponentsFromClass(class UClass* ActorClass);
		TArray<class ATBLCharacter*> STATIC_GetAllCharactersFromFaction(class UObject* WorldContextObject, TBL_EFaction Faction);
		void STATIC_GetAllActorsWithTag(class UObject* WorldContextObject, const class FName& Tag, TArray<class AActor*>* OutActors);
		TArray<class AActor*> STATIC_GetAllActorsWithComponentsWithExclusions(TArray<class UClass*> ComponentClasses, TArray<class UClass*> ExcludeComponentClasses, TArray<class UClass*> OptionalActorClasses, class UObject* WorldContextObject);
		TArray<class AActor*> STATIC_GetAllActorsWithComponents(TArray<class UClass*> ComponentClasses, class UObject* WorldContextObject);
		class ATBLTeam* STATIC_GetActorTeam(class AActor* Actor);
		void STATIC_GetActorsWithTagClassSpecifier(const class FName& Tag, class UClass* ActorClass, class UObject* WorldContextObject, TArray<class AActor*>* OutActors);
		TArray<class AActor*> STATIC_GetActorsWithTag(const class FName& Tag, class UObject* WorldContextObject);
		void STATIC_GetActorMaterials(class AActor* Actor, TArray<class UPrimitiveComponent*>* OutComponents, TArray<class UMaterialInstanceDynamic*>* OutMaterials);
		TBL_EFaction STATIC_GetActorFaction(class AActor* Actor);
		class AInventoryItem* STATIC_GetActorEquippedWeaponByState(class AActor* Actor, TBL_EEquippedState EquippedState);
		class AInventoryItem* STATIC_GetActorEquippedWeapon(class AActor* Actor);
		class UActorComponent* STATIC_GetActorComponentWithTag(class AActor* Actor, const class FName& Tag);
		class UActorComponent* STATIC_GetActorComponent(class AActor* Actor, class UClass* Class);
		class AInventoryItem* STATIC_GetActorAttackingWeapon(class AActor* Actor);
		class FText STATIC_GetActionBindingTextForInventorySlot(TBL_EInventoryItemSlot InventoryItemSlot, class UObject* WorldContextObject, struct FInputActionKeyMapping* ActionMapping);
		bool STATIC_GetAbilityConfigLoaded(class UObject* WorldContextObject);
		class UAbilityConfig* STATIC_GetAbilityConfig(class UObject* WorldContextObject);
		class UAbilitiesComponent* STATIC_GetAbilitiesComponent(class AActor* Actor);
		class FString STATIC_GenerateRandomName(TBL_ENameType NameType);
		class FString STATIC_GenerateHashName(const class FString& StringToHash, TBL_ENameType NameType);
		struct FLinearColor STATIC_GammaCorrectLinearColor(const struct FLinearColor& LinCol, float Gamma);
		void STATIC_FrameDelay(class UObject* WorldContextObject, int NumFramesToDelay, const struct FLatentActionInfo& LatentInfo);
		TArray<struct FGameModeMessage> STATIC_FormatGameModeMessages(TArray<struct FGameModeMessageTable> Messages);
		void STATIC_ForceUpdateChildTransforms(class USceneComponent* Component);
		void STATIC_ForcePlayersDropCarryable(class UObject* WorldContextObject, TBL_EFaction Faction, class UClass* InventoryType);
		void STATIC_ForcePlayerDropCarryable(class ATBLCharacter* Character, class UClass* InventoryType);
		class UClass* STATIC_FindBlueprintClass(const class FString& BlueprintName, class UClass* ParentClass);
		void STATIC_EndProfilerStat(const struct FProfilerStat& ProfilerStat);
		void STATIC_DumpPlayers(class UWorld* World);
		void STATIC_DoKeyEvent(class AActor* Actor, const class FName& ActionName, Engine_EInputEvent KeyEvent);
		void STATIC_DoKeyAxis(class AActor* Actor, const class FName& ActionName, float AxisValue);
		bool STATIC_DoesActorHaveInventoryItem(class AActor* Actor, class UClass* InventoryItem, bool bCanBeChildOf);
		void STATIC_DisableComponentsOnServer(class AActor* Actor, int DisableFlags);
		void STATIC_DisableComponentsOnBotClient(class AActor* Actor);
		void STATIC_DestroyActorComponent(class UActorComponent* Component);
		class UStatsComponent* STATIC_CreateStatsComponent(class AActor* Actor);
		class AActor* STATIC_CreateSoundActor(class AActor* ReferenceActor, const struct FVector& OffsetLocation);
		void STATIC_ClearCharacterRuntimeAssetCache();
		void STATIC_CancelAllLatentActionsForObject(class UObject* Object);
		void STATIC_BreakCanvasIcon(const struct FCanvasIcon& Icon, class UTexture** Texture, float* U, float* V, float* UL, float* VL);
		bool STATIC_BlueprintOnlineUserEquals(const struct FBlueprintOnlineUser& A, const struct FBlueprintOnlineUser& B);
		void STATIC_BeginProfilerStat(const struct FProfilerStat& ProfilerStat);
		void STATIC_AwardScoreToPlayers(class UObject* WorldContextObject, TArray<class ATBLPlayerState*> PlayerStates, const class FName& RowName, TBL_EOnlineStat Stat);
		void STATIC_AwardOverrideScoreToPlayer(const class FName& RowName, int Score, class ATBLPlayerState* Player, class ATBLPlayerState* OtherPlayer);
		class USceneComponent* STATIC_AttachComponentFromSCS(class UClass* Class, class AActor* TargetActor, class USceneComponent* TargetComponent, const class FName& ComponentName);
		void STATIC_AtlasCharacterTextures(class ACharacter* Character);
		bool STATIC_AreHardwarePlatformsFromTheSameFirstParty(TBL_EHardwarePlatform A, TBL_EHardwarePlatform B);
		bool STATIC_AddTagsToActor(class AActor* Actor, TArray<class FName> Tags, class UObject* WorldContextObject);
		void STATIC_AddClosedCaptionLine(const class FText& OriginString, const class FText& ChatString, class AActor* OriginatingActor, TBL_EClosedCaptionType Type, class UObject* WorldContextObject, bool IgnoreDistance);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLTeam
	 * Size -> 0x00D0 (FullSize[0x0328] - InheritedSize[0x0258])
	 */
	class ATBLTeam : public AInfo
	{
	public:
		TBL_EFaction                                               Faction;                                                 // 0x0258(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z2F7[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        MaxNumPlayers;                                           // 0x025C(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTeamDisplayInfo                                    DisplayInfo;                                             // 0x0260(0x0048) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      PawnClasses;                                             // 0x02A8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      PawnSubclasses;                                          // 0x02B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsTeamAttacking;                                        // 0x02C8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsTeamDefending;                                        // 0x02C9(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YJID[0x2];                                   // 0x02CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Tickets;                                                 // 0x02CC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxTickets;                                              // 0x02D0(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TiebreakScore;                                           // 0x02D4(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Kills;                                                   // 0x02D8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        RoundsWon;                                               // 0x02DC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FRoundResult>                                RoundResults;                                            // 0x02E0(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Score;                                                   // 0x02F0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OY7X[0x34];                                  // 0x02F4(0x0034) MISSED OFFSET (PADDING)

	public:
		void SwapWithTeam(class ATBLTeam* Other);
		void SetTiebreakScore(float SecondaryScore);
		void SetTeamTickets(float NewTickets);
		void SetTeamScore(const struct FTeamScoreEvent& ScoreEvent);
		void SetTeamMaxTickets(float MaxNumTickets);
		void IncrementKills(int Delta);
		float GetTeamScore();
		void CommitRoundResult(bool bWonRound);
		void BroadcastLocalizedChat(const class FText& Msg, TBL_EChatType Type);
		void BroadcastChat(class AActor* Sender, const class FString& Msg, TBL_EChatType Type);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLTeamPlayerStart
	 * Size -> 0x0050 (FullSize[0x02E0] - InheritedSize[0x0290])
	 */
	class ATBLTeamPlayerStart : public ATBLPlayerStart
	{
	public:
		unsigned char                                              Factions[0x50];                                          // 0x0290(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		void AddRemoveFaction(TBL_EFaction Faction, TBL_ETeamPlayerStartAction Action);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLTextBlock
	 * Size -> 0x0198 (FullSize[0x0820] - InheritedSize[0x0688])
	 */
	class UTBLTextBlock : public URichTextBlock
	{
	public:
		struct FSlateColor                                         ColorAndOpacity;                                         // 0x0688(0x0028) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      ColorAndOpacityDelegate;                                 // 0x06B0(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      GetKeybindingWidgetDelegateEvent;                        // 0x06C0(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WK5J[0x20];                                  // 0x06D0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateFontInfo                                      Font;                                                    // 0x06F0(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        Color;                                                   // 0x0748(0x0010) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UWidgetDecorator*>                            KeyBindingDecorators;                                    // 0x0758(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDataTable*                                          EmbeddedWidgetsTable;                                    // 0x0768(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, class UClass*>                         RunNameToWidgetClass;                                    // 0x0770(0x0050) Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FVector2D                                           ShadowOffset;                                            // 0x07C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        ShadowColorAndOpacity;                                   // 0x07C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptDelegate                                      ShadowColorAndOpacityDelegate;                           // 0x07D8(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           IconSize;                                                // 0x07E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              ElementRegexPattern;                                     // 0x07F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              AttributeRegexPattern;                                   // 0x0800(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bOverrideDefaultTextStyle;                               // 0x0810(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GIMO[0x7];                                   // 0x0811(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              DefaultEmbeddedKeyBindingClass;                          // 0x0818(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetWrapTextAt(float InWrapTextAt);
		void SetShadowOffset(const struct FVector2D& InShadowOffset);
		void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
		void SetFontSize(int Size);
		void SetFont(const struct FSlateFontInfo& InFontInfo);
		void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TextureAtlasManager
	 * Size -> 0x01D0 (FullSize[0x01F8] - InheritedSize[0x0028])
	 */
	class UTextureAtlasManager : public UObject
	{
	public:
		unsigned char                                              UnknownData_GW5J[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTexture2D*>                                  BuiltTextures;                                           // 0x0040(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              RenderTargetForTextureType;                              // 0x0050(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              RenderTargetTemp;                                        // 0x0058(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              RenderTargetForHeraldry;                                 // 0x0060(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHeraldryRenderTargetInitialized;                        // 0x0068(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O4W1[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            HeraldryRenderMID;                                       // 0x0070(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstanceDynamic*                            OriginalHelmetMID;                                       // 0x0078(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UObject*>                                     ReferencedObjects;                                       // 0x0080(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        RuntimeMorphTargets;                                     // 0x0090(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTBLTextureCacheBuilder*                             CacheBuilder;                                            // 0x00A0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NSSP[0x48];                                  // 0x00A8(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USkeletalMeshComponent*>                      SkeletalMeshComponents;                                  // 0x00F0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USkeletalMesh*>                               SourceMeshList;                                          // 0x0100(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class USkeletalMesh*, double>                         LoadedSourceMeshList;                                    // 0x0110(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              LoadingSourceMeshList[0x10];                             // 0x0160(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnknownData_QKAL[0x8];                                   // 0x0170(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USkeletalMeshComponent*>                      SourceComponentList;                                     // 0x0178(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, float>                                   CompositeMorphTargets;                                   // 0x0188(0x0050) Transient, NativeAccessSpecifierPrivate
		class USkeletalMesh*                                       CompositeMesh;                                           // 0x01D8(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R0HP[0x18];                                  // 0x01E0(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnAssetCacheComplete(class URuntimeAssetCacheBuilder_ObjectBase* CachedAssetBuilder, bool Success);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLTitleDataLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLTitleDataLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_IsTrialModeEnabled();
		bool STATIC_IsTrialModeClient();
		bool STATIC_IsStoreEnabled();
		bool STATIC_IsServerBrowserEnabled();
		bool STATIC_IsQuickMatchEnabled();
		bool STATIC_IsMatchmakingEnabled();
		bool STATIC_IsGameEnabled();
		bool STATIC_HasTitleNews();
		bool STATIC_HasTitleData();
		bool STATIC_HasMotd();
		TArray<struct FTitleNews> STATIC_GetTitleNews();
		TMap<class FString, class FString> STATIC_GetTitleData();
		class FName STATIC_GetSpecialEventName();
		class FString STATIC_GetQuickplayQueueName();
		struct FMotd STATIC_GetMotd();
		bool STATIC_GetMatchmakingQueue(const class FName& ID, struct FMatchmakingQueue* Queue);
		bool STATIC_GetHostedMatchmakingQueue(struct FMatchmakingQueue* OutQueue);
		void STATIC_GetAllMatchmakingQueues(TArray<struct FMatchmakingQueue>* Queues);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLTitleScreen
	 * Size -> 0x0090 (FullSize[0x0440] - InheritedSize[0x03B0])
	 */
	class UTBLTitleScreen : public UTBLScreenWidget
	{
	public:
		unsigned char                                              UnknownData_GB0G[0x4];                                   // 0x03B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bSavedHasAgreedToTOS;                                    // 0x03B4(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FCYJ[0x1];                                   // 0x03B5(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TBL_ETitleScreenMode                                       State;                                                   // 0x03B6(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QXU5[0x1];                                   // 0x03B7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                ErrorMessageTitle;                                       // 0x03B8(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                ErrorMessageBody;                                        // 0x03D0(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0A3J[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              EGSDevAuth_Address;                                      // 0x03F0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              EGSDevAuth_Client;                                       // 0x0400(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5AT5[0x30];                                  // 0x0410(0x0030) MISSED OFFSET (PADDING)

	public:
		bool ShouldUsePCStyleWelcomeScreen();
		bool ShouldShowEgsDevLoginCredentials();
		void OnUserPressedStart(int ControllerIndex);
		void OnUserPressedOfflineMode(int ControllerIndex);
		void OnUserPressedLogin(int ControllerIndex, const class FString& InEGSDevAuth_Address, const class FString& InEGSDevAuth_Client);
		void OnUserLoginDowngraded();
		void OnTOSDeclined();
		void OnTOSAgreed();
		void OnPlayTutorialDeclined();
		void OnPlayTutorialAccepted();
		void Logout();
		void K2_OnStateChanged(TBL_ETitleScreenMode NewState);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.CharacterCustomizationSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UCharacterCustomizationSettings : public UObject
	{
	public:
		TArray<struct FSwatchSelectionsByClass>                    CustomizationSwatches;                                   // 0x0028(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLUMGSequencePlayer
	 * Size -> 0x0028 (FullSize[0x0808] - InheritedSize[0x07E0])
	 */
	class UTBLUMGSequencePlayer : public UUMGSequencePlayer
	{
	public:
		bool                                                       bIsPlayingAdvancedAnimation;                             // 0x07E0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_22JW[0x27];                                  // 0x07E1(0x0027) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLUtilityLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTBLUtilityLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SetEnabledRenderMainScene(class UObject* WorldContextObject, bool bShouldRenderMainScene);
		void STATIC_SetAudioEnemyRTPC(class UAkComponent* AkComponent, class AActor* Initiator);
		void STATIC_SaveCustomizationSettings();
		void STATIC_RecursiveSetVisibility(class UPrimitiveComponent* Root, bool bOwnerNoSee, bool bOnlyOwnerSee);
		int STATIC_RandomWeightedIntegerFromStream(TArray<float> Weights, const struct FRandomStream& InStream);
		void STATIC_LogWithCallstacks(const class FString& Message);
		void STATIC_LoadCinematicSublevel(class UObject* WorldContextObject, const class FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
		TBL_ESonyAppType STATIC_GetSonyPlatformRegion();
		TArray<struct FSwatchSelectionsByClass> STATIC_GetSavedCustomizationSettings();
		TBL_EPlatformType STATIC_GetPlatformType();
		void STATIC_GetMatchingChildComponentsByName(class USceneComponent* RootComponent, const class FString& MatchName, TArray<class USceneComponent*>* OutMatches);
		float STATIC_GetClosestPointOnCollision(class AActor* Actor, const struct FVector& Point, Engine_ECollisionChannel CollisionChannel, struct FVector* ClosestPointOnCollision);
		float STATIC_GetAzimuth(const struct FVector& Direction, const struct FVector& Forward);
		class FName STATIC_FindClosestSocket(class USceneComponent* Component, const struct FVector& Location, const class FString& SocketSubstring);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLWeaponAnimInstance
	 * Size -> 0x00A0 (FullSize[0x0550] - InheritedSize[0x04B0])
	 */
	class UTBLWeaponAnimInstance : public UTBLAnimInstance
	{
	public:
		class AInventoryItem*                                      InventoryItem;                                           // 0x04A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       Is3p;                                                    // 0x04B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsAddedToInventory;                                      // 0x04B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsEquipped;                                              // 0x04B2(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsCarryable;                                             // 0x04B3(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                AttackName;                                              // 0x04B4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                CombatState;                                             // 0x04BC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsLoaded;                                                // 0x04C4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A5WR[0x3];                                   // 0x04C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                PreviousCombatState;                                     // 0x04C8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase;                                        // 0x04D0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase1P;                                      // 0x04D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAnimationSet*                                       AnimationSetBase3P;                                      // 0x04E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        ReloadStates;                                            // 0x04E8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SH8D[0x58];                                  // 0x04F8(0x0058) MISSED OFFSET (PADDING)

	public:
		void StartWeaponAnimation();
		void OnDropped(class AInventoryItem* Item, class ATBLCharacter* Character, const struct FTransform& Transform);
		void OnAnimationSetChanged(const class FName& AnimSetName, const struct FAnimationSetDataTable& AnimInfo, class AInventoryItem* InInventoryItem);
		void EventOnCombatStateChanged(const class FName& PreviousState, const class FName& NewState);
		void EndWeaponAnimation();
		void AnimNotify_ShowArrow();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLWebWidget
	 * Size -> 0x00F0 (FullSize[0x01F8] - InheritedSize[0x0108])
	 */
	class UTBLWebWidget : public UWidget
	{
	public:
		unsigned char                                              UnknownData_C2B0[0x20];                                  // 0x0108(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       ShowControls;                                            // 0x0128(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowAddressBar;                                          // 0x0129(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_81YS[0x6];                                   // 0x012A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              InitialURL;                                              // 0x0130(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowErrorMessage;                                        // 0x0140(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SupportsTransparency;                                    // 0x0141(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       SupportsThumbMouseButtonNavigation;                      // 0x0142(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       ShowInitialThrobber;                                     // 0x0143(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              BackgroundColor;                                         // 0x0144(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnLoadCompletedEvent;                                    // 0x0148(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnSourceParsedEvent;                                     // 0x0158(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0Q76[0x20];                                  // 0x0168(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnTitleChanged;                                          // 0x0188(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnUrlChanged;                                            // 0x0198(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnBeforeNavigationEvent;                                 // 0x01A8(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OnLoadUrlEvent;                                          // 0x01B8(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KUF7[0x30];                                  // 0x01C8(0x0030) MISSED OFFSET (PADDING)

	public:
		void InitializeWidget();
		class FString GetButtonText(int ButtonIndex);
		void ClickedButton(int ButtonIndex);
		void BrowseToUrl(const class FString& URL);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLMapSummary
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UTBLMapSummary : public UObject
	{
	public:
		class FText                                                MapName;                                                 // 0x0028(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                MapDescription;                                          // 0x0040(0x0018) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TBL_EFaction                                               AttackingFaction;                                        // 0x0058(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGameModeType                                          GamemodeType;                                            // 0x0059(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XMHF[0x6];                                   // 0x005A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLWorldSettings
	 * Size -> 0x0328 (FullSize[0x0700] - InheritedSize[0x03D8])
	 */
	class ATBLWorldSettings : public AWorldSettings
	{
	public:
		class UTBLMapSummary*                                      MapSummary;                                              // 0x03D8(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                MapName;                                                 // 0x03E0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		class FText                                                MapDescription;                                          // 0x03F8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		TBL_EFaction                                               AttackingFaction;                                        // 0x0410(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseNewStageIdNumbers;                                    // 0x0411(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EGameModeType                                          GamemodeType;                                            // 0x0412(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QI95[0x5];                                   // 0x0413(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTBLGameModeSettings*                                GameModeSettings;                                        // 0x0418(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UDataTable*                                          GameModeMessageTable;                                    // 0x0420(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FStageEndingConfig                                  StageEndingConfig;                                       // 0x0428(0x0020) Edit, BlueprintVisible, BlueprintReadOnly, AssetRegistrySearchable, NativeAccessSpecifierPublic
		float                                                      DefaultContextVoFrequencyPerMin;                         // 0x0448(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DefaultContextVoNumPlayers;                              // 0x044C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASpawner*                                            BlueInitialSpawn;                                        // 0x0450(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class ASpawner*                                            RedInitialSpawn;                                         // 0x0458(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              PrologueSequence[0x28];                                  // 0x0460(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              WaitingForPlayersSequence[0x28];                         // 0x0488(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              PreparingMatchSequence[0x28];                            // 0x04B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AgathaWarmupSequence[0x28];                              // 0x04D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MasonWarmupSequence[0x28];                               // 0x0500(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              VictoryPodiumSequence[0x28];                             // 0x0528(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              SpawnerSequenceBindingPrefixes[0x50];                    // 0x0550(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              AgathaVictorySequence[0x28];                             // 0x05A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              AgathaDefeatSequence[0x28];                              // 0x05C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MasonVictorySequence[0x28];                              // 0x05F0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              MasonDefeatSequence[0x28];                               // 0x0618(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              EpilogueSequence[0x28];                                  // 0x0640(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              BlueSequence[0x28];                                      // 0x0668(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              RedSequence[0x28];                                       // 0x0690(0x0028) UNKNOWN PROPERTY: SoftObjectProperty
		class FName                                                PodiumSublevel;                                          // 0x06B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      PodiumTime;                                              // 0x06C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3ZWX[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpecialEventLevelEntry>                     SpecialEventStreamingLevels;                             // 0x06C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DefaultSpecialEventLevel;                                // 0x06D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                StatsOverrideRowName;                                    // 0x06E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       BlockLoadoutSelectionInClassSelectScreen;                // 0x06E8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CZZ5[0x7];                                   // 0x06E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              AlwaysOnMusicManagerClass;                               // 0x06F0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBotsShouldAlwaysCheckFloor;                             // 0x06F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3Z4N[0x7];                                   // 0x06F9(0x0007) MISSED OFFSET (PADDING)

	public:
		TMap<class ASpawner*, class FString> GetSpawnerSequenceBindingPrefixes();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.XCloudSizeBox
	 * Size -> 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
	 */
	class UXCloudSizeBox : public USizeBox
	{
	public:
		TBL_EXCloudWidgetBehavior                                  WidgetBehavior;                                          // 0x0158(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1ER9[0x7];                                   // 0x0159(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TBLXCloudManager
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UTBLXCloudManager : public UGameInstanceSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnGameStreamingStateChanged;                             // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QEKV[0x8];                                   // 0x0040(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnbindWidget(class UWidget* Widget, TBL_EXCloudWidgetBehavior WidgetType);
		void STATIC_SetUIScalingFactor(float ScaleFactor, class UObject* WorldContextObject);
		void STATIC_SetMaxScalingPhysicalDimensions(const struct FIntPoint& MaxDimensions, class UObject* WorldContextObject);
		bool STATIC_IsStreamingToDevice(class UObject* WorldContextObject);
		bool STATIC_IsDeviceSmallEnoughToScaleBP(class UObject* WorldContextObject);
		void BindWidget(class UWidget* Widget, TBL_EXCloudWidgetBehavior WidgetType);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TDMLTSGameMode
	 * Size -> 0x0018 (FullSize[0x11C0] - InheritedSize[0x11A8])
	 */
	class ATDMLTSGameMode : public ALTSGameMode
	{
	public:
		class ULTSTDMGameModeSettings*                             LTSTDMGameModeSettings;                                  // 0x11A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1IQ1[0x10];                                  // 0x11B0(0x0010) MISSED OFFSET (PADDING)

	public:
		void PostWarmupGivePlayersControl();
		void OnReachedEndTime();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.LTSTDMGameModeSettings
	 * Size -> 0x0038 (FullSize[0x0158] - InheritedSize[0x0120])
	 */
	class ULTSTDMGameModeSettings : public ULTSGameModeSettings
	{
	public:
		int                                                        TicketsPerTeam;                                          // 0x0120(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2MUL[0x4];                                   // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         TicketsNumPlayersBonus;                                  // 0x0128(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MatchTimeSeconds;                                        // 0x0130(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4MZJ[0x4];                                   // 0x0134(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         MatchTimeNumPlayersBonus;                                // 0x0138(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FTDMRout>                                    AutomaticRouts;                                          // 0x0140(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoStartAllSequences;                                  // 0x0150(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bAutoStopSequencesOnTicketless;                          // 0x0151(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K2TU[0x6];                                   // 0x0152(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TeamCapturePointComponent
	 * Size -> 0x03D8 (FullSize[0x04E0] - InheritedSize[0x0108])
	 */
	class UTeamCapturePointComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_8LFA[0x18];                                  // 0x0108(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTeamCapturePointComponentProperties                TeamCapturePointComponentProperties;                     // 0x0120(0x0068) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		struct FReplicated_FTeamCapturePointComponentProperties    ReplicatedTeamCapturePointComponentProperties;           // 0x0188(0x0078) Net, RepNotify, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PlayersInCaptureVolumeChanged;                           // 0x0200(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             CaptureStateChanged;                                     // 0x0210(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOwningTeamHasChanged;                                  // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnControllingTeamHasChanged;                             // 0x0230(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnProgressChanged;                                       // 0x0240(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		struct FReplicated_Float                                   Progress;                                                // 0x0250(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicatedArray_ATBLCharacterPtr                   PlayersInCaptureVolume;                                  // 0x0268(0x0020) Net, RepNotify, NativeAccessSpecifierPublic
		struct FReplicated_ECapturePointState                      CurrentCaptureState;                                     // 0x0288(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_ECapturePointState                      PreviousCaptureState;                                    // 0x02A0(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_ATBLTeamPtr                             OwningTeam;                                              // 0x02B8(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_ATBLTeamPtr                             ControllingTeam;                                         // 0x02D0(0x0018) Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_ATBLTeamPtr                             ProgressGainedByTeam;                                    // 0x02E8(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FReplicated_Bool                                    bIsImmune;                                               // 0x0300(0x0018) Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TickEventFire;                                           // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		struct FObjectiveStatusDisplayComponentStruct              ObjectiveStatusDisplay;                                  // 0x0328(0x0030) ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FDisplayComponentControls                           DisplayComponentControls;                                // 0x0358(0x0005) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WCZV[0x15];                                  // 0x035D(0x0015) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bDefenderCanGetScore;                                    // 0x0372(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JX5V[0x6D];                                  // 0x0373(0x006D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      OtherOverlapActors;                                      // 0x03E0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bAwardCaptureInterval;                                   // 0x03F0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7IM1[0x3];                                   // 0x03F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      CaptureIntervalScoreInterval;                            // 0x03F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FDataTableRowSelection                              CaptureIntervalScoreEvent;                               // 0x03F8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       bAwardScoreWhenCaptured;                                 // 0x0410(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_685J[0x1F];                                  // 0x0411(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<uint32_t, TWeakObjectPtr<class ATBLCharacter>>        CharacterIDMap;                                          // 0x0430(0x0050) Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_66JT[0x50];                                  // 0x0480(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         OverlapComponents;                                       // 0x04D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetTeamCapturePointProperties(const struct FTeamCapturePointComponentProperties& Props);
		void SetCaptureState(TBL_ETeamCapturePointComponentState NewState);
		void ResetCapturePoint();
		void RefreshActorsInCaptureZone();
		bool PlayerSatisfiesCaptureRequirments(class ATBLCharacter* Player);
		void OnTrackedCharacterKilled(const struct FDeathDamageTakenEvent& DamageEvent);
		void OnTrackedCharacterDestroyed(class AActor* DestroyedActor);
		void OnRep_Properties();
		void OnRep_Progress();
		void OnRep_PlayersInTeamCapturePoint();
		void OnRep_OwningTeamChanged();
		void OnRep_ControllingTeamChanged();
		void OnRep_CaptureState();
		void OnDeactivated(class UActorComponent* Component);
		void OnActivated(class UActorComponent* Component, bool bReset);
		class ATBLTeam* GetProgressGainedByTeam();
		int GetPlayerNumbersForFaction(TBL_EFaction Faction);
		class ATBLTeam* GetOwningTeam();
		bool GetIsImmune();
		class ATBLTeam* GetControllingTeam(bool* IsTie);
		void EndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void DeactivateTeamCapturePoint();
		void BeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void ActivateTeamCapturePoint();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TeamOwnershipComponent
	 * Size -> 0x0040 (FullSize[0x0148] - InheritedSize[0x0108])
	 */
	class UTeamOwnershipComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_WB49[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicated_EFaction                                OwnerFaction;                                            // 0x0118(0x0018) Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic
		TBL_EFaction                                               DefaultFaction;                                          // 0x0130(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K1Q1[0x7];                                   // 0x0131(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnOwnershipChanged;                                      // 0x0138(0x0010) ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void SetOwnerTeam(class ATBLTeam* Team);
		void SetOwnerFaction(TBL_EFaction Faction);
		void SetFaction(TBL_EFaction Faction);
		void OnRep_OwnerFaction();
		class ATBLTeam* GetOwnerTeam();
		TBL_EFaction GetFaction();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_TargetGenerator
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UUtilityAI_TargetGenerator : public UObject
	{
	public:
		TBL_EUtilityAI_TargetType                                  Type;                                                    // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_79VZ[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsValidTarget(const struct FUtilityAI_Context& Context);
		TArray<class UObject*> GetTargetObjects(const struct FUtilityAI_Context& C);
		TArray<struct FVector> GetTargetLocations(const struct FUtilityAI_Context& C);
		void GetTargetHybridLocations(const struct FUtilityAI_Context& C, TArray<struct FUtilityAITargetHybrid>* Locations);
		TArray<class AActor*> GetTargetActors(const struct FUtilityAI_Context& C);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_ActorsWithAITag
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTG_ActorsWithAITag : public UUtilityAI_TargetGenerator
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_ActorsWithTag
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTG_ActorsWithTag : public UUtilityAI_TargetGenerator
	{
	public:
		class FName                                                Tag;                                                     // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_BlackboardValue
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTG_BlackboardValue : public UUtilityAI_TargetGenerator
	{
	public:
		class FName                                                KeyName;                                                 // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_CharactersWithinRangeOfMe
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UTG_CharactersWithinRangeOfMe : public UUtilityAI_TargetGenerator
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             RelevantFaction;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PSL9[0x3];                                   // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      Radius;                                                  // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisregardDownedPlayers;                                 // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SZ4U[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_DestinationVolume_WithAITag
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UTG_DestinationVolume_WithAITag : public UUtilityAI_TargetGenerator
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0030(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        GridDistance;                                            // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GSFV[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_InsideCombatZone
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UTG_InsideCombatZone : public UUtilityAI_TargetGenerator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_OwnCharacter
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UTG_OwnCharacter : public UUtilityAI_TargetGenerator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_OwnLocation
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UTG_OwnLocation : public UUtilityAI_TargetGenerator
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_PerceivedCharacters
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTG_PerceivedCharacters : public UUtilityAI_TargetGenerator
	{
	public:
		TBL_EUtilityAI_EnemyOrFriendly                             RelevantFaction;                                         // 0x0030(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bDisregardDownedPlayers;                                 // 0x0031(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bCheckAllowedDamagingFaction;                            // 0x0032(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EQW2[0x5];                                   // 0x0033(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_PointsOnGrid
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UTG_PointsOnGrid : public UUtilityAI_TargetGenerator
	{
	public:
		float                                                      GridSize;                                                // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      SpaceBetween;                                            // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EPointsOnGridTrace                                     TraceType;                                               // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5A7J[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		TArray<struct FVector> GetLocationsAroundTarget(const struct FUtilityAI_Context& C);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_PointsAroundActorsWithAITag
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UTG_PointsAroundActorsWithAITag : public UTG_PointsOnGrid
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0040(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_PointsAroundMe
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UTG_PointsAroundMe : public UTG_PointsOnGrid
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_PointsBesideActorsWithAITag
	 * Size -> 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
	 */
	class UTG_PointsBesideActorsWithAITag : public UTG_PointsOnGrid
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0040(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        NumberOfPoints;                                          // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ActorRadiusBoost;                                        // 0x004C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_PointsWithinActorBounds
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UTG_PointsWithinActorBounds : public UUtilityAI_TargetGenerator
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0030(0x0008) Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      GenerationDensity;                                       // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KBD8[0x4];                                   // 0x003C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TG_RallyPoints
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UTG_RallyPoints : public UUtilityAI_TargetGenerator
	{
	public:
		struct FGameplayTag                                        Tag;                                                     // 0x0030(0x0008) Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.Transition
	 * Size -> 0x0008 (FullSize[0x0260] - InheritedSize[0x0258])
	 */
	class ATransition : public AActor
	{
	public:
		unsigned char                                              UnknownData_PL5E[0x8];                                   // 0x0258(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TrapEventInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UTrapEventInterface : public UInterface
	{
	public:
		void HandleTrapEvent(TBL_ETrapEventResult Result, class ATBLCharacter* TargetCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.TutorialGameMode
	 * Size -> 0x0010 (FullSize[0x10F0] - InheritedSize[0x10E0])
	 */
	class ATutorialGameMode : public ATBLGameMode
	{
	public:
		class AActor*                                              OverridePlayerStart;                                     // 0x10E0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              OverrideLoadout;                                         // 0x10E8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetPlayerStart(class AActor* Actor);
		void SetLoadout(class UClass* Loadout);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UIBlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUIBlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_UnregisterDisplayComponent();
		void STATIC_StopListeningForKeybindings();
		bool STATIC_ShouldEnableNewHomeScreen();
		bool STATIC_ShouldDisableWorkInProgressFeatures();
		void STATIC_SetInputActionMode(class APlayerController* InPlayerController, TBL_EInputActionMode InInputActionMode);
		void STATIC_SendGlobalGameNotification(TBL_EGlobalGameNotificationCategory Category, const class FText& Title, const class FText& Body, const class FName& Subcategory, class UObject* Data, class UObject* WorldContextObject);
		struct FEventReply STATIC_RouteOnKeyUpToWidget(class UWidget* Widget, const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
		struct FEventReply STATIC_RouteOnKeyDownToWidget(class UWidget* Widget, const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
		struct FEventReply STATIC_RouteOnKeyCharToWidget(class UWidget* Widget, const struct FGeometry& MyGeometry, const struct FCharacterEvent& InCharEvent);
		struct FEventReply STATIC_RouteOnAnalogValueChanged(class UWidget* Widget, const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
		void STATIC_ResetAllAnimations(class UUserWidget* Widget);
		void STATIC_RegisterDisplayComponent();
		struct FLinearColor STATIC_RandomLinearColorFromHsluv(float h_min, float h_max, float s_min, float s_max, float l_min, float l_max);
		void STATIC_ListenForKeybindings();
		struct FLinearColor STATIC_LinearColorFromHsluv(float H, float S, float L);
		class FText STATIC_Key_GetShortDisplayName(const struct FKey& Key);
		class FName STATIC_Key_GetFName(const struct FKey& Key);
		bool STATIC_IsHandled(const struct FEventReply& EventReply);
		class ATBLPlayerController* STATIC_GetOwningTBLPlayerController(class UObject* Target);
		class UTBLLocalPlayer* STATIC_GetOwningTBLLocalPlayer(class UObject* Target);
		SlateCore_EUINavigation STATIC_GetNavigationDirectionFromKey(const struct FKeyEvent& InKeyEvent, bool* bInvalid);
		SlateCore_EUINavigation STATIC_GetNavigationDirectionFromAnalog(const struct FAnalogInputEvent& InAnalogEvent, bool* bInvalid);
		class FText STATIC_GetKeyTextFromActionBindingName(const class FString& ActionName, struct FInputActionKeyMapping* ActionMappingOut, bool bLongDisplayName, TBL_EGamepadInputMode InputMode, class UObject* WorldContextObject);
		struct FKey STATIC_GetKeyFromButtonCallout(const struct FButtonCallout& Callout, class UWidget* WorldContextObject);
		struct FKey STATIC_GetKeyFromAxisBindingName(const class FString& ActionName, class UObject* WorldContextObject);
		struct FKey STATIC_GetKeyFromActionBindingName(const class FString& ActionName, class UObject* WorldContextObject);
		struct FKeyDisplayInfo STATIC_GetKeyDisplayInfoFromTable(const struct FKey& Key, class UDataTable* Table);
		struct FKey STATIC_GetGamepadBackButton();
		struct FKey STATIC_GetGamepadAcceptButton();
		TArray<struct FButtonCallout> STATIC_GetButtonCallouts(class UWidget* Target);
		void STATIC_GetAllMapNames(TArray<class FName>* OutAssetNames, const class FString& MapPath);
		void STATIC_GetAllKeysFromActionBindingName(const class FString& ActionName, TArray<struct FKey>* NonGamePad, TArray<struct FKey>* Gamepad, class UObject* WorldContextObject);
		class UTBLScreenManager* STATIC_GetActiveScreenManagerImpure(class UObject* WorldContextObject);
		class UTBLScreenManager* STATIC_GetActiveScreenManager(class UObject* WorldContextObject);
		struct FInputActionKeyMapping STATIC_GetActionBindingFromName(const class FName& ActionName, class UObject* WorldContextObject);
		void STATIC_FocusOnBestWidgetOrChild(class UWidget* Widget);
		void STATIC_AttemptThrottledOnKilledUIActions(TBL_EFrameThrottleBranch* Branches);
		class UHudMarkerDisplayComponent* STATIC_AddHudMarkerComponentToActor(class AActor* Actor, TBL_EFaction VisibleToFaction, class UClass* Class, bool bReplicates);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UseItem
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UUseItem : public UAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UserFeedbackAndBugReportsLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUserFeedbackAndBugReportsLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SubmitUserFeedback(class UObject* WorldContextObject, const struct FUserFeedback& Report, bool bIncludeHardwareInfo);
		class FString STATIC_GetUserHashedID();
		class FString STATIC_GetHardwareInformation();
		class FString STATIC_GetGameInfo(class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_Behavior
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UUtilityAI_Behavior : public UObject
	{
	public:
		int                                                        Weight;                                                  // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      TargetSwitchInertiaPenalty;                              // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BehaviorScoreInteria;                                    // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BehaviorActiveActionMultiplier;                          // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastOrCurrentDuration;                                   // 0x0038(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      LastTimeTicked;                                          // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FUtilityAI_Consideration>                    Considerations;                                          // 0x0040(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUtilityAI_Action*                                   Action;                                                  // 0x0050(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UUtilityAI_TargetGenerator*                          TargetGenerator;                                         // 0x0058(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FDisengageParams                                    DisengageParams;                                         // 0x0060(0x000C) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		class FName                                                InteriaGroup;                                            // 0x006C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1XGU[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_BehaviorSet
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UUtilityAI_BehaviorSet : public UObject
	{
	public:
		TArray<class UClass*>                                      Behaviors;                                               // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_BlueprintLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UUtilityAI_BlueprintLibrary : public UBlueprintFunctionLibrary
	{
	public:
		TBL_EUtilityAI_TargetType STATIC_GetTargetType(const struct FUtilityAI_Context& C);
		class UObject* STATIC_GetTargetObject(const struct FUtilityAI_Context& C);
		struct FVector STATIC_GetTargetLocation(const struct FUtilityAI_Context& C);
		class AActor* STATIC_GetTargetActor(const struct FUtilityAI_Context& C);
		class ATBLCharacter* STATIC_GetOwnerCharacter(const struct FUtilityAI_Context& C);
		struct FVector STATIC_GetMoveTargetLocation(const struct FUtilityAI_Context& C);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_DecisionMaker
	 * Size -> 0x0200 (FullSize[0x0308] - InheritedSize[0x0108])
	 */
	class UUtilityAI_DecisionMaker : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_HDU8[0x10];                                  // 0x0108(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      BehaviorSets;                                            // 0x0118(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UUtilityAI_Behavior*>                         Behaviors;                                               // 0x0128(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UClass*, class UUtilityAI_Behavior*>            BehaviorsByClass;                                        // 0x0138(0x0050) NativeAccessSpecifierPublic
		struct FUtilityAI_Decision                                 LastDecision;                                            // 0x0188(0x0038) NoDestructor, NativeAccessSpecifierPublic
		struct FUtilityAI_Decision                                 DecisionPendingDisengage;                                // 0x01C0(0x0038) NoDestructor, NativeAccessSpecifierPublic
		TMap<class UClass*, float>                                 LastTimeBehaviorChosen;                                  // 0x01F8(0x0050) NativeAccessSpecifierPublic
		StaggeredUpdater_EStaggeredUpdateCategory                  UpdateCategory;                                          // 0x0248(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7V61[0x7];                                   // 0x0249(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBlackboardData*                                     BlackboardAsset;                                         // 0x0250(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bIsCombatDecisionMaker;                                  // 0x0258(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasInitialized;                                         // 0x0259(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XZ5P[0x6];                                   // 0x025A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FUtilityAI_Decision>                         LastDecisions;                                           // 0x0260(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WF1U[0x8];                                   // 0x0270(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBehaviorSetOverride                                ForcedBehaviorSet;                                       // 0x0278(0x0040) Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              BehaviorOverrides[0x50];                                 // 0x02B8(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.UtilityAI_CombatDecisionMaker
	 * Size -> 0x0160 (FullSize[0x0468] - InheritedSize[0x0308])
	 */
	class UUtilityAI_CombatDecisionMaker : public UUtilityAI_DecisionMaker
	{
	public:
		struct FCombatEventBehaviors                               Blocked_BehaviorSet;                                     // 0x0308(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               Thwacked_BehaviorSet;                                    // 0x0320(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               ParrySuccess_BehaviorSet;                                // 0x0338(0x0018) Edit, NativeAccessSpecifierPublic
		struct FTimerHandle                                        HandleParryTimer;                                        // 0x0350(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               Recovery_BehaviorSet;                                    // 0x0358(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               DamageCaused_BehaviorSet;                                // 0x0370(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               IncomingAttack_BehaviorSet;                              // 0x0388(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               IncomingShove_BehaviorSet;                               // 0x03A0(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               IncomingCombatStateChange_BehaviorSet;                   // 0x03B8(0x0018) Edit, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7HS1[0x38];                                  // 0x03D0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bShouldRecieveAllCombatStateChanges;                     // 0x0408(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_K4WL[0x7];                                   // 0x0409(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        HandleAttackTimer;                                       // 0x0410(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               EnemyBlockedMyHit_BehaviorSet;                           // 0x0418(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               EnemyEnteredCC_BehaviorSet;                              // 0x0430(0x0018) Edit, NativeAccessSpecifierPublic
		struct FCombatEventBehaviors                               TookDamage_BehaviorSet;                                  // 0x0448(0x0018) Edit, NativeAccessSpecifierPublic
		class ATBLCharacter*                                       OverrideDecisionActor;                                   // 0x0460(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		struct FIncomingAttackInfo GetIncomingAttackInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VaultMarker
	 * Size -> 0x0068 (FullSize[0x02C0] - InheritedSize[0x0258])
	 */
	class AVaultMarker : public AActor
	{
	public:
		class UInteractableComponent*                              Interactable;                                            // 0x0258(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxVaultAngle;                                           // 0x0260(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxVaultDist;                                            // 0x0264(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<TBL_EVaultType, class FName>                          MontageSection;                                          // 0x0268(0x0050) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		TBL_EVaultType                                             VaultType;                                               // 0x02B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bBothDirections;                                         // 0x02B9(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RI1K[0x6];                                   // 0x02BA(0x0006) MISSED OFFSET (PADDING)

	public:
		void UsePressed(class APawn* Pawn, class UInteractableComponent* InteractableComponent);
		bool CanVault(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VelocityCurveMovement
	 * Size -> 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
	 */
	class UVelocityCurveMovement : public UMovementAction
	{
	public:
		class UCurveVector*                                        Curve;                                                   // 0x0050(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StrengthX;                                               // 0x0058(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StrengthY;                                               // 0x005C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      Duration;                                                // 0x0060(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      BlendInTime;                                             // 0x0064(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FPercentOfInitialVelocityToKeep                     PercentOfInitialVelocityToKeep;                          // 0x0068(0x000C) Edit, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              bDoNotGoBelowSprintSpeed : 1;                            // 0x0074(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PO4B[0x3];                                   // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             InitialVelocity;                                         // 0x0078(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             VelocityToKeep;                                          // 0x0084(0x000C) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VideoPlayerWidget
	 * Size -> 0x0008 (FullSize[0x0250] - InheritedSize[0x0248])
	 */
	class UVideoPlayerWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_64NC[0x8];                                   // 0x0248(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUserLoginDowngraded();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VirtualGoodAnnouncement
	 * Size -> 0x0028 (FullSize[0x0228] - InheritedSize[0x0200])
	 */
	class UVirtualGoodAnnouncement : public UVirtualGood
	{
	public:
		TBL_EAnnouncementType                                      AnnouncementType;                                        // 0x0200(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_87SR[0x3];                                   // 0x0201(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        RequiredCL;                                              // 0x0204(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTakeoverInMainMenu;                                     // 0x0208(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EI2V[0x7];                                   // 0x0209(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ContentUrl;                                              // 0x0210(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DaysToRemainActive;                                      // 0x0220(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        DaysToRemainPrimary;                                     // 0x0224(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VirtualGoodLoadout
	 * Size -> 0x0018 (FullSize[0x0218] - InheritedSize[0x0200])
	 */
	class UVirtualGoodLoadout : public UVirtualGood
	{
	public:
		struct FSoftClassPath                                      Loadout;                                                 // 0x0200(0x0018) Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VirtualGoodLoadoutItem
	 * Size -> 0x0030 (FullSize[0x0230] - InheritedSize[0x0200])
	 */
	class UVirtualGoodLoadoutItem : public UVirtualGood
	{
	public:
		struct FSoftClassPath                                      Loadout;                                                 // 0x0200(0x0018) Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSoftClassPath                                      Item;                                                    // 0x0218(0x0018) Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VirtualGoodTitle
	 * Size -> 0x0000 (FullSize[0x0200] - InheritedSize[0x0200])
	 */
	class UVirtualGoodTitle : public UVirtualGood
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VotingInstance
	 * Size -> 0x00A0 (FullSize[0x01A8] - InheritedSize[0x0108])
	 */
	class UVotingInstance : public UActorComponent
	{
	public:
		struct FUniqueNetIdRepl                                    InstigatorId;                                            // 0x0108(0x0028) Net, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      StartTime;                                               // 0x0130(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J1SY[0x14];                                  // 0x0134(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnVotesReplicated;                                       // 0x0148(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnVoteConcluded;                                         // 0x0158(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnAfterVoteTimerFinished;                                // 0x0168(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<struct FVotingOption>                               VoteOptions;                                             // 0x0178(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VoteTime;                                                // 0x0188(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      AfterVoteWaitTime;                                       // 0x018C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4TXO[0x4];                                   // 0x0190(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                CurrentWinningOption;                                    // 0x0194(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bIsVoteFinished;                                         // 0x019C(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bVotesHaveMinimumTime;                                   // 0x019D(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ES36[0x2];                                   // 0x019E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      MinimumVoteTime;                                         // 0x01A0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HRM8[0x4];                                   // 0x01A4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_VoteOptions();
		bool IsValidForVoter(class ATBLPlayerState* Voter);
		int GetVotesNeededToPass();
		float GetTimeLeft();
		class FName GetPlayerVote(class ATBLPlayerState* Voter);
		int GetNumVotesForOption(const class FName& VoteOption);
		int GetNumberOfVotes();
		class ATBLPlayerState* GetInstigator();
		bool CanVoteOccur(class ATBLPlayerController* InstigatingControlle, const class FName& VoteOption);
		bool CanPlayerVote(class ATBLPlayerState* Voter, const class FName& VoteOption);
		bool CanPlayerBeParticipant(class ATBLPlayerState* Voter);
		bool CanHaveMoreThanOneValid();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.KickVotingInstance
	 * Size -> 0x0058 (FullSize[0x0200] - InheritedSize[0x01A8])
	 */
	class UKickVotingInstance : public UVotingInstance
	{
	public:
		struct FUniqueNetIdRepl                                    KickTarget;                                              // 0x01A8(0x0028) Net, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                YesOption;                                               // 0x01D0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                NoOption;                                                // 0x01D8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TBL_EVoteKickType                                          VoteKickType;                                            // 0x01E0(0x0001) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HKAK[0x3];                                   // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      VoteKickBanTime;                                         // 0x01E4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VoteKickMaxPercentageRequired;                           // 0x01E8(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VoteKickMinPercentageRequired;                           // 0x01EC(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      VoteKickCooldown;                                        // 0x01F0(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VoteKickMinimumPlayers;                                  // 0x01F4(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int                                                        VoteKickUnanimousPlayerThreshold;                        // 0x01F8(0x0004) ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QS6Z[0x4];                                   // 0x01FC(0x0004) MISSED OFFSET (PADDING)

	public:
		class ATBLPlayerState* GetKickTarget();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.VotingManagerComponent
	 * Size -> 0x0078 (FullSize[0x0180] - InheritedSize[0x0108])
	 */
	class UVotingManagerComponent : public UActorComponent
	{
	public:
		TArray<class UVotingInstance*>                             VotingInstances;                                         // 0x0108(0x0010) ExportObject, Net, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_POG4[0x8];                                   // 0x0118(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnVoteFinished;                                          // 0x0120(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              ValidInstances[0x50];                                    // 0x0130(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		void VoteFinished(const class FName& VoteResult);
		void RemoveInstance(class UVotingInstance* VotingInstance);
		int GetNumVoteInstancesForClass(class UClass* VoteClass);
		int GetNumValidInstancesForClass(class UClass* VoteClass, class ATBLPlayerController* VotingController);
		bool CanVoteStart(class ATBLPlayerController* VotingController, const class FName& VoteOption, class UVotingInstance* VotingInstance);
		void BroadcastVoteFinished(const struct FVotingResults& VoteResults);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WaterActor
	 * Size -> 0x0060 (FullSize[0x0350] - InheritedSize[0x02F0])
	 */
	class AWaterActor : public ATBLActor
	{
	public:
		unsigned char                                              UnknownData_483O[0x8];                                   // 0x02F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                StaticMesh;                                              // 0x02F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ZPlanExtent;                                             // 0x0300(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1PQX[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AActor>>                       OverlappedActors;                                        // 0x0308(0x0010) ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class ATBLCharacter*>                               DeadCharacters;                                          // 0x0318(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2P2K[0x28];                                  // 0x0328(0x0028) MISSED OFFSET (PADDING)

	public:
		void PerformDeadCharactersIteration();
		void OnWaterOverlapEvent(class AActor* Actor, const struct FVector& Location);
		void OnWaterMeshBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnKilled(const struct FDeathDamageTakenEvent& Event);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WaveSpawnQueuer
	 * Size -> 0x0058 (FullSize[0x00D8] - InheritedSize[0x0080])
	 */
	class UWaveSpawnQueuer : public USpawnQueuer
	{
	public:
		int                                                        MinimumRespawnTime;                                      // 0x0080(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        WaveDurationSeconds;                                     // 0x0084(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        RespawnTimeExtension;                                    // 0x0088(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        WaveTimeExtension;                                       // 0x008C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxRespawnTime;                                          // 0x0090(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int                                                        MaxWaveTime;                                             // 0x0094(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      ExtensionInterval;                                       // 0x0098(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_8AH2[0x4];                                   // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPlayerSpawnPair>                            SpawnQueue;                                              // 0x00A0(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X9PR[0x28];                                  // 0x00B0(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WeaponGroup
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UWeaponGroup : public UObject
	{
	public:
		TArray<class UClass*>                                      Items;                                                   // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      CanPickupItems;                                          // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     ItemWeaponTags;                                          // 0x0048(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     RangedItems;                                             // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     TwoHandedItems;                                          // 0x0068(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     OneHandedItems;                                          // 0x0078(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     ShieldItems;                                             // 0x0088(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     ThrownItems;                                             // 0x0098(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<TBL_EWeaponTag>                                     NoveltyItems;                                            // 0x00A8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WeaponRackComponent
	 * Size -> 0x0060 (FullSize[0x04C0] - InheritedSize[0x0460])
	 */
	class UWeaponRackComponent : public UInteractableComponent
	{
	public:
		class FScriptMulticastDelegate                             OnWeaponRackUsed;                                        // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              ItemToGrant;                                             // 0x0470(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      ItemsToRefill;                                           // 0x0478(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       RefillAllAmmoItems;                                      // 0x0488(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseStackCountFromItem;                                   // 0x0489(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C2NT[0x2];                                   // 0x048A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        StacksToAdd;                                             // 0x048C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ItemsNowAvailable;                                       // 0x0490(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ItemsAvailableLoopStart;                                 // 0x0498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ItemsAvailableLoopStop;                                  // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       ItemsNoLongerAvailable;                                  // 0x04A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkComponent*                                        OwningActorAudioComponent;                               // 0x04B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AVCQ[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void RefillItemsForPawn(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WeaponTracers
	 * Size -> 0x0148 (FullSize[0x0170] - InheritedSize[0x0028])
	 */
	class UWeaponTracers : public UAssemblyInstance
	{
	public:
		TArray<class UTracerType*>                                 TracerList;                                              // 0x0028(0x0010) ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bOnlyParryTracers;                                       // 0x0038(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bHasTracerCache;                                         // 0x0039(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       bTracerActive;                                           // 0x003A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4J5U[0x1];                                   // 0x003B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int                                                        TracerFrame;                                             // 0x003C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      ParryActors;                                             // 0x0040(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      HitActorsThisFrame;                                      // 0x0050(0x0010) ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z4H8[0x10];                                  // 0x0060(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTracerType*                                         CurrentTracers;                                          // 0x0070(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTracerShape*                                        CurrentTracerShape;                                      // 0x0078(0x0008) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTracerCacheParams                                  Params;                                                  // 0x0080(0x00F0) Transient, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		void StartWeaponTracers();
		void SetTracerFrame();
		void SaveHitActor(class AActor* HitActor);
		bool IsValid(class AInventoryItem* Weapon);
		void Initialize(class AInventoryItem* Weapon, class UWeaponTracersBlueprint* SourceObj);
		bool IgnoreHitActorWithStats(struct FHitResult* Hit);
		void HandleReleaseClash(struct FHitResult* Hit, class ATBLCharacter* HitChar);
		void HandleHitWorld(struct FHitResult* Hit, class UTracerShape* TracerShape);
		bool HandleHitParry(struct FHitResult* Hit, class ATBLCharacter* HitChar);
		void HandleHitInventoryItem(struct FHitResult* Hit, class AInventoryItem* HitInventoryItem);
		void HandleHitDeadHorse(struct FHitResult* Hit, class AHorse* HitHorse);
		void HandleHitDeadCharacter(struct FHitResult* Hit, class ATBLCharacter* HitChar);
		bool HandleHitCharacter(struct FHitResult* Hit, class ATBLCharacter* HitChar);
		void HandleHitActorWithStats(struct FHitResult* Hit);
		void HandleEarlyHitCharacter(struct FHitResult* Hit, class ATBLCharacter* HitChar);
		void EndWeaponTracers();
		void DrawDebugParryHit(const struct FVector& Loc);
		void DoWeaponTracers();
		void DoTracerCollisionCheck();
		bool DidReleaseClash(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		bool DidHitWorld(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		bool DidHitParryBox(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		bool DidHitInventoryItem(struct FHitResult* Hit, class AInventoryItem** OutInventoryItem);
		bool DidHitDeadHorse(struct FHitResult* Hit, class AHorse** OutHorse);
		bool DidHitDeadCharacter(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		bool DidHitCharacter(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		bool DidHitActorWithStats(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		bool DidHitActor(class AActor* HitActor);
		bool DidHeadShot(struct FHitResult* Hit);
		bool DidEarlyHit(struct FHitResult* Hit, class ATBLCharacter** OutCharacter);
		void CopyPreviousFrame();
		bool CheckTargetVisibility(class AActor* Target);
		void CalcTracerPoints();
		void ActivateAttackTracers();
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WeaponTracersBlueprint
	 * Size -> 0x0010 (FullSize[0x00B8] - InheritedSize[0x00A8])
	 */
	class UWeaponTracersBlueprint : public UAssemblyBlueprint
	{
	public:
		TArray<class UTracerType*>                                 TracerList;                                              // 0x00A8(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WeaponVsWeaponWorker
	 * Size -> 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
	 */
	class UWeaponVsWeaponWorker : public UKillWithWeaponWorker
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class TBL.WebImageWidget
	 * Size -> 0x0050 (FullSize[0x0260] - InheritedSize[0x0210])
	 */
	class UWebImageWidget : public UImage
	{
	public:
		class FString                                              URL;                                                     // 0x0210(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             WebImageWidgetImageDownloadedDelegate;                   // 0x0220(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E8XN[0x30];                                  // 0x0230(0x0030) MISSED OFFSET (PADDING)

	public:
		void WebImageWidgetImageDownloadedDelegate__DelegateSignature(bool bSuccess);
		void SetUrl(const class FString& InUrl);
		void OnImageDownloaded(bool bSuccess);
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
